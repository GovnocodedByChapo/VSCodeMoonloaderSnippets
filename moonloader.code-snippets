// Visual Studio Code Snippets for MOONLOADER by chapo
// version: 21.11.2022 - 13:42
{
    
"→︎ Проверяет, активен ли курсор": {
    "scope": "lua",
    "prefix": "isCursorActive",
    "body": [
        "${1:bool result} = isCursorActive()"
    ],
    "description": "isCursorActive - Проверяет, активен ли курсор\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Возвращает хэндл пикапа по указателю на экземляр класса CPickup.": {
    "scope": "lua",
    "prefix": "getPickupPointerHandle",
    "body": [
        "${1:int handle} = getPickupPointerHandle(${0:Pickup pickup})"
    ],
    "description": "getPickupPointerHandle - Возвращает хэндл пикапа по указателю на экземляр класса CPickup.\nПринимаемые значения:\nint handle указатель\n\nВозвращаемые значения:\nPickup pickup хэндл пикапа\n"
},
"→︎ Возвращает указатель на структуру пикапа": {
    "scope": "lua",
    "prefix": "getPickupPointer",
    "body": [
        "${1:int pointer} = getPickupPointer(${0:Pickup pickup})"
    ],
    "description": "getPickupPointer - Возвращает указатель на структуру пикапа\nПринимаемые значения:\nPickup pickup хэндл\n\nВозвращаемые значения:\nint pointer указатель\n"
},
"→︎ Возвращает тип пикапа": {
    "scope": "lua",
    "prefix": "getPickupType",
    "body": [
        "${1:int type} = getPickupType(${0:Pickup pickup})"
    ],
    "description": "getPickupType - Возвращает тип пикапа\nПринимаемые значения:\nPickup pickup хэндл пикапа\n\nВозвращаемые значения:\nint type тип пикапа\n"
},
"→︎ Возвращает модель пикапа": {
    "scope": "lua",
    "prefix": "getPickupModel",
    "body": [
        "${1:int model} = getPickupModel(${0:Pickup pickup})"
    ],
    "description": "getPickupModel - Возвращает модель пикапа\nПринимаемые значения:\nPickup pickup хэндл пикапа\n\nВозвращаемые значения:\nint model модель\n"
},
"→︎ Возвращает кватернион вращения объекта": {
    "scope": "lua",
    "prefix": "getObjectQuaternion",
    "body": [
        "${1:float x, float y, float z, float w} = getObjectQuaternion(${0:Object object})"
    ],
    "description": "getObjectQuaternion - Возвращает кватернион вращения объекта\nПринимаемые значения:\nObject object объект\n\nВозвращаемые значения:\nfloat x, float y, float z, float w кватернион\n"
},
"→︎ Задаёт кватернион вращения объекта": {
    "scope": "lua",
    "prefix": "setObjectQuaternion",
    "body": [
        "setObjectQuaternion(${0:Object object, float x, float y, float z, float w})"
    ],
    "description": "setObjectQuaternion - Задаёт кватернион вращения объекта\nПринимаемые значения:\nObject object объект, float x, float y, float z, float w кватернион\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает кватернион вращения транспортного средства": {
    "scope": "lua",
    "prefix": "getVehicleQuaternion",
    "body": [
        "${1:float x, float y, float z, float w} = getVehicleQuaternion(${0:Vehicle car})"
    ],
    "description": "getVehicleQuaternion - Возвращает кватернион вращения транспортного средства\nПринимаемые значения:\nVehicle car транспорт\n\nВозвращаемые значения:\nfloat x, float y, float z, float w кватернион\n"
},
"→︎ Задаёт кватернион вращения транспортного средства": {
    "scope": "lua",
    "prefix": "setVehicleQuaternion",
    "body": [
        "setVehicleQuaternion(${0:Vehicle car, float x, float y, float z, float w})"
    ],
    "description": "setVehicleQuaternion - Задаёт кватернион вращения транспортного средства\nПринимаемые значения:\nVehicle car транспорт, float x, float y, float z, float w кватернион\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает кватернион вращения персонажа": {
    "scope": "lua",
    "prefix": "getCharQuaternion",
    "body": [
        "${1:float x, float y, float z, float w} = getCharQuaternion(${0:Ped ped})"
    ],
    "description": "getCharQuaternion - Возвращает кватернион вращения персонажа\nПринимаемые значения:\nPed ped персонаж\n\nВозвращаемые значения:\nfloat x, float y, float z, float w кватернион\n"
},
"→︎ Задаёт кватернион вращения персонажа": {
    "scope": "lua",
    "prefix": "setCharQuaternion",
    "body": [
        "setCharQuaternion(${0:Ped ped, float x, float y, float z, float w})"
    ],
    "description": "setCharQuaternion - Задаёт кватернион вращения персонажа\nПринимаемые значения:\nPed ped персонаж, float x, float y, float z, float w кватернион\n\nВозвращаемые значения:\n\n"
},
"→︎ Загружает аудио из файла или по веб-адресу": {
    "scope": "lua",
    "prefix": "loadAudioStream",
    "body": [
        "${1:AudioStream handle} = loadAudioStream(${0:zstring audio})"
    ],
    "description": "loadAudioStream - Загружает аудио из файла или по веб-адресу\nПринимаемые значения:\nzstring audio путь к файлу или Web-адрес\n\nВозвращаемые значения:\nAudioStream handle аудиопоток\n"
},
"→︎ Задаёт новый статус аудиопотоку": {
    "scope": "lua",
    "prefix": "setAudioStreamState",
    "body": [
        "setAudioStreamState(${0:AudioStream handle, int state})"
    ],
    "description": "setAudioStreamState - Задаёт новый статус аудиопотоку\nПринимаемые значения:\nAudioStream handle аудиопоток, int state состояние\n\nВозвращаемые значения:\n\n"
},
"→︎ Освобождает загруженный аудиопоток. Использовать не необходимо, т.к. аудиопотоки освобождаются автоматически сборщиком мусора.": {
    "scope": "lua",
    "prefix": "releaseAudioStream",
    "body": [
        "releaseAudioStream(${0:AudioStream handle})"
    ],
    "description": "releaseAudioStream - Освобождает загруженный аудиопоток. Использовать не необходимо, т.к. аудиопотоки освобождаются автоматически сборщиком мусора.\nПринимаемые значения:\nAudioStream handle аудиопоток\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает длительность аудиопотока в секундах": {
    "scope": "lua",
    "prefix": "getAudioStreamLength",
    "body": [
        "${1:double length} = getAudioStreamLength(${0:AudioStream handle})"
    ],
    "description": "getAudioStreamLength - Возвращает длительность аудиопотока в секундах\nПринимаемые значения:\nAudioStream handle аудиопоток\n\nВозвращаемые значения:\ndouble length длительность\n"
},
"→︎ Возвращает статус аудиопотока": {
    "scope": "lua",
    "prefix": "getAudioStreamState",
    "body": [
        "${1:int state} = getAudioStreamState(${0:AudioStream handle})"
    ],
    "description": "getAudioStreamState - Возвращает статус аудиопотока\nПринимаемые значения:\nAudioStream handle аудиопоток\n\nВозвращаемые значения:\nint state статус\n"
},
"→︎ Возвращает громкость аудиопотока": {
    "scope": "lua",
    "prefix": "getAudioStreamVolume",
    "body": [
        "${1:float volume} = getAudioStreamVolume(${0:AudioStream audio})"
    ],
    "description": "getAudioStreamVolume - Возвращает громкость аудиопотока\nПринимаемые значения:\nAudioStream audio аудиопоток\n\nВозвращаемые значения:\nfloat volume громкость\n"
},
"→︎ Устанавливает громкость аудиопотока": {
    "scope": "lua",
    "prefix": "setAudioStreamVolume",
    "body": [
        "setAudioStreamVolume(${0:AudioStream audio, float volume})"
    ],
    "description": "setAudioStreamVolume - Устанавливает громкость аудиопотока\nПринимаемые значения:\nAudioStream audio аудиопоток, float volume громкость\n\nВозвращаемые значения:\n\n"
},
"→︎ Переключает статус зацикленности аудиопотока": {
    "scope": "lua",
    "prefix": "setAudioStreamLooped",
    "body": [
        "setAudioStreamLooped(${0:AudioStream audio, bool loop})"
    ],
    "description": "setAudioStreamLooped - Переключает статус зацикленности аудиопотока\nПринимаемые значения:\nAudioStream audio аудиопоток, bool loop зациклить\n\nВозвращаемые значения:\n\n"
},
"→︎ Загружает аудиопоток с поддержкой объёмного (3D) звука": {
    "scope": "lua",
    "prefix": "load3dAudioStream",
    "body": [
        "${1:AudioStream handle} = load3dAudioStream(${0:zstring audio})"
    ],
    "description": "load3dAudioStream - Загружает аудиопоток с поддержкой объёмного (3D) звука\nПринимаемые значения:\nzstring audio путь к файлу или веб-адрес\n\nВозвращаемые значения:\nAudioStream handle загруженный аудиопоток\n"
},
"→︎ Устанавливает 3D-аудиопотоку позицию в мире игры": {
    "scope": "lua",
    "prefix": "setPlay3dAudioStreamAtCoordinates",
    "body": [
        "setPlay3dAudioStreamAtCoordinates(${0:AudioStream handle, float posX, float posY, float posZ})"
    ],
    "description": "setPlay3dAudioStreamAtCoordinates - Устанавливает 3D-аудиопотоку позицию в мире игры\nПринимаемые значения:\nAudioStream handle аудиопоток, float posX, posY, posZ координаты\n\nВозвращаемые значения:\n\n"
},
"→︎ Прикрепляет 3D-звук к объекту": {
    "scope": "lua",
    "prefix": "setPlay3dAudioStreamAtObject",
    "body": [
        "setPlay3dAudioStreamAtObject(${0:AudioStream audio, Object object})"
    ],
    "description": "setPlay3dAudioStreamAtObject - Прикрепляет 3D-звук к объекту\nПринимаемые значения:\nAudioStream audio аудиопоток, Object object объект\n\nВозвращаемые значения:\n\n"
},
"→︎ Прикрепляет 3D-звук к персонажу": {
    "scope": "lua",
    "prefix": "setPlay3dAudioStreamAtChar",
    "body": [
        "setPlay3dAudioStreamAtChar(${0:AudioStream audio, Ped ped})"
    ],
    "description": "setPlay3dAudioStreamAtChar - Прикрепляет 3D-звук к персонажу\nПринимаемые значения:\nAudioStream audio аудиопоток, Ped ped персонаж\n\nВозвращаемые значения:\n\n"
},
"→︎ Прикрепляет 3D-звук к транспортному средству": {
    "scope": "lua",
    "prefix": "setPlay3dAudioStreamAtCar",
    "body": [
        "setPlay3dAudioStreamAtCar(${0:AudioStream audio, Vehicle car})"
    ],
    "description": "setPlay3dAudioStreamAtCar - Прикрепляет 3D-звук к транспортному средству\nПринимаемые значения:\nAudioStream audio аудиопоток, Vehicle car транспорт\n\nВозвращаемые значения:\n\n"
},
"→︎ Загружает аудиопоток из файла в памяти процесса": {
    "scope": "lua",
    "prefix": "loadAudioStreamFromMemory",
    "body": [
        "${1:AudioStream handle} = loadAudioStreamFromMemory(${0:uint address, uint size})"
    ],
    "description": "loadAudioStreamFromMemory - Загружает аудиопоток из файла в памяти процесса\nПринимаемые значения:\nuint address адрес памяти, uint size размер файла\n\nВозвращаемые значения:\nAudioStream handle загруженный аудиопоток\n"
},
"→︎ Загружает аудиопоток с объёмным звучанием из файла в памяти процесса": {
    "scope": "lua",
    "prefix": "load3dAudioStreamFromMemory",
    "body": [
        "${1:AudioStream handle} = load3dAudioStreamFromMemory(${0:uint address, uint size})"
    ],
    "description": "load3dAudioStreamFromMemory - Загружает аудиопоток с объёмным звучанием из файла в памяти процесса\nПринимаемые значения:\nuint address адрес памяти, uint size размер\n\nВозвращаемые значения:\nAudioStream handle загруженный аудиопоток\n"
},
"→︎ Отображает на экране линию от точки pos1x, pos1y до точки pos2x, pos2y": {
    "scope": "lua",
    "prefix": "renderDrawLine",
    "body": [
        "renderDrawLine(${0:float pos1x, float pos1y, float pos2x, float pos2y, float width, uint color})"
    ],
    "description": "renderDrawLine - Отображает на экране линию от точки pos1x, pos1y до точки pos2x, pos2y\nПринимаемые значения:\nfloat pos1x, pos1y координаты первой точки, float pos2y, pos2y координаты второй точки, float width ширина линии, uint color цвет линии в формате ARGB\n\nВозвращаемые значения:\n\n"
},
"→︎ Рисует прямоугольник в указанных координатах с определённым размером": {
    "scope": "lua",
    "prefix": "renderDrawBox",
    "body": [
        "renderDrawBox(${0:float posX, float posY, float sizeX, float sizeY, uint color})"
    ],
    "description": "renderDrawBox - Рисует прямоугольник в указанных координатах с определённым размером\nПринимаемые значения:\nfloat posX, posY координаты, float sizeX, sizeY размер, uint color цвет в ARGB\n\nВозвращаемые значения:\n\n"
},
"→︎ Рисует прямоугольник с границей": {
    "scope": "lua",
    "prefix": "renderDrawBoxWithBorder",
    "body": [
        "renderDrawBoxWithBorder(${0:float posX, float posY, float sizeX, float sizeY, uint color, float bsize, uint bcolor})"
    ],
    "description": "renderDrawBoxWithBorder - Рисует прямоугольник с границей\nПринимаемые значения:\nfloat posX, posY координаты, float sizeX, sizeY размер, uint color цвет в ARGB, float bsize толщина границы, uint bcolor цвет границы в ARGB\n\nВозвращаемые значения:\n\n"
},
"→︎ Вычисляет ширину заданного текста для загруженного шрифта и возвращает результат в пикселях.": {
    "scope": "lua",
    "prefix": "renderGetFontDrawTextLength",
    "body": [
        "${1:float length} = renderGetFontDrawTextLength(${0:DxFont font, zstring text [, bool ignoreColorTags=false]})"
    ],
    "description": "renderGetFontDrawTextLength - Вычисляет ширину заданного текста для загруженного шрифта и возвращает результат в пикселях.\nПринимаемые значения:\nDxFont font шрифт, zstring text текст, bool ignoreColorTags=false пропуск цветовых тегов\n\nВозвращаемые значения:\nfloat length ширина в пикселях\n"
},
"→︎ Возвращает высоту загруженного шрифта в пикселях": {
    "scope": "lua",
    "prefix": "renderGetFontDrawHeight",
    "body": [
        "${1:float height} = renderGetFontDrawHeight(${0:DxFont font})"
    ],
    "description": "renderGetFontDrawHeight - Возвращает высоту загруженного шрифта в пикселях\nПринимаемые значения:\nDxFont font шрифт\n\nВозвращаемые значения:\nfloat height высота\n"
},
"→︎ Возвращает индекс символа в тексте по позиции в пикселях": {
    "scope": "lua",
    "prefix": "renderGetFontCharIndexAt",
    "body": [
        "${1:uint index} = renderGetFontCharIndexAt(${0:DxFont font, string text, float x [, bool ignoreColorTags=false]})"
    ],
    "description": "renderGetFontCharIndexAt - Возвращает индекс символа в тексте по позиции в пикселях\nПринимаемые значения:\nDxFont font шрифт, string text текст, float x смещение в пикселях, bool ignoreColorTags=false пропуск цветовых тегов\n\nВозвращаемые значения:\nuint index индекс символа\n"
},
"→︎ Загружает установленный в системе шрифт по названию. Можно задать стиль шрифта и требуемую кодировку.": {
    "scope": "lua",
    "prefix": "renderCreateFont",
    "body": [
        "${1:DxFont font} = renderCreateFont(${0:zstring font, int height, uint flags [, uint charset]})"
    ],
    "description": "renderCreateFont - Загружает установленный в системе шрифт по названию. Можно задать стиль шрифта и требуемую кодировку.\nПринимаемые значения:\nzstring font название, int height высота, uint flags флаги, uint charset кодировка\n\nВозвращаемые значения:\nDxFont font шрифт\n"
},
"→︎ Освобождает объект шрифта. Загруженные шрифты выгружаются автоматически сборщиком мусора, так что использование этой функции необязательно, она существует лишь для обеспечения совместимости со старыми версиями.": {
    "scope": "lua",
    "prefix": "renderReleaseFont",
    "body": [
        "renderReleaseFont(${0:DxFont font})"
    ],
    "description": "renderReleaseFont - Освобождает объект шрифта. Загруженные шрифты выгружаются автоматически сборщиком мусора, так что использование этой функции необязательно, она существует лишь для обеспечения совместимости со старыми версиями.\nПринимаемые значения:\nDxFont font шрифт\n\nВозвращаемые значения:\n\n"
},
"→︎ Отображает текст на экране, используя загруженный шрифт. Поддерживает цветовые теги в формате {RRGGBB} и {AARRGGBB}, и символ переноса строки \\\\n.": {
    "scope": "lua",
    "prefix": "renderFontDrawText",
    "body": [
        "renderFontDrawText(${0:DxFont font, zstring text, float posX, float posY, uint color [, bool ignoreColorTags=false]})"
    ],
    "description": "renderFontDrawText - Отображает текст на экране, используя загруженный шрифт. Поддерживает цветовые теги в формате {RRGGBB} и {AARRGGBB}, и символ переноса строки \\\\n.\nПринимаемые значения:\nDxFont font шрифт, zstring text текст, float posX, posY координаты, uint color цвет в ARGB, bool ignoreColorTags=false если задано, true , цветовые теги не станут обрабатываться\n\nВозвращаемые значения:\n\n"
},
"→︎ Отображает многоугольник в указанных координатах с заданным вращением и количеством углов": {
    "scope": "lua",
    "prefix": "renderDrawPolygon",
    "body": [
        "renderDrawPolygon(${0:float posX, float posY, float sizeX, float sizeY, int corners, float rotation, uint color})"
    ],
    "description": "renderDrawPolygon - Отображает многоугольник в указанных координатах с заданным вращением и количеством углов\nПринимаемые значения:\nfloat posX, float posY координаты центра, float sizeX, float sizeY размер, int corners количество вершин, float rotation вращение в градусах, uint color цвет фигуры в формате ARGB\n\nВозвращаемые значения:\n\n"
},
"→︎ Загружает текстуру из файла": {
    "scope": "lua",
    "prefix": "renderLoadTextureFromFile",
    "body": [
        "${1:DxTexture texture} = renderLoadTextureFromFile(${0:zstring file})"
    ],
    "description": "renderLoadTextureFromFile - Загружает текстуру из файла\nПринимаемые значения:\nzstring file путь к файлу\n\nВозвращаемые значения:\nDxTexture texture текстура\n"
},
"→︎ Освобождает загруженную текстуру. Применять необязательно, т.к. все загруженные текстуры освобождаются сборщиком мусора. Функция оставлена для обеспечения совместимости со старыми версиями.": {
    "scope": "lua",
    "prefix": "renderReleaseTexture",
    "body": [
        "renderReleaseTexture(${0:DxTexture texture})"
    ],
    "description": "renderReleaseTexture - Освобождает загруженную текстуру. Применять необязательно, т.к. все загруженные текстуры освобождаются сборщиком мусора. Функция оставлена для обеспечения совместимости со старыми версиями.\nПринимаемые значения:\nDxTexture texture текстура\n\nВозвращаемые значения:\n\n"
},
"→︎ Отображает загруженную текстуру по заданным координатам, с указанным размером и вращением": {
    "scope": "lua",
    "prefix": "renderDrawTexture",
    "body": [
        "renderDrawTexture(${0:DxTexture texture, float posX, float posY, float sizeX, float sizeY, float rotation, uint color})"
    ],
    "description": "renderDrawTexture - Отображает загруженную текстуру по заданным координатам, с указанным размером и вращением\nПринимаемые значения:\nDxTexture texture текстура, float posX, posY координаты, float sizeX, sizeY размер, float rotation вращение, uint color цвет в ARGB\n\nВозвращаемые значения:\n\n"
},
"→︎ Начало рисования фигуры определённым методом., Возможные значения type:": {
    "scope": "lua",
    "prefix": "renderBegin",
    "body": [
        "renderBegin(${0:int type})"
    ],
    "description": "renderBegin - Начало рисования фигуры определённым методом., Возможные значения type:\nПринимаемые значения:\nint type метод\n\nВозвращаемые значения:\n\n"
},
"→︎ Завершение рисования фигуры.": {
    "scope": "lua",
    "prefix": "renderEnd",
    "body": [
        "renderEnd()"
    ],
    "description": "renderEnd - Завершение рисования фигуры.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Задаёт цвет фигуры. Должна быть вызвана перед добавлением вершины": {
    "scope": "lua",
    "prefix": "renderColor",
    "body": [
        "renderColor(${0:uint color})"
    ],
    "description": "renderColor - Задаёт цвет фигуры. Должна быть вызвана перед добавлением вершины\nПринимаемые значения:\nuint color цвет в ARGB\n\nВозвращаемые значения:\n\n"
},
"→︎ Добавляет вершину в фигуру по абсолютным координатам": {
    "scope": "lua",
    "prefix": "renderVertex",
    "body": [
        "renderVertex(${0:float vX, float vY})"
    ],
    "description": "renderVertex - Добавляет вершину в фигуру по абсолютным координатам\nПринимаемые значения:\nfloat vX, float vY координаты\n\nВозвращаемые значения:\n\n"
},
"→︎ Указывает, какая точка текстуры будет прикреплена к следующей вершине. Координаты точки задаются в диапазоне от '0.0' до '1.0', относительно размеров всей текстуры. Должна быть вызвана перед каждым добавлением вершины, к которой нужно прикрепить текстуру. Без вызова renderBindTexture не будет иметь эффекта": {
    "scope": "lua",
    "prefix": "renderSetTexCoord",
    "body": [
        "renderSetTexCoord(${0:float posX, float posY})"
    ],
    "description": "renderSetTexCoord - Указывает, какая точка текстуры будет прикреплена к следующей вершине. Координаты точки задаются в диапазоне от '0.0' до '1.0', относительно размеров всей текстуры. Должна быть вызвана перед каждым добавлением вершины, к которой нужно прикрепить текстуру. Без вызова renderBindTexture не будет иметь эффекта\nПринимаемые значения:\nfloat posX, posY относительные координаты текстуры\n\nВозвращаемые значения:\n\n"
},
"→︎ Задаёт фигуре текстуру. Каждой фигуре может быть задана только одна текстура. Значение nil сбросит заданную текстуру., Эта функция должна быть использована совместно с renderSetTexCoord": {
    "scope": "lua",
    "prefix": "renderBindTexture",
    "body": [
        "renderBindTexture(${0:DxTexture texture})"
    ],
    "description": "renderBindTexture - Задаёт фигуре текстуру. Каждой фигуре может быть задана только одна текстура. Значение nil сбросит заданную текстуру., Эта функция должна быть использована совместно с renderSetTexCoord\nПринимаемые значения:\nDxTexture texture текстура\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает указатель на объект IDirect3DTexture9, принадлежащий текстуре": {
    "scope": "lua",
    "prefix": "renderGetTextureStruct",
    "body": [
        "${1:uint struct} = renderGetTextureStruct(${0:DxTexture texture})"
    ],
    "description": "renderGetTextureStruct - Возвращает указатель на объект IDirect3DTexture9, принадлежащий текстуре\nПринимаемые значения:\nDxTexture texture текстура\n\nВозвращаемые значения:\nuint struct указатель\n"
},
"→︎ Возвращает указатель на объект ID3DXSprite, принадлежащий текстуре": {
    "scope": "lua",
    "prefix": "renderGetTextureSprite",
    "body": [
        "${1:uint sprite} = renderGetTextureSprite(${0:DxTexture texture})"
    ],
    "description": "renderGetTextureSprite - Возвращает указатель на объект ID3DXSprite, принадлежащий текстуре\nПринимаемые значения:\nDxTexture texture текстура\n\nВозвращаемые значения:\nuint sprite указатель\n"
},
"→︎ Возвращает размеры изображения": {
    "scope": "lua",
    "prefix": "renderGetTextureSize",
    "body": [
        "${1:uint sizeX, uint sizeY} = renderGetTextureSize(${0:DxTexture texture})"
    ],
    "description": "renderGetTextureSize - Возвращает размеры изображения\nПринимаемые значения:\nDxTexture texture текстура\n\nВозвращаемые значения:\nuint sizeX ширина, uint sizeY высота\n"
},
"→︎ Устанавливает значение рендерстейта., Подробнее о рендерстейтах: MSDN": {
    "scope": "lua",
    "prefix": "renderSetRenderState",
    "body": [
        "renderSetRenderState(${0:int state, uint value})"
    ],
    "description": "renderSetRenderState - Устанавливает значение рендерстейта., Подробнее о рендерстейтах: MSDN\nПринимаемые значения:\nint state тип, uint value новое значение\n\nВозвращаемые значения:\n\n"
},
"→︎ Загружает текстуру из файла в памяти процесса": {
    "scope": "lua",
    "prefix": "renderLoadTextureFromFileInMemory",
    "body": [
        "${1:DxTexture texture} = renderLoadTextureFromFileInMemory(${0:uint pointer, uint size})"
    ],
    "description": "renderLoadTextureFromFileInMemory - Загружает текстуру из файла в памяти процесса\nПринимаемые значения:\nuint pointer адрес памяти, uint size размер файла\n\nВозвращаемые значения:\nDxTexture texture текстура\n"
},
"→︎ Задаёт числовую версию скрипта. Предназначена преимущественно для системы проверки обновлений.": {
    "scope": "lua",
    "prefix": "script_version_number",
    "body": [
        "script_version_number(${0:int version})"
    ],
    "description": "script_version_number - Задаёт числовую версию скрипта. Предназначена преимущественно для системы проверки обновлений.\nПринимаемые значения:\nint version версия\n\nВозвращаемые значения:\n\n"
},
"→︎ Задаёт текстовую версию скрипта.": {
    "scope": "lua",
    "prefix": "script_version",
    "body": [
        "script_version(${0:string version})"
    ],
    "description": "script_version - Задаёт текстовую версию скрипта.\nПринимаемые значения:\nstring version версия\n\nВозвращаемые значения:\n\n"
},
"→︎ Задаёт название скрипта. Если название не задать, то в качестве названия будет выступать имя файла скрипта.": {
    "scope": "lua",
    "prefix": "script_name",
    "body": [
        "script_name(${0:string name})"
    ],
    "description": "script_name - Задаёт название скрипта. Если название не задать, то в качестве названия будет выступать имя файла скрипта.\nПринимаемые значения:\nstring name название\n\nВозвращаемые значения:\n\n"
},
"→︎ Задаёт описание скрипта.": {
    "scope": "lua",
    "prefix": "script_description",
    "body": [
        "script_description(${0:string description})"
    ],
    "description": "script_description - Задаёт описание скрипта.\nПринимаемые значения:\nstring description текст описания\n\nВозвращаемые значения:\n\n"
},
"→︎ Задаёт нескольких авторов скрипта. Имеет аналог с более подходящим названием для указания одного автора - script_author.": {
    "scope": "lua",
    "prefix": "script_authors",
    "body": [
        "script_authors(${0:string author, ...})"
    ],
    "description": "script_authors - Задаёт нескольких авторов скрипта. Имеет аналог с более подходящим названием для указания одного автора - script_author.\nПринимаемые значения:\nstring authors, ... авторы скрипта\n\nВозвращаемые значения:\n\n"
},
"→︎ Задаёт автора или нескольких авторов скрипта. Имеет аналог с более подходящим названием для указания нескольких авторов - script_authors.": {
    "scope": "lua",
    "prefix": "script_author",
    "body": [
        "script_author(${0:string author, ...})"
    ],
    "description": "script_author - Задаёт автора или нескольких авторов скрипта. Имеет аналог с более подходящим названием для указания нескольких авторов - script_authors.\nПринимаемые значения:\nstring author автор скрипта\n\nВозвращаемые значения:\n\n"
},
"→︎ Задаёт зависимости скрипта. На текущий момент предназначен только для вывода. В будущем получит дополнительную функциональность.": {
    "scope": "lua",
    "prefix": "script_dependencies",
    "body": [
        "script_dependencies(${0:string name, ...})"
    ],
    "description": "script_dependencies - Задаёт зависимости скрипта. На текущий момент предназначен только для вывода. В будущем получит дополнительную функциональность.\nПринимаемые значения:\nstring name, ... зависимости\n\nВозвращаемые значения:\n\n"
},
"→︎ Задаёт минимальную требуемую версию MoonLoader. Если версия не соответствует, выводит сообщение об ошибке, но не прекращает работу скрипта.": {
    "scope": "lua",
    "prefix": "script_moonloader",
    "body": [
        "script_moonloader(${0:int version})"
    ],
    "description": "script_moonloader - Задаёт минимальную требуемую версию MoonLoader. Если версия не соответствует, выводит сообщение об ошибке, но не прекращает работу скрипта.\nПринимаемые значения:\nint version версия\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает luascript скрипта, из которого была вызвана функция.": {
    "scope": "lua",
    "prefix": "thisScript",
    "body": [
        "${1:LuaScript s} = thisScript()"
    ],
    "description": "thisScript - Возвращает luascript скрипта, из которого была вызвана функция.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nLuaScript s скрипт\n"
},
"→︎ Приостанавливает выполнение сопрограммы main на заданное время в миллисекундах. Может быть вызвана только изнутри main и скриптовых потоков., Если функция вызвана изнутри main и значение time равно -1, то скрипт будет приостановлен на бесконечный период времени,, это может быть использовано для прекращения активного исполнения скрипта, но чтобы он продолжал работать и обрабатывать события.": {
    "scope": "lua",
    "prefix": "wait",
    "body": [
        "wait(${0:int time})"
    ],
    "description": "wait - Приостанавливает выполнение сопрограммы main на заданное время в миллисекундах. Может быть вызвана только изнутри main и скриптовых потоков., Если функция вызвана изнутри main и значение time равно -1, то скрипт будет приостановлен на бесконечный период времени,, это может быть использовано для прекращения активного исполнения скрипта, но чтобы он продолжал работать и обрабатывать события.\nПринимаемые значения:\nint time время в миллисекундах\n\nВозвращаемые значения:\n\n"
},
"→︎ Перезаписанная стандартная функция 'print', выводит текст в файл moonloader.log и вызывает событие onScriptMessage.": {
    "scope": "lua",
    "prefix": "print",
    "body": [
        "print(${0:any value, …})"
    ],
    "description": "print - Перезаписанная стандартная функция 'print', выводит текст в файл moonloader.log и вызывает событие onScriptMessage.\nПринимаемые значения:\nany value значение любого типа, ... ещё значения любого типа\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает значение глобальной переменной игры по её индексу. Для получения дробного значения дополнительно используется функция representIntAsFloat.": {
    "scope": "lua",
    "prefix": "getGameGlobal",
    "body": [
        "${1:int value} = getGameGlobal(${0:int index})"
    ],
    "description": "getGameGlobal - Возвращает значение глобальной переменной игры по её индексу. Для получения дробного значения дополнительно используется функция representIntAsFloat.\nПринимаемые значения:\nint index номер переменной\n\nВозвращаемые значения:\nint value значение\n"
},
"→︎ Задаёт значение глобальной переменной игры по её индексу. Для записи дробного значения дополнительно используется функция representFloatAsInt.": {
    "scope": "lua",
    "prefix": "setGameGlobal",
    "body": [
        "setGameGlobal(${0:int index, int value})"
    ],
    "description": "setGameGlobal - Задаёт значение глобальной переменной игры по её индексу. Для записи дробного значения дополнительно используется функция representFloatAsInt.\nПринимаемые значения:\nint index номер переменной, int value значение\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает адрес глобальной переменной игры по индексу.": {
    "scope": "lua",
    "prefix": "getGameGlobalPtr",
    "body": [
        "${1:int ptr} = getGameGlobalPtr(${0:int index})"
    ],
    "description": "getGameGlobalPtr - Возвращает адрес глобальной переменной игры по индексу.\nПринимаемые значения:\nint index номер переменной\n\nВозвращаемые значения:\nint ptr адрес\n"
},
"→︎ Проверяет плагин SAMPFUNCS на подключенность к игре.": {
    "scope": "lua",
    "prefix": "isSampfuncsLoaded",
    "body": [
        "${1:bool loaded} = isSampfuncsLoaded()"
    ],
    "description": "isSampfuncsLoaded - Проверяет плагин SAMPFUNCS на подключенность к игре.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool loaded статус\n"
},
"→︎ Проверяет плагин CLEO на подключенность к игре.": {
    "scope": "lua",
    "prefix": "isCleoLoaded",
    "body": [
        "${1:bool loaded} = isCleoLoaded()"
    ],
    "description": "isCleoLoaded - Проверяет плагин CLEO на подключенность к игре.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool loaded статус\n"
},
"→︎ Проверяет, запущен ли SA:MP.": {
    "scope": "lua",
    "prefix": "isSampLoaded",
    "body": [
        "${1:bool loaded} = isSampLoaded()"
    ],
    "description": "isSampLoaded - Проверяет, запущен ли SA:MP.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool loaded результат\n"
},
"→︎ Проверяет, зажата ли клавиша.": {
    "scope": "lua",
    "prefix": "isKeyDown",
    "body": [
        "${1:bool state} = isKeyDown(${0:int keyId})"
    ],
    "description": "isKeyDown - Проверяет, зажата ли клавиша.\nПринимаемые значения:\nint keyId виртуальный ид клавиши\n\nВозвращаемые значения:\nbool state статус\n"
},
"→︎ Выгружает все загруженные скрипты и загружает заново из рабочей директории, учитывая добавленные и убранные.": {
    "scope": "lua",
    "prefix": "reloadScripts",
    "body": [
        "reloadScripts()"
    ],
    "description": "reloadScripts - Выгружает все загруженные скрипты и загружает заново из рабочей директории, учитывая добавленные и убранные.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, доступны ли функции опкодов для использования.": {
    "scope": "lua",
    "prefix": "isOpcodesAvailable",
    "body": [
        "${1:bool status} = isOpcodesAvailable()"
    ],
    "description": "isOpcodesAvailable - Проверяет, доступны ли функции опкодов для использования.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool status статус\n"
},
"→︎ Представляет значение числа с плавающей точкой как целое.": {
    "scope": "lua",
    "prefix": "representFloatAsInt",
    "body": [
        "${1:int i} = representFloatAsInt(${0:float f})"
    ],
    "description": "representFloatAsInt - Представляет значение числа с плавающей точкой как целое.\nПринимаемые значения:\nfloat f число с плавающей точкой\n\nВозвращаемые значения:\nint i число с плавающей точкой в представлении целого\n"
},
"→︎ Представляет значение целого в виде числа с плавающей точкой.": {
    "scope": "lua",
    "prefix": "representIntAsFloat",
    "body": [
        "${1:float i} = representIntAsFloat(${0:int i})"
    ],
    "description": "representIntAsFloat - Представляет значение целого в виде числа с плавающей точкой.\nПринимаемые значения:\nint i целое значение\n\nВозвращаемые значения:\nfloat i число с плавающей точкой\n"
},
"→︎ Создаёт или перезаписывает существующую GXT-запись.": {
    "scope": "lua",
    "prefix": "setGxtEntry",
    "body": [
        "setGxtEntry(${0:string key, string text})"
    ],
    "description": "setGxtEntry - Создаёт или перезаписывает существующую GXT-запись.\nПринимаемые значения:\nstring key ключ GXT-записи, string text текст\n\nВозвращаемые значения:\n\n"
},
"→︎ Создаёт [новую]{.ul} GXT-запись с уникальным ключём и возвращает его. Для изменения используйте функцию setGxtEntry.": {
    "scope": "lua",
    "prefix": "setFreeGxtEntry",
    "body": [
        "${1:string key} = setFreeGxtEntry(${0:string text})"
    ],
    "description": "setFreeGxtEntry - Создаёт [новую]{.ul} GXT-запись с уникальным ключём и возвращает его. Для изменения используйте функцию setGxtEntry.\nПринимаемые значения:\nstring text текст\n\nВозвращаемые значения:\nstring key ключ созданной записи\n"
},
"→︎ Генерирует и возвращает [новый]{.ul} уникальный ключ для создания GXT-записи.": {
    "scope": "lua",
    "prefix": "getFreeGxtKey",
    "body": [
        "${1:string key} = getFreeGxtKey()"
    ],
    "description": "getFreeGxtKey - Генерирует и возвращает [новый]{.ul} уникальный ключ для создания GXT-записи.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nstring key сгенерированный GXT ключ\n"
},
"→︎ Возвращает текст GXT-записи по ключу, поиск производится включая записи игры. Возвращает пустую строку, если запись не существует.": {
    "scope": "lua",
    "prefix": "getGxtText",
    "body": [
        "${1:string text} = getGxtText(${0:string key})"
    ],
    "description": "getGxtText - Возвращает текст GXT-записи по ключу, поиск производится включая записи игры. Возвращает пустую строку, если запись не существует.\nПринимаемые значения:\nstring key ключ GXT-записи\n\nВозвращаемые значения:\nstring text текст\n"
},
"→︎ Удаляет GXT-запись по ключу, не затрагивает игровые записи.": {
    "scope": "lua",
    "prefix": "clearGxtEntry",
    "body": [
        "clearGxtEntry(${0:string key})"
    ],
    "description": "clearGxtEntry - Удаляет GXT-запись по ключу, не затрагивает игровые записи.\nПринимаемые значения:\nstring key ключ GXT-записи\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, открыто ли игровое меню паузы.": {
    "scope": "lua",
    "prefix": "isPauseMenuActive",
    "body": [
        "${1:bool active} = isPauseMenuActive()"
    ],
    "description": "isPauseMenuActive - Проверяет, открыто ли игровое меню паузы.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool active статус\n"
},
"→︎ Проверяет, находится ли окно игры на переднем плане.": {
    "scope": "lua",
    "prefix": "isGameWindowForeground",
    "body": [
        "${1:bool foreground} = isGameWindowForeground()"
    ],
    "description": "isGameWindowForeground - Проверяет, находится ли окно игры на переднем плане.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool foreground результат\n"
},
"→︎ Возвращает информацию о версии игры": {
    "scope": "lua",
    "prefix": "getGameVersion",
    "body": [
        "${1:int major, int minor, int majorRev, int minorRev, int game, int region, bool steam, bool cracked} = getGameVersion()"
    ],
    "description": "getGameVersion - Возвращает информацию о версии игры\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint major, int minor, int majorRev, int minorRev версия, int game часть серии, int region регион, bool steam Steam-версия, bool cracked взломана\n"
},
"→︎ Возвращает номер версии MoonLoader.": {
    "scope": "lua",
    "prefix": "getMoonloaderVersion",
    "body": [
        "${1:int version} = getMoonloaderVersion()"
    ],
    "description": "getMoonloaderVersion - Возвращает номер версии MoonLoader.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint version версия\n"
},
"→︎ Возвращает значение внутреннего таймера в виде дробного в формате 'секунды.миллисекунды'. В отличие от системного таймера os.clock(), этот таймер работает только если игра активна (не свёрнута и находится на переднем плане).": {
    "scope": "lua",
    "prefix": "localClock",
    "body": [
        "${1:double time} = localClock()"
    ],
    "description": "localClock - Возвращает значение внутреннего таймера в виде дробного в формате 'секунды.миллисекунды'. В отличие от системного таймера os.clock(), этот таймер работает только если игра активна (не свёрнута и находится на переднем плане).\nПринимаемые значения:\n\n\nВозвращаемые значения:\ndouble time время\n"
},
"→︎ Освобождает все загруженные функцией loadSprite текстуры, принадлежащие вызвавшему скрипту.": {
    "scope": "lua",
    "prefix": "freeTextures",
    "body": [
        "freeTextures()"
    ],
    "description": "freeTextures - Освобождает все загруженные функцией loadSprite текстуры, принадлежащие вызвавшему скрипту.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает полный путь к рабочей директории MoonLoader.": {
    "scope": "lua",
    "prefix": "getWorkingDirectory",
    "body": [
        "${1:string path} = getWorkingDirectory()"
    ],
    "description": "getWorkingDirectory - Возвращает полный путь к рабочей директории MoonLoader.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nstring path путь\n"
},
"→︎ Возвращает полный путь к директории игры.": {
    "scope": "lua",
    "prefix": "getGameDirectory",
    "body": [
        "${1:string path} = getGameDirectory()"
    ],
    "description": "getGameDirectory - Возвращает полный путь к директории игры.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nstring path путь\n"
},
"→︎ Активирует или отключает рендер текста и текстур опкодами игры. Аналог опкода 03F0.": {
    "scope": "lua",
    "prefix": "useRenderCommands",
    "body": [
        "useRenderCommands(${0:bool enable})"
    ],
    "description": "useRenderCommands - Активирует или отключает рендер текста и текстур опкодами игры. Аналог опкода 03F0.\nПринимаемые значения:\nbool enable статус\n\nВозвращаемые значения:\n\n"
},
"→︎ Записывает значение в память процесса по указанному адресу. Аналог опкода CLEO 0A8C.": {
    "scope": "lua",
    "prefix": "writeMemory",
    "body": [
        "writeMemory(${0:int address, int size, int value, bool virtualProtect})"
    ],
    "description": "writeMemory - Записывает значение в память процесса по указанному адресу. Аналог опкода CLEO 0A8C.\nПринимаемые значения:\nint address адрес памяти, int size размер (от 1 до 4), int value размер (от 1 до 4), bool virtualProtect флаг снятия протекции\n\nВозвращаемые значения:\n\n"
},
"→︎ Читает значение из памяти процесса по указанному адресу. Аналог опкода CLEO 0A8D.": {
    "scope": "lua",
    "prefix": "readMemory",
    "body": [
        "${1:int value} = readMemory(${0:int address, int size, bool virtualProtect})"
    ],
    "description": "readMemory - Читает значение из памяти процесса по указанному адресу. Аналог опкода CLEO 0A8D.\nПринимаемые значения:\nint address адрес памяти, int size размер (от 1 до 4), bool virtualProtect флаг снятия протекции\n\nВозвращаемые значения:\nint value значение\n"
},
"→︎ Загружает динамическую библиотеку по названию и возвращает её хендл (адрес). Аналог опкода CLEO 0AA2.": {
    "scope": "lua",
    "prefix": "loadDynamicLibrary",
    "body": [
        "${1:bool result, int handle} = loadDynamicLibrary(${0:string library})"
    ],
    "description": "loadDynamicLibrary - Загружает динамическую библиотеку по названию и возвращает её хендл (адрес). Аналог опкода CLEO 0AA2.\nПринимаемые значения:\nstring library название библиотеки\n\nВозвращаемые значения:\nbool result результат выполнения, int handle хендл библиотеки\n"
},
"→︎ Выгружает динамическую библиотеку по её хендлу. Аналог опкода CLEO 0AA3.": {
    "scope": "lua",
    "prefix": "freeDynamicLibrary",
    "body": [
        "freeDynamicLibrary(${0:int handle})"
    ],
    "description": "freeDynamicLibrary - Выгружает динамическую библиотеку по её хендлу. Аналог опкода CLEO 0AA3.\nПринимаемые значения:\nint handle хендл библиотеки\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает адрес экспортируемой функции по названию и хендлу библиотеки. Аналог опкода CLEO 0AA4.": {
    "scope": "lua",
    "prefix": "getDynamicLibraryProcedure",
    "body": [
        "${1:bool result, int proc} = getDynamicLibraryProcedure(${0:string proc, int handle})"
    ],
    "description": "getDynamicLibraryProcedure - Получает адрес экспортируемой функции по названию и хендлу библиотеки. Аналог опкода CLEO 0AA4.\nПринимаемые значения:\nstring proc имя функции, int handle хендл библиотеки\n\nВозвращаемые значения:\nbool result результат выполнения, int proc адрес функции\n"
},
"→︎ Проверяет файл на существование. Аналог опкода CLEO 0AAB.": {
    "scope": "lua",
    "prefix": "doesFileExist",
    "body": [
        "${1:bool result} = doesFileExist(${0:string file})"
    ],
    "description": "doesFileExist - Проверяет файл на существование. Аналог опкода CLEO 0AAB.\nПринимаемые значения:\nstring file путь\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Проверяет директорию на существование. Аналог опкода CLEO 0AE4.": {
    "scope": "lua",
    "prefix": "doesDirectoryExist",
    "body": [
        "${1:bool result} = doesDirectoryExist(${0:string directory})"
    ],
    "description": "doesDirectoryExist - Проверяет директорию на существование. Аналог опкода CLEO 0AE4.\nПринимаемые значения:\nstring directory путь\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Создаёт иерархию директорий для указанного пути. Аналог опкода CLEO 0AE5.": {
    "scope": "lua",
    "prefix": "createDirectory",
    "body": [
        "${1:bool result} = createDirectory(${0:string directory})"
    ],
    "description": "createDirectory - Создаёт иерархию директорий для указанного пути. Аналог опкода CLEO 0AE5.\nПринимаемые значения:\nstring directory путь\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Извлекает верхнее значение из стека FPU и возвращает его. Аналог опкода CLEO 0AE9.": {
    "scope": "lua",
    "prefix": "popFloat",
    "body": [
        "${1:float val} = popFloat()"
    ],
    "description": "popFloat - Извлекает верхнее значение из стека FPU и возвращает его. Аналог опкода CLEO 0AE9.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nfloat val значение\n"
},
"→︎ Проверяет версию игры, если версия игры 1.0 US, то вернет true.": {
    "scope": "lua",
    "prefix": "isGameVersionOriginal",
    "body": [
        "${1:bool result} = isGameVersionOriginal()"
    ],
    "description": "isGameVersionOriginal - Проверяет версию игры, если версия игры 1.0 US, то вернет true.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Выделяет память и возвращает указатель на выделенную область.": {
    "scope": "lua",
    "prefix": "allocateMemory",
    "body": [
        "${1:int memory} = allocateMemory(${0:int size})"
    ],
    "description": "allocateMemory - Выделяет память и возвращает указатель на выделенную область.\nПринимаемые значения:\nint size количество выделяемой памяти в байтах\n\nВозвращаемые значения:\nint memory указатель на выделенную память\n"
},
"→︎ Освобождает выделенную память.": {
    "scope": "lua",
    "prefix": "freeMemory",
    "body": [
        "freeMemory(${0:int memory})"
    ],
    "description": "freeMemory - Освобождает выделенную память.\nПринимаемые значения:\nint memory указатель на выделенный участок памяти\n\nВозвращаемые значения:\n\n"
},
"→︎ Начинает поиск файла по указанной маске.": {
    "scope": "lua",
    "prefix": "findFirstFile",
    "body": [
        "${1:Filesearch handle, string name} = findFirstFile(${0:string mask})"
    ],
    "description": "findFirstFile - Начинает поиск файла по указанной маске.\nПринимаемые значения:\nstring mask путь и маска названия файла (например, moonloader/*.lua)\n\nВозвращаемые значения:\nFilesearch handle хэндл сессии поиска, string name имя файла\n"
},
"→︎ Продолжает поиск файла по открытой сессии поиска файлов. Сессия поиска создаётся функцией findFirstFile.": {
    "scope": "lua",
    "prefix": "findNextFile",
    "body": [
        "${1:string file} = findNextFile(${0:Filesearch handle})"
    ],
    "description": "findNextFile - Продолжает поиск файла по открытой сессии поиска файлов. Сессия поиска создаётся функцией findFirstFile.\nПринимаемые значения:\nFilesearch handle сессия поиска\n\nВозвращаемые значения:\nstring file имя файла\n"
},
"→︎ Закрывает сессию поиска файлов.": {
    "scope": "lua",
    "prefix": "findClose",
    "body": [
        "findClose(${0:Filesearch handle})"
    ],
    "description": "findClose - Закрывает сессию поиска файлов.\nПринимаемые значения:\nFilesearch handle хэндл сессии поиска\n\nВозвращаемые значения:\n\n"
},
"→︎ Ищет случайного персонажа в заданных координатах в пределах указанного радиуса.": {
    "scope": "lua",
    "prefix": "findAllRandomCharsInSphere",
    "body": [
        "${1:bool result, Ped ped} = findAllRandomCharsInSphere(${0:float posX, float posY, float posZ, float radius, bool findNext, bool skipDead})"
    ],
    "description": "findAllRandomCharsInSphere - Ищет случайного персонажа в заданных координатах в пределах указанного радиуса.\nПринимаемые значения:\nfloat posX ,, float posY ,, float posZ координаты, float radius радиус поиска, bool findNext искать следующего. При значении, false всегда будет возвращать хэндл первого персонажа в пуле, bool skipDead пропускать мёртвых\n\nВозвращаемые значения:\nbool result результат поиска, Ped ped хэндл персонажа\n"
},
"→︎ Ищет случайное транспортное средство в заданных координатах в пределах указанного радиуса.": {
    "scope": "lua",
    "prefix": "findAllRandomVehiclesInSphere",
    "body": [
        "${1:bool result, Vehicle car} = findAllRandomVehiclesInSphere(${0:float posX, float posY, float posZ, float radius, bool findNext, bool skipWrecked})"
    ],
    "description": "findAllRandomVehiclesInSphere - Ищет случайное транспортное средство в заданных координатах в пределах указанного радиуса.\nПринимаемые значения:\nfloat posX ,, float posY ,, float posZ координаты, float radius радиус поиска, bool findNext искать следующее. При значении, false всегда будет возвращать хэндл первой машины в пуле, bool skipWrecked пропускать взорванные\n\nВозвращаемые значения:\nbool result результат поиска, Vehicle car хэндл транспорта\n"
},
"→︎ Ищет случайный объект в заданных координатах в пределах указанного радиуса.": {
    "scope": "lua",
    "prefix": "findAllRandomObjectsInSphere",
    "body": [
        "${1:bool result, Object object} = findAllRandomObjectsInSphere(${0:float posX, float posY, float posZ, float radius, bool findNext})"
    ],
    "description": "findAllRandomObjectsInSphere - Ищет случайный объект в заданных координатах в пределах указанного радиуса.\nПринимаемые значения:\nfloat posX ,, float posY ,, float posZ координаты, float radius радиус поиска, bool findNext искать следующий. При значении, false всегда будет возвращать хэндл первого объекта в пуле\n\nВозвращаемые значения:\nbool result результат поиска, Object object хэндл объекта\n"
},
"→︎ Возвращает указатель на объект класса CPed по хэндлу персонажа.": {
    "scope": "lua",
    "prefix": "getCharPointer",
    "body": [
        "${1:int ptr} = getCharPointer(${0:Ped ped})"
    ],
    "description": "getCharPointer - Возвращает указатель на объект класса CPed по хэндлу персонажа.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nint ptr указатель\n"
},
"→︎ Возвращает указатель на объект класса CVehicle по хэндлу транспортного средства.": {
    "scope": "lua",
    "prefix": "getCarPointer",
    "body": [
        "${1:int ptr} = getCarPointer(${0:Vehicle car})"
    ],
    "description": "getCarPointer - Возвращает указатель на объект класса CVehicle по хэндлу транспортного средства.\nПринимаемые значения:\nVehicle car хэндл транспорта\n\nВозвращаемые значения:\nint ptr указатель\n"
},
"→︎ Возвращает указатель на экземпляр класса CObject по хэндлу объекта.": {
    "scope": "lua",
    "prefix": "getObjectPointer",
    "body": [
        "${1:int struct} = getObjectPointer(${0:Object object})"
    ],
    "description": "getObjectPointer - Возвращает указатель на экземпляр класса CObject по хэндлу объекта.\nПринимаемые значения:\nObject object хэндл объекта\n\nВозвращаемые значения:\nint struct указатель\n"
},
"→︎ Производит вызов функцию по адресу. Все аргументы функции передаются после параметра int pop., Значения, занесённые в таблицу, будут переданы по указателю., Использование в критичных для производительности местах не рекомендуется, в таких случаях вместо этой функции лучше использовать FFI.": {
    "scope": "lua",
    "prefix": "callFunction",
    "body": [
        "${1:int returnValue} = callFunction(${0:int address, int params, int pop, ...})"
    ],
    "description": "callFunction - Производит вызов функцию по адресу. Все аргументы функции передаются после параметра int pop., Значения, занесённые в таблицу, будут переданы по указателю., Использование в критичных для производительности местах не рекомендуется, в таких случаях вместо этой функции лучше использовать FFI.\nПринимаемые значения:\nint address адрес функции, int params количество параметров, int pop выравнивание стека (количество аргументов либо 0, в зависимости от вида функции), ... аргументы\n\nВозвращаемые значения:\nint returnValue возвращаемое значение функции\n"
},
"→︎ Производит вызов метода класса по адресу. Все аргументы функции передаются после параметра int pop., Значения, занесённые в таблицу, будут переданы по указателю., Использование в критичных для производительности местах не рекомендуется, в таких случаях вместо этой функции лучше использовать FFI.": {
    "scope": "lua",
    "prefix": "callMethod",
    "body": [
        "${1:int returnValue} = callMethod(${0:int address, int struct, int params, int pop, ...})"
    ],
    "description": "callMethod - Производит вызов метода класса по адресу. Все аргументы функции передаются после параметра int pop., Значения, занесённые в таблицу, будут переданы по указателю., Использование в критичных для производительности местах не рекомендуется, в таких случаях вместо этой функции лучше использовать FFI.\nПринимаемые значения:\nint address адрес функции, int struct указатель на объект, int params количество параметров, int pop выравнивание стека (количество аргументов либо 0, в зависимости от вида функции), ... аргументы\n\nВозвращаемые значения:\nint returnValue возвращаемое значение функции\n"
},
"→︎ Возвращает хэндлы ближайшего транспорта и персонажа к другому персонажу.": {
    "scope": "lua",
    "prefix": "storeClosestEntities",
    "body": [
        "${1:Vehicle car, Ped ped} = storeClosestEntities(${0:Ped ped})"
    ],
    "description": "storeClosestEntities - Возвращает хэндлы ближайшего транспорта и персонажа к другому персонажу.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nVehicle car хэндл ближайшего ТС, Ped ped хэндл ближайшего персонажа\n"
},
"→︎ Задаёт статус двигателя автомобиля.": {
    "scope": "lua",
    "prefix": "switchCarEngine",
    "body": [
        "switchCarEngine(${0:Vehicle car, bool state})"
    ],
    "description": "switchCarEngine - Задаёт статус двигателя автомобиля.\nПринимаемые значения:\nVehicle car хэндл машины, bool state статус двигателя\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет существует ли пользовательская метка на карте и возвращает ее координаты.": {
    "scope": "lua",
    "prefix": "getTargetBlipCoordinates",
    "body": [
        "${1:bool result, float posX, float posY, float posZ} = getTargetBlipCoordinates()"
    ],
    "description": "getTargetBlipCoordinates - Проверяет существует ли пользовательская метка на карте и возвращает ее координаты.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат проверки, float posX ,, float posY ,, float posZ координаты метки\n"
},
"→︎ Возвращает количество передач автомобиля.": {
    "scope": "lua",
    "prefix": "getCarNumberOfGears",
    "body": [
        "${1:int gears} = getCarNumberOfGears(${0:Vehicle car})"
    ],
    "description": "getCarNumberOfGears - Возвращает количество передач автомобиля.\nПринимаемые значения:\nVehicle car хэндл автомобиля\n\nВозвращаемые значения:\nint gears количество передач\n"
},
"→︎ Возвращает текущую передачу автомобиля.": {
    "scope": "lua",
    "prefix": "getCarCurrentGear",
    "body": [
        "${1:int gear} = getCarCurrentGear(${0:Vehicle car})"
    ],
    "description": "getCarCurrentGear - Возвращает текущую передачу автомобиля.\nПринимаемые значения:\nVehicle car хэндл автомобиля\n\nВозвращаемые значения:\nint gear передача\n"
},
"→︎ Проверяет включена ли сирена.": {
    "scope": "lua",
    "prefix": "isCarSirenOn",
    "body": [
        "${1:bool state} = isCarSirenOn(${0:Vehicle car})"
    ],
    "description": "isCarSirenOn - Проверяет включена ли сирена.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nbool state статус сирены\n"
},
"→︎ Проверяет заведен ли двигатель машины.": {
    "scope": "lua",
    "prefix": "isCarEngineOn",
    "body": [
        "${1:bool state} = isCarEngineOn(${0:Vehicle car})"
    ],
    "description": "isCarEngineOn - Проверяет заведен ли двигатель машины.\nПринимаемые значения:\nVehicle car хендл машины\n\nВозвращаемые значения:\nbool state статус двигателя\n"
},
"→︎ Выводит в левом верхнем углу панель с текстом на короткое время (как при активации чит-кодов).": {
    "scope": "lua",
    "prefix": "printHelpString",
    "body": [
        "printHelpString(${0:string text})"
    ],
    "description": "printHelpString - Выводит в левом верхнем углу панель с текстом на короткое время (как при активации чит-кодов).\nПринимаемые значения:\nstring text текст (на русском может не выводиться)\n\nВозвращаемые значения:\n\n"
},
"→︎ Выводит стилизованный текст на определённое время.": {
    "scope": "lua",
    "prefix": "printStyledString",
    "body": [
        "printStyledString(${0:string text, int time, int style})"
    ],
    "description": "printStyledString - Выводит стилизованный текст на определённое время.\nПринимаемые значения:\nstring text текст, int time время в миллисекундах, int style стиль (1-7)\n\nВозвращаемые значения:\n\n"
},
"→︎ Выводит текст в нижней части экрана, добавляя его в очередь, если на момент вызова выводится другой текст.": {
    "scope": "lua",
    "prefix": "printString",
    "body": [
        "printString(${0:string text, int time})"
    ],
    "description": "printString - Выводит текст в нижней части экрана, добавляя его в очередь, если на момент вызова выводится другой текст.\nПринимаемые значения:\nstring text текст, int time время отображения текста в миллисекундах\n\nВозвращаемые значения:\n\n"
},
"→︎ Выводит текст в нижней части экрана, минуя очередь.": {
    "scope": "lua",
    "prefix": "printStringNow",
    "body": [
        "printStringNow(${0:string text, int time})"
    ],
    "description": "printStringNow - Выводит текст в нижней части экрана, минуя очередь.\nПринимаемые значения:\nstring text текст, int time время показа текста\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, целится ли игрок в другого персонажа, и возвращает его хэндл.": {
    "scope": "lua",
    "prefix": "getCharPlayerIsTargeting",
    "body": [
        "${1:bool result, Ped ped} = getCharPlayerIsTargeting(${0:Player player})"
    ],
    "description": "getCharPlayerIsTargeting - Проверяет, целится ли игрок в другого персонажа, и возвращает его хэндл.\nПринимаемые значения:\nPlayer player хэндл игрока\n\nВозвращаемые значения:\nbool result результат проверки, Ped ped хэндл персонажа\n"
},
"→︎ Возвращает сокращенное название модели машины.": {
    "scope": "lua",
    "prefix": "getNameOfVehicleModel",
    "body": [
        "${1:GxtString name} = getNameOfVehicleModel(${0:Model model})"
    ],
    "description": "getNameOfVehicleModel - Возвращает сокращенное название модели машины.\nПринимаемые значения:\nModel model модель машины\n\nВозвращаемые значения:\nGxtString name название модели (до 7 символов)\n"
},
"→︎ Проверяет был ли введён указанный текст на клавиатуре.": {
    "scope": "lua",
    "prefix": "testCheat",
    "body": [
        "${1:bool result} = testCheat(${0:string text})"
    ],
    "description": "testCheat - Проверяет был ли введён указанный текст на клавиатуре.\nПринимаемые значения:\nstring text текст\n\nВозвращаемые значения:\nbool result статус\n"
},
"→︎ Создаёт транспорт перед игроком. Нет необходимости загружать модель самостоятельно.": {
    "scope": "lua",
    "prefix": "spawnVehicleByCheating",
    "body": [
        "${1:bool result} = spawnVehicleByCheating(${0:Model model})"
    ],
    "description": "spawnVehicleByCheating - Создаёт транспорт перед игроком. Нет необходимости загружать модель самостоятельно.\nПринимаемые значения:\nModel model модель транспортного средства\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Возвращает хэндл персонажа по указателю на экземляр класса CPed.": {
    "scope": "lua",
    "prefix": "getCharPointerHandle",
    "body": [
        "${1:Ped handle} = getCharPointerHandle(${0:int ptr})"
    ],
    "description": "getCharPointerHandle - Возвращает хэндл персонажа по указателю на экземляр класса CPed.\nПринимаемые значения:\nint ptr указатель\n\nВозвращаемые значения:\nPed handle хэндл персонажа\n"
},
"→︎ Возвращает хэндл транспортного средства по указателю на экземляр класса CVehicle.": {
    "scope": "lua",
    "prefix": "getVehiclePointerHandle",
    "body": [
        "${1:Vehicle handle} = getVehiclePointerHandle(${0:int ptr})"
    ],
    "description": "getVehiclePointerHandle - Возвращает хэндл транспортного средства по указателю на экземляр класса CVehicle.\nПринимаемые значения:\nint ptr указатель\n\nВозвращаемые значения:\nVehicle handle хэндл транспорта\n"
},
"→︎ Возвращает хэндл объект по указателю на экземляр класса CObject.": {
    "scope": "lua",
    "prefix": "getObjectPointerHandle",
    "body": [
        "${1:Object handle} = getObjectPointerHandle(${0:int ptr})"
    ],
    "description": "getObjectPointerHandle - Возвращает хэндл объект по указателю на экземляр класса CObject.\nПринимаемые значения:\nint ptr указатель\n\nВозвращаемые значения:\nObject handle хэндл объекта\n"
},
"→︎ Ищет точку соприкосновения в трёхмерном пространстве между двумя координатами, по направлению прямой из позиции origin к target. Имеет флаги, определяющие, какие типы объектов нужно проверять на столкновение., Возвращает таблицу с информацией о точке соприкосновения.": {
    "scope": "lua",
    "prefix": "processLineOfSight",
    "body": [
        "${1:bool result, table colPoint} = processLineOfSight(${0:float originX, float originY, float originZ, float targetX, float targetY, float targetZ, [bool checkSolid=true], [bool car=false], [bool ped=false], [bool object=false], [bool particle=false], [bool seeThrough=false], [bool ignoreSomeObjects=false], [bool shotThrough=false]})"
    ],
    "description": "processLineOfSight - Ищет точку соприкосновения в трёхмерном пространстве между двумя координатами, по направлению прямой из позиции origin к target. Имеет флаги, определяющие, какие типы объектов нужно проверять на столкновение., Возвращает таблицу с информацией о точке соприкосновения.\nПринимаемые значения:\nfloat originX, float originY, float originZ начальная позиция, float targetX, float targetY, float targetZ конечная позиция, bool checkSolid статичные объекты (напр. любые постройки), bool car транспорт, bool ped персонажи, bool object динамические объекты, bool particle визуальные эффекты, bool seeThrough учитывать прозрачные объекты, bool ignoreSomeObjects игнорировать некоторые динамические объекты, bool shotThrough учитывать объекты, простреливаемые насквозь\n\nВозвращаемые значения:\nbool result результат выполнения, table colPoint информация о точке соприкосновения, float pos[1], float pos[2], float pos[3] | позиция точки соприкосновения XYZ |, float normal[1], float normal[2], float normal[3] | вектор нормали к поверхности соприкосновения |, int surfaceType[1], int surfaceType[2] | типы поверхности |, int pieceType[1], int pieceType[2] | типы детали |, float depth | какая-то глубина чего-то |, int entity | указатель на объект сущности, с которой произошло столкновение |, int entityType | тип сущности |\n"
},
"→︎ Записывает текст в буфер обмена Windows.": {
    "scope": "lua",
    "prefix": "setClipboardText",
    "body": [
        "${1:bool result} = setClipboardText(${0:string text})"
    ],
    "description": "setClipboardText - Записывает текст в буфер обмена Windows.\nПринимаемые значения:\nstring text текст\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Читает текст из буфера обмена Windows.": {
    "scope": "lua",
    "prefix": "getClipboardText",
    "body": [
        "${1:string text} = getClipboardText()"
    ],
    "description": "getClipboardText - Читает текст из буфера обмена Windows.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nstring text текст\n"
},
"→︎ Читает значение целого из памяти по адресу и указанному оффсету размером от 1-го до 4-х байт., Для чтения числа с плавающей точкой используйте getStructFloatElement либо representIntAsFloat.": {
    "scope": "lua",
    "prefix": "getStructElement",
    "body": [
        "${1:int value} = getStructElement(${0:int struct, int offset, int size, [bool unprotect=false]})"
    ],
    "description": "getStructElement - Читает значение целого из памяти по адресу и указанному оффсету размером от 1-го до 4-х байт., Для чтения числа с плавающей точкой используйте getStructFloatElement либо representIntAsFloat.\nПринимаемые значения:\nint struct указатель на начало структуры, int offset оффсет, int size размер, bool unprotect снять защиту памяти\n\nВозвращаемые значения:\nint value значение\n"
},
"→︎ Записывает значение целого в память по адресу и указанному оффсету размером от 1-го до 4-х байт., Для записи числа с плавающей точкой используйте setStructFloatElement либо representFloatAsInt.": {
    "scope": "lua",
    "prefix": "setStructElement",
    "body": [
        "setStructElement(${0:int struct, int offset, int size, int value, [bool unprotect=false]})"
    ],
    "description": "setStructElement - Записывает значение целого в память по адресу и указанному оффсету размером от 1-го до 4-х байт., Для записи числа с плавающей точкой используйте setStructFloatElement либо representFloatAsInt.\nПринимаемые значения:\nint struct указатель на структуру, int offset оффсет, int size размер, int value значение, bool unprotect снять защиту памяти\n\nВозвращаемые значения:\n\n"
},
"→︎ Создаёт кватернион из матрицы вращения.": {
    "scope": "lua",
    "prefix": "convertMatrixToQuaternion",
    "body": [
        "${1:float w, float x, float y, float z} = convertMatrixToQuaternion(${0:float rightX, float rightY, float rightZ, float frontX, float frontY, float frontZ, float upX, float upY, float upZ})"
    ],
    "description": "convertMatrixToQuaternion - Создаёт кватернион из матрицы вращения.\nПринимаемые значения:\nfloat rightX ,, float rightY ,, float rightZ pitch, float frontX ,, float frontY ,, float frontZ roll, float upX ,, float upY ,, float upZ yaw\n\nВозвращаемые значения:\nfloat w ,, float x ,, float y ,, float z кватернион\n"
},
"→︎ Создаёт матрицу вращения из кватерниона.": {
    "scope": "lua",
    "prefix": "convertQuaternionToMatrix",
    "body": [
        "${1:float rightX, float rightY, float rightZ, float frontX, float frontY, float frontZ, float upX, float upY, float upZ} = convertQuaternionToMatrix(${0:float w, float x, float y, float z})"
    ],
    "description": "convertQuaternionToMatrix - Создаёт матрицу вращения из кватерниона.\nПринимаемые значения:\nfloat w ,, float x ,, float y ,, float z кватернион\n\nВозвращаемые значения:\nfloat rightX ,, float rightY ,, float rightZ pitch, float frontX ,, float frontY ,, float frontZ roll, float upX ,, float upY ,, float upZ yaw\n"
},
"→︎ Конвертирует игровые 3D координаты в экранные.": {
    "scope": "lua",
    "prefix": "convert3DCoordsToScreen",
    "body": [
        "${1:float wposX, float wposY} = convert3DCoordsToScreen(${0:float posX, float posY, float posZ})"
    ],
    "description": "convert3DCoordsToScreen - Конвертирует игровые 3D координаты в экранные.\nПринимаемые значения:\nfloat posX ,, float posY ,, float posZ игровые 3D координаты\n\nВозвращаемые значения:\nfloat wposX ,, float wposY экранные координаты\n"
},
"→︎ Устанавливает статус нажатия игровой клавиши.": {
    "scope": "lua",
    "prefix": "setGameKeyState",
    "body": [
        "setGameKeyState(${0:int key, int state})"
    ],
    "description": "setGameKeyState - Устанавливает статус нажатия игровой клавиши.\nПринимаемые значения:\nint key индекс клавиши (также указаны в библиотеке, game.keys ), int state статус(-32768 до 32767), GOLEFT_GORIGHT ,, GOFORWARD_GOBACK ,, ANSWERPHONE_FIREWEAPONALT ,, LOOKBEHIND_LOOKRIGHT и подобных.\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает позицию курсора.": {
    "scope": "lua",
    "prefix": "getCursorPos",
    "body": [
        "${1:int posX, int posY} = getCursorPos()"
    ],
    "description": "getCursorPos - Возвращает позицию курсора.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint posX ,, int posY координаты\n"
},
"→︎ Конвертирует пиксельные координаты в игровые экранные координаты.": {
    "scope": "lua",
    "prefix": "convertWindowScreenCoordsToGameScreenCoords",
    "body": [
        "${1:float gposX, float gposY} = convertWindowScreenCoordsToGameScreenCoords(${0:float wposX, float wposY})"
    ],
    "description": "convertWindowScreenCoordsToGameScreenCoords - Конвертирует пиксельные координаты в игровые экранные координаты.\nПринимаемые значения:\nfloat wposX ,, float wposY пиксельные координаты\n\nВозвращаемые значения:\nfloat gposX ,, float gposY игровые координаты\n"
},
"→︎ Конвертирует игровые экранные координаты в пиксельные.": {
    "scope": "lua",
    "prefix": "convertGameScreenCoordsToWindowScreenCoords",
    "body": [
        "${1:float wposX, float wposY} = convertGameScreenCoordsToWindowScreenCoords(${0:float gposX, float gposY})"
    ],
    "description": "convertGameScreenCoordsToWindowScreenCoords - Конвертирует игровые экранные координаты в пиксельные.\nПринимаемые значения:\nfloat gposX ,, float gposY игровые координаты\n\nВозвращаемые значения:\nfloat wposX ,, float wposY пиксельные координаты\n"
},
"→︎ Создаёт точку в 3D-пространстве игры из экранных координат и указанной глубины.": {
    "scope": "lua",
    "prefix": "convertScreenCoordsToWorld3D",
    "body": [
        "${1:float posX, float posY, float posZ} = convertScreenCoordsToWorld3D(${0:float posX, float posY, float depth})"
    ],
    "description": "convertScreenCoordsToWorld3D - Создаёт точку в 3D-пространстве игры из экранных координат и указанной глубины.\nПринимаемые значения:\nfloat posX ,, float posY экранные координаты, float depth глубина\n\nВозвращаемые значения:\nfloat posX ,, float posY ,, float posZ координаты точки в мире\n"
},
"→︎ Возвращает адрес DLL-модуля по названию.": {
    "scope": "lua",
    "prefix": "getModuleHandle",
    "body": [
        "${1:int handle} = getModuleHandle(${0:string module})"
    ],
    "description": "getModuleHandle - Возвращает адрес DLL-модуля по названию.\nПринимаемые значения:\nstring module название\n\nВозвращаемые значения:\nint handle адрес\n"
},
"→︎ Получает адрес экспортируемой процедуры по названию модуля и процедуры.": {
    "scope": "lua",
    "prefix": "getModuleProcAddress",
    "body": [
        "${1:int address} = getModuleProcAddress(${0:string module, string proc})"
    ],
    "description": "getModuleProcAddress - Получает адрес экспортируемой процедуры по названию модуля и процедуры.\nПринимаемые значения:\nstring module название модуля, string proc название процедуры\n\nВозвращаемые значения:\nint address адрес\n"
},
"→︎ Эмулирует нажатие виртуальной клавиши.": {
    "scope": "lua",
    "prefix": "setVirtualKeyDown",
    "body": [
        "setVirtualKeyDown(${0:int vkey, bool down})"
    ],
    "description": "setVirtualKeyDown - Эмулирует нажатие виртуальной клавиши.\nПринимаемые значения:\nint vkey ID клавиши, bool down статус нажатия: true - нажата, false - отпущена\n\nВозвращаемые значения:\n\n"
},
"→︎ Эмулирует нажатие символьной клавиши.": {
    "scope": "lua",
    "prefix": "setCharKeyDown",
    "body": [
        "setCharKeyDown(${0:int ckey, bool down})"
    ],
    "description": "setCharKeyDown - Эмулирует нажатие символьной клавиши.\nПринимаемые значения:\nint ckey ID символа, bool down статус нажатия: true - нажата, false - отпущена\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет была ли клавиша нажата. Псевдоним функции wasKeyPressed.": {
    "scope": "lua",
    "prefix": "isKeyJustPressed",
    "body": [
        "${1:bool state} = isKeyJustPressed(${0:int key})"
    ],
    "description": "isKeyJustPressed - Проверяет была ли клавиша нажата. Псевдоним функции wasKeyPressed.\nПринимаемые значения:\nint key ID клавиши\n\nВозвращаемые значения:\nbool state результат проверки\n"
},
"→︎ Конвертирует мировые 3D-координаты в экранные. Расширенный вариант функции convert3DCoordsToScreen,, имеет дополнительные аргументы и возвращаемые значения.": {
    "scope": "lua",
    "prefix": "convert3DCoordsToScreenEx",
    "body": [
        "${1:bool result, float x, float y, float z, float w, float h} = convert3DCoordsToScreenEx(${0:float posX, float posY, float posZ, [bool checkMin=false], [bool checkMax=false]})"
    ],
    "description": "convert3DCoordsToScreenEx - Конвертирует мировые 3D-координаты в экранные. Расширенный вариант функции convert3DCoordsToScreen,, имеет дополнительные аргументы и возвращаемые значения.\nПринимаемые значения:\nfloat posX ,, float posY ,, float posZ - мировые координаты, bool checkMin проверять минимальное расстояние до камеры. false, если не задано, bool checkMax проверять максимальное расстояние до камеры. false, если не задано\n\nВозвращаемые значения:\nbool result результат преобразования, float x ,, float y экранные координаты в пикселях, float z ,, float w ,, float h неизвестно\n"
},
"→︎ Читает число с плавающей точкой из памяти по адресу и указанному оффсету размером в 4 байта., Для чтения целого используйте функцию getStructElement.": {
    "scope": "lua",
    "prefix": "getStructFloatElement",
    "body": [
        "${1:float value} = getStructFloatElement(${0:int struct, int offset, [bool unprotect=false]})"
    ],
    "description": "getStructFloatElement - Читает число с плавающей точкой из памяти по адресу и указанному оффсету размером в 4 байта., Для чтения целого используйте функцию getStructElement.\nПринимаемые значения:\nint struct адрес начала структуры, int offset оффсет, bool unprotect снять защиту памяти\n\nВозвращаемые значения:\nfloat value прочитанное значение\n"
},
"→︎ Записывает число с плавающей точкой в память по адресу и указанному оффсету., Для записи целого используйте функцию setStructElement.": {
    "scope": "lua",
    "prefix": "setStructFloatElement",
    "body": [
        "setStructFloatElement(${0:int struct, int offset, float value, [bool unprotect=false]})"
    ],
    "description": "setStructFloatElement - Записывает число с плавающей точкой в память по адресу и указанному оффсету., Для записи целого используйте функцию setStructElement.\nПринимаемые значения:\nint struct адрес начала структуры, int offset оффсет, float value значение, bool unprotect снять защиту памяти\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет была ли клавиша нажата.": {
    "scope": "lua",
    "prefix": "wasKeyPressed",
    "body": [
        "${1:bool state} = wasKeyPressed(${0:int key})"
    ],
    "description": "wasKeyPressed - Проверяет была ли клавиша нажата.\nПринимаемые значения:\nint key ID клавиши\n\nВозвращаемые значения:\nbool state результат проверки\n"
},
"→︎ Проверяет была ли клавиша отпущена после нажатия.": {
    "scope": "lua",
    "prefix": "wasKeyReleased",
    "body": [
        "${1:bool state} = wasKeyReleased(${0:int key})"
    ],
    "description": "wasKeyReleased - Проверяет была ли клавиша отпущена после нажатия.\nПринимаемые значения:\nint key ID клавиши\n\nВозвращаемые значения:\nbool state результат проверки\n"
},
"→︎ Получает значение, на сколько делений было прокручено колесо мыши. Значение может быть отрицательным и положительным,, а также нулём, если колесо прокручено не было.": {
    "scope": "lua",
    "prefix": "getMousewheelDelta",
    "body": [
        "${1:int delta} = getMousewheelDelta()"
    ],
    "description": "getMousewheelDelta - Получает значение, на сколько делений было прокручено колесо мыши. Значение может быть отрицательным и положительным,, а также нулём, если колесо прокручено не было.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint delta значение прокрутки\n"
},
"→︎ Помечает текущее обрабатываемое оконное сообщение для игнорирования., Игнорирование сообщения может быть отменено вызовом функции с параметрами false., Предназначена для использования только изнутри события onWindowMessage.": {
    "scope": "lua",
    "prefix": "consumeWindowMessage",
    "body": [
        "consumeWindowMessage(${0:[bool game=true], [bool scripts=true]})"
    ],
    "description": "consumeWindowMessage - Помечает текущее обрабатываемое оконное сообщение для игнорирования., Игнорирование сообщения может быть отменено вызовом функции с параметрами false., Предназначена для использования только изнутри события onWindowMessage.\nПринимаемые значения:\nbool game игнорировать сообщение для игры (оно не будет передано игре, но будет передано Lua скриптам), bool scripts игнорировать сообщение для Lua скриптов\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, находится ли игра на паузе.": {
    "scope": "lua",
    "prefix": "isGamePaused",
    "body": [
        "${1:bool paused} = isGamePaused()"
    ],
    "description": "isGamePaused - Проверяет, находится ли игра на паузе.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool paused статус\n"
},
"→︎ Возвращает значение игрового таймера в виде дробного в формате 'секунды.миллисекунды'. В отличие от системного таймера os.clock() и функции localClock, этот таймер работает только если игра не находится на паузе.": {
    "scope": "lua",
    "prefix": "gameClock",
    "body": [
        "${1:double time} = gameClock()"
    ],
    "description": "gameClock - Возвращает значение игрового таймера в виде дробного в формате 'секунды.миллисекунды'. В отличие от системного таймера os.clock() и функции localClock, этот таймер работает только если игра не находится на паузе.\nПринимаемые значения:\n\n\nВозвращаемые значения:\ndouble time время\n"
},
"→︎ Функция задаёт различные настройки поведения скрипта. Каждое свойство задаётся исходя из его названия, переданного в виде строки в качестве аргумента функции.": {
    "scope": "lua",
    "prefix": "script_properties",
    "body": [
        "script_properties(${0:string property, ...})"
    ],
    "description": "script_properties - Функция задаёт различные настройки поведения скрипта. Каждое свойство задаётся исходя из его названия, переданного в виде строки в качестве аргумента функции.\nПринимаемые значения:\nstring property, ... свойства\n\nВозвращаемые значения:\n\n"
},
"→︎ Задаёт Web-адрес для скрипта. Адрес может быть любым, как и прямой ссылкой на файл, так и на страницей любого сайта.": {
    "scope": "lua",
    "prefix": "script_url",
    "body": [
        "script_url(${0:string url})"
    ],
    "description": "script_url - Задаёт Web-адрес для скрипта. Адрес может быть любым, как и прямой ссылкой на файл, так и на страницей любого сайта.\nПринимаемые значения:\nstring url ссылка\n\nВозвращаемые значения:\n\n"
},
"→︎ Импортирует экспортируемые данные другого скрипта по имени файла, функция загружает скрипт самостоятельно, если он ещё не загружен., Предотвращает повторную загрузку скрипта при стартовой загрузке скриптов из рабочей директории, т.е. функцию можно вызывать и в глобальной области (вне main и потоков), не опасаясь возникновения проблем., При повторном вызове для того же скрипта будет использоваться ранее полученное значение, если скрипт не был перезагружен или выгружен., Возвращает nil и текст ошибки, если попытка импорта завершилась неудачей., Подробнее об экспорте см. на странице Экспорт.": {
    "scope": "lua",
    "prefix": "import",
    "body": [
        "${1:any imports} = import(${0:string script})"
    ],
    "description": "import - Импортирует экспортируемые данные другого скрипта по имени файла, функция загружает скрипт самостоятельно, если он ещё не загружен., Предотвращает повторную загрузку скрипта при стартовой загрузке скриптов из рабочей директории, т.е. функцию можно вызывать и в глобальной области (вне main и потоков), не опасаясь возникновения проблем., При повторном вызове для того же скрипта будет использоваться ранее полученное значение, если скрипт не был перезагружен или выгружен., Возвращает nil и текст ошибки, если попытка импорта завершилась неудачей., Подробнее об экспорте см. на странице Экспорт.\nПринимаемые значения:\nstring script имя файла Lua-скрипта\n\nВозвращаемые значения:\nany imports импортированные данные из другого скрипта, обычно это таблица\n"
},
"→︎ Преобразует таблицу Lua в JSON-строку.": {
    "scope": "lua",
    "prefix": "encodeJson",
    "body": [
        "${1:string json} = encodeJson(${0:table data})"
    ],
    "description": "encodeJson - Преобразует таблицу Lua в JSON-строку.\nПринимаемые значения:\ntable data таблица с данными\n\nВозвращаемые значения:\nstring json строка в формате JSON\n"
},
"→︎ Преобразует JSON-строку в таблицу Lua.": {
    "scope": "lua",
    "prefix": "decodeJson",
    "body": [
        "${1:table luaData} = decodeJson(${0:string json})"
    ],
    "description": "decodeJson - Преобразует JSON-строку в таблицу Lua.\nПринимаемые значения:\nstring json данные JSON в виде строки\n\nВозвращаемые значения:\ntable data результирующая таблица\n"
},
"→︎ Показывает или скрывает системный курсор, блокируя вращение камеры и управление игроком (опционально).": {
    "scope": "lua",
    "prefix": "showCursor",
    "body": [
        "showCursor(${0:bool show, [bool lockControls=false]})"
    ],
    "description": "showCursor - Показывает или скрывает системный курсор, блокируя вращение камеры и управление игроком (опционально).\nПринимаемые значения:\nbool show активировать/деактивировать, bool lockControls заблокировать управление игроком\n\nВозвращаемые значения:\n\n"
},
"→︎ Блокирует управление игроком.": {
    "scope": "lua",
    "prefix": "lockPlayerControl",
    "body": [
        "lockPlayerControl(${0:bool lock})"
    ],
    "description": "lockPlayerControl - Блокирует управление игроком.\nПринимаемые значения:\nbool lock статус блокировки\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает статус блокировки управления игроком, заданный функцией lockPlayerControl.": {
    "scope": "lua",
    "prefix": "isPlayerControlLocked",
    "body": [
        "${1:bool locked} = isPlayerControlLocked()"
    ],
    "description": "isPlayerControlLocked - Возвращает статус блокировки управления игроком, заданный функцией lockPlayerControl.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool locked статус блокировки\n"
},
"→︎ Перемещает маркер карты в заданные координаты.": {
    "scope": "lua",
    "prefix": "setBlipCoordinates",
    "body": [
        "${1:bool result} = setBlipCoordinates(${0:Marker blip, float x, float y, float z})"
    ],
    "description": "setBlipCoordinates - Перемещает маркер карты в заданные координаты.\nПринимаемые значения:\nMarker blip хэндл маркера, float x ,, float y ,, float z новые координаты\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Перемещает маркер пользовательской точки назначения в заданные координаты.": {
    "scope": "lua",
    "prefix": "setTargetBlipCoordinates",
    "body": [
        "${1:bool result} = setTargetBlipCoordinates(${0:float x, float y, float z})"
    ],
    "description": "setTargetBlipCoordinates - Перемещает маркер пользовательской точки назначения в заданные координаты.\nПринимаемые значения:\nfloat x ,, float y ,, float z новые координаты\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Устанавливает пользовательскую точку назначения на заданные координаты.": {
    "scope": "lua",
    "prefix": "placeWaypoint",
    "body": [
        "${1:bool result} = placeWaypoint(${0:float x, float y, float z})"
    ],
    "description": "placeWaypoint - Устанавливает пользовательскую точку назначения на заданные координаты.\nПринимаемые значения:\nfloat x ,, float y ,, float z координаты\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Скрывает иконку пользовательской точки назначения.": {
    "scope": "lua",
    "prefix": "removeWaypoint",
    "body": [
        "${1:bool result} = removeWaypoint()"
    ],
    "description": "removeWaypoint - Скрывает иконку пользовательской точки назначения.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Получает путь к пользовательской или системной директории по её CSIDL-идентификатору.": {
    "scope": "lua",
    "prefix": "getFolderPath",
    "body": [
        "${1:string path} = getFolderPath(${0:int csidl})"
    ],
    "description": "getFolderPath - Получает путь к пользовательской или системной директории по её CSIDL-идентификатору.\nПринимаемые значения:\nint csidl \n\nВозвращаемые значения:\nstring path путь к директории,, nil при провале\n"
},
"→︎ Возвращает значение разницы во времени между предыдущим и текущим кадром (но это не точно).": {
    "scope": "lua",
    "prefix": "getTimeStepValue",
    "body": [
        "${1:float value} = getTimeStepValue()"
    ],
    "description": "getTimeStepValue - Возвращает значение разницы во времени между предыдущим и текущим кадром (но это не точно).\nПринимаемые значения:\n\n\nВозвращаемые значения:\nfloat value значение\n"
},
"→︎ Возвращает указатель на используемый игрой экземпляр класса IDirect3DDevice9.": {
    "scope": "lua",
    "prefix": "getD3DDevicePtr",
    "body": [
        "${1:uint devicePtr} = getD3DDevicePtr()"
    ],
    "description": "getD3DDevicePtr - Возвращает указатель на используемый игрой экземпляр класса IDirect3DDevice9.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nuint devicePtr указатель\n"
},
"→︎ Возвращает массив со всеми созданными динамическими объектами.": {
    "scope": "lua",
    "prefix": "getAllObjects",
    "body": [
        "${1:table objects} = getAllObjects()"
    ],
    "description": "getAllObjects - Возвращает массив со всеми созданными динамическими объектами.\nПринимаемые значения:\n\n\nВозвращаемые значения:\ntable objects таблица с хэндлами объектов\n"
},
"→︎ Возвращает массив с хэндлами всех созданных персонажей, включая персонажа игрока.": {
    "scope": "lua",
    "prefix": "getAllChars",
    "body": [
        "${1:table peds} = getAllChars()"
    ],
    "description": "getAllChars - Возвращает массив с хэндлами всех созданных персонажей, включая персонажа игрока.\nПринимаемые значения:\n\n\nВозвращаемые значения:\ntable peds таблица с хэндлами персонажей\n"
},
"→︎ Возвращает массив с хэндлами всех созданных транспортных средств, включая транспорт, в котором находится игрок.": {
    "scope": "lua",
    "prefix": "getAllVehicles",
    "body": [
        "${1:table vehicles} = getAllVehicles()"
    ],
    "description": "getAllVehicles - Возвращает массив с хэндлами всех созданных транспортных средств, включая транспорт, в котором находится игрок.\nПринимаемые значения:\n\n\nВозвращаемые значения:\ntable vehicles таблица с хэндлами транспортных средств\n"
},
"→︎ Возвращает значение глобальной скриптовой переменной числа с плавающей точкой": {
    "scope": "lua",
    "prefix": "getGameGlobalFloat",
    "body": [
        "${1:float value} = getGameGlobalFloat(${0:int index})"
    ],
    "description": "getGameGlobalFloat - Возвращает значение глобальной скриптовой переменной числа с плавающей точкой\nПринимаемые значения:\nint index индекс переменной\n\nВозвращаемые значения:\nfloat value значение\n"
},
"→︎ Задаёт новое значение глобальной скриптовой переменной числа с плавающей точкой": {
    "scope": "lua",
    "prefix": "setGameGlobalFloat",
    "body": [
        "setGameGlobalFloat(${0:int index, float value})"
    ],
    "description": "setGameGlobalFloat - Задаёт новое значение глобальной скриптовой переменной числа с плавающей точкой\nПринимаемые значения:\nint index индекс переменной, float value новое значение\n\nВозвращаемые значения:\n\n"
},
"→︎ Загружает скрипт из файла и возвращает объект LuaScript., Функция пытается загрузить скрипт в следующем порядке путей: рабочая директория + путь -> рабочая директория + путь + .lua(c) -> абсолютный путь -> абсолютный путь + .lua(c)., Возвращает nil, если скрипт не был загружен.": {
    "scope": "lua",
    "prefix": "script.load",
    "body": [
        "${1:LuaScript s} = script.load(${0:string file})"
    ],
    "description": "script.load - Загружает скрипт из файла и возвращает объект LuaScript., Функция пытается загрузить скрипт в следующем порядке путей: рабочая директория + путь -> рабочая директория + путь + .lua(c) -> абсолютный путь -> абсолютный путь + .lua(c)., Возвращает nil, если скрипт не был загружен.\nПринимаемые значения:\nstring file путь к файлу\n\nВозвращаемые значения:\nLuaScript s скрипт\n"
},
"→︎ Ищет загруженный скрипт по имени. Возвращает объект LuaScript, если скрипт найден, в противном случае возвращает nil.": {
    "scope": "lua",
    "prefix": "script.find",
    "body": [
        "${1:LuaScript s} = script.find(${0:string name})"
    ],
    "description": "script.find - Ищет загруженный скрипт по имени. Возвращает объект LuaScript, если скрипт найден, в противном случае возвращает nil.\nПринимаемые значения:\nstring name название скрипта\n\nВозвращаемые значения:\nLuaScript s скрипт\n"
},
"→︎ Возвращает массив загруженных скриптов.": {
    "scope": "lua",
    "prefix": "script.list",
    "body": [
        "${1:table list} = script.list()"
    ],
    "description": "script.list - Возвращает массив загруженных скриптов.\nПринимаемые значения:\n\n\nВозвращаемые значения:\ntable list массив\n"
},
"→︎ Получает загруженный скрипт по его уникальному идентификатору и возвращает объект LuaScript., Возвращает nil, если скрипта с таким идентификатором нет.": {
    "scope": "lua",
    "prefix": "script.get",
    "body": [
        "${1:LuaScript s} = script.get(${0:int id})"
    ],
    "description": "script.get - Получает загруженный скрипт по его уникальному идентификатору и возвращает объект LuaScript., Возвращает nil, если скрипта с таким идентификатором нет.\nПринимаемые значения:\nint id идентификатор скрипта\n\nВозвращаемые значения:\nLuaScript s скрипт\n"
},
"→︎ Статическое свойство. Возвращает объект LuaScript текущего скрипта. Является аналогом функции thisScript.": {
    "scope": "lua",
    "prefix": "{FUNCTION}",
    "body": [
        "${1:LuaScript s} = ()"
    ],
    "description": "{FUNCTION} - Статическое свойство. Возвращает объект LuaScript текущего скрипта. Является аналогом функции thisScript.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nLuaScript s текущий скрипт\n"
},
"→︎ Создаёт эффект «тряски» камеры.": {
    "scope": "lua",
    "prefix": "shakeCam",
    "body": [
        "shakeCam(${0:int shake})"
    ],
    "description": "shakeCam - Создаёт эффект «тряски» камеры.\nПринимаемые значения:\nint shake значение амплитуды\n\nВозвращаемые значения:\n\n"
},
"→︎ Создаёт (спавнит) модель игрока в игровом мире.": {
    "scope": "lua",
    "prefix": "createPlayer",
    "body": [
        "${1:Player player} = createPlayer(${0:Model modelId, float atX, float atY, float atZ})"
    ],
    "description": "createPlayer - Создаёт (спавнит) модель игрока в игровом мире.\nПринимаемые значения:\nint modelId ИД модели, float atX X-координата, float atY Y-координата, float atZ Z-координата\n\nВозвращаемые значения:\nhandle Player хендл игрока\\\\\n"
},
"→︎ Создает персонажа в заданных координатах с указанной моделью и поведением пешехода. Хэндл персонажа записывается в указанную переменную.": {
    "scope": "lua",
    "prefix": "createChar",
    "body": [
        "${1:Ped ped} = createChar(${0:int pedtype, Model modelId, float atX, float atY, float atZ})"
    ],
    "description": "createChar - Создает персонажа в заданных координатах с указанной моделью и поведением пешехода. Хэндл персонажа записывается в указанную переменную.\nПринимаемые значения:\nint pedtype тип пешехода., Model modelId модель персонажа., float atX, float atY, float atZ координаты персонажа (XYZ).\n\nВозвращаемые значения:\nPed ped хэндл персонажа.\n"
},
"→︎ Удаляет персонажа.": {
    "scope": "lua",
    "prefix": "deleteChar",
    "body": [
        "deleteChar(${0:Ped ped})"
    ],
    "description": "deleteChar - Удаляет персонажа.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает координаты актера.": {
    "scope": "lua",
    "prefix": "getCharCoordinates",
    "body": [
        "${1:float positionX, float positionY, float positionZ} = getCharCoordinates(${0:Ped ped})"
    ],
    "description": "getCharCoordinates - Получает координаты актера.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nfloat positionX, float positionY, float positionZ координаты персонажа.(XYZ)\n"
},
"→︎ Телепортирует определенного персонажа на указанные координаты.": {
    "scope": "lua",
    "prefix": "setCharCoordinates",
    "body": [
        "setCharCoordinates(${0:Ped ped, float posX, float posY, float posZ})"
    ],
    "description": "setCharCoordinates - Телепортирует определенного персонажа на указанные координаты.\nПринимаемые значения:\nPed ped хэндл актера, float posX, float posY, float posZ координаты XYZ\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, находится ли персонаж в указанной прямоугольной зоне.": {
    "scope": "lua",
    "prefix": "isCharInArea2d",
    "body": [
        "${1:bool result} = isCharInArea2d(${0:Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
    ],
    "description": "isCharInArea2d - Проверяет, находится ли персонаж в указанной прямоугольной зоне.\nПринимаемые значения:\nPed ped хендл персонажа игрока, float cornerAX первая X координата, float cornerAY первая Y координата, float cornerBX вторая X координата, float cornerBY вторая Y координата, bool sphere поиск в сфере\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет, находится ли персонаж в указанной кубической зоне.": {
    "scope": "lua",
    "prefix": "isCharInArea3d",
    "body": [
        "${1:bool result} = isCharInArea3d(${0:Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere})"
    ],
    "description": "isCharInArea3d - Проверяет, находится ли персонаж в указанной кубической зоне.\nПринимаемые значения:\nPed ped хендл персонажа игрока, float cornerAX первая X координата, float cornerAY первая Y координата, float cornerAZ первая Z координата, float cornerBX вторая X координата, float cornerBY вторая Y координата, float cornerBZ вторая Z координата, bool sphere поиск в сфере\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Создает транспорт на указанных координатах.": {
    "scope": "lua",
    "prefix": "createCar",
    "body": [
        "${1:Vehicle car} = createCar(${0:Model modelId, float atX, float atY, float atZ})"
    ],
    "description": "createCar - Создает транспорт на указанных координатах.\nПринимаемые значения:\nModel modelId номер модели машины, float atX X координата, float atY Y координата, float atZ Z координата\n\nВозвращаемые значения:\nVehicle car хендл транспорта\n"
},
"→︎ Удаляет транспорт.": {
    "scope": "lua",
    "prefix": "deleteCar",
    "body": [
        "deleteCar(${0:Vehicle car})"
    ],
    "description": "deleteCar - Удаляет транспорт.\nПринимаемые значения:\nVehicle car Хендл транспорта\\\\\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает машине сумасшедшее вождение": {
    "scope": "lua",
    "prefix": "carWanderRandomly",
    "body": [
        "carWanderRandomly(${0:Vehicle car})"
    ],
    "description": "carWanderRandomly - Устанавливает машине сумасшедшее вождение\nПринимаемые значения:\nVehicle car хэндл автомобиля\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает нормальное вождение автомобиля": {
    "scope": "lua",
    "prefix": "carSetIdle",
    "body": [
        "carSetIdle(${0:Vehicle car})"
    ],
    "description": "carSetIdle - Устанавливает нормальное вождение автомобиля\nПринимаемые значения:\nVehicle car хэндл автомобиля\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает координаты машины.": {
    "scope": "lua",
    "prefix": "getCarCoordinates",
    "body": [
        "${1:float positionX, float positionY, float positionZ} = getCarCoordinates(${0:carhandle car})"
    ],
    "description": "getCarCoordinates - Получает координаты машины.\nПринимаемые значения:\ncarhandle car Хэндл машины.\n\nВозвращаемые значения:\nfloat positionX , float positionY , float positionZ Координаты (XYZ)\n"
},
"→︎ Задаёт позицию транспортного средства.": {
    "scope": "lua",
    "prefix": "setCarCoordinates",
    "body": [
        "setCarCoordinates(${0:Vehicle car, float atX, float atY, float atZ})"
    ],
    "description": "setCarCoordinates - Задаёт позицию транспортного средства.\nПринимаемые значения:\nVehicle car хэндл ТС, float atX ,, float atY ,, float atZ координаты\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает максимальную скорость автомобиля.": {
    "scope": "lua",
    "prefix": "setCarCruiseSpeed",
    "body": [
        "setCarCruiseSpeed(${0:Vehicle car, float maxSpeed})"
    ],
    "description": "setCarCruiseSpeed - Устанавливает максимальную скорость автомобиля.\nПринимаемые значения:\nVehicle car скриптовый хэндл транспортного средства, float maxSpeed максимальная скорость автомобиля\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает аккуратность вождения": {
    "scope": "lua",
    "prefix": "setCarDrivingStyle",
    "body": [
        "setCarDrivingStyle(${0:Vehicle car, int behaviour})"
    ],
    "description": "setCarDrivingStyle - Устанавливает аккуратность вождения\nПринимаемые значения:\nVehicle car хэндл автомобиля, int behaviour уровень аккуратности вождения\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает автомобилю поведение": {
    "scope": "lua",
    "prefix": "setCarMission",
    "body": [
        "setCarMission(${0:Vehicle car, int driverBehaviour})"
    ],
    "description": "setCarMission - Устанавливает автомобилю поведение\nПринимаемые значения:\nVehicle car хэндл автомобиля, int driverBehaviour стиль вождения, none\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, находится ли транспорт в указанной прямоугольной зоне.": {
    "scope": "lua",
    "prefix": "isCarInArea2d",
    "body": [
        "${1:bool result} = isCarInArea2d(${0:Vehicle car, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
    ],
    "description": "isCarInArea2d - Проверяет, находится ли транспорт в указанной прямоугольной зоне.\nПринимаемые значения:\nVehicle car хендл транспорта игрока, float cornerAX первая X координата, float cornerAY первая Y координата, float cornerBX вторая X координата, float cornerBY вторая Y координата, bool sphere поиск в сфере\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет, находится ли транспорт в указанной кубической зоне.": {
    "scope": "lua",
    "prefix": "isCarInArea3d",
    "body": [
        "${1:bool result} = isCarInArea3d(${0:Vehicle car, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere})"
    ],
    "description": "isCarInArea3d - Проверяет, находится ли транспорт в указанной кубической зоне.\nПринимаемые значения:\nPed ped хендл транспорта игрока, float cornerAX первая X координата, float cornerAY первая Y координата, float cornerAZ первая Z координата, float cornerBX вторая X координата, float cornerBY вторая Y координата, float cornerBZ вторая Z координата, bool sphere поиск в сфере\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Выводит стилизованный текст из GXT на определённое время.": {
    "scope": "lua",
    "prefix": "printBig",
    "body": [
        "printBig(${0:GxtString gxtString, int time, int style})"
    ],
    "description": "printBig - Выводит стилизованный текст из GXT на определённое время.\nПринимаемые значения:\nGxtString gxtString ключ из GXT, int time время в миллисекундах, int style стиль (1-7)\n\nВозвращаемые значения:\n\n"
},
"→︎ Отображает текстовую строку с низким приоритетом в нижней части экрана, в течение указанного времени.": {
    "scope": "lua",
    "prefix": "printText",
    "body": [
        "printText(${0:GxtString gxtString, int time, int flag})"
    ],
    "description": "printText - Отображает текстовую строку с низким приоритетом в нижней части экрана, в течение указанного времени.\nПринимаемые значения:\nGxtString gxtString ключ из GXT, int time время в миллисекундах, int flag Флаг\n\nВозвращаемые значения:\n\n"
},
"→︎ Отображает текстовую строку в нижней части экрана с высоким приоритетом, в течение указанного времени.": {
    "scope": "lua",
    "prefix": "printTextNow",
    "body": [
        "printTextNow(${0:GxtString gxtString, int time, int flag})"
    ],
    "description": "printTextNow - Отображает текстовую строку в нижней части экрана с высоким приоритетом, в течение указанного времени.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Удаляет с экрана все текстовые сообщения игры.": {
    "scope": "lua",
    "prefix": "clearPrints",
    "body": [
        "clearPrints()"
    ],
    "description": "clearPrints - Удаляет с экрана все текстовые сообщения игры.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает текущее игровое время.": {
    "scope": "lua",
    "prefix": "getTimeOfDay",
    "body": [
        "${1:int hours, int mins} = getTimeOfDay()"
    ],
    "description": "getTimeOfDay - Возвращает текущее игровое время.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint hours количество часов, int mins количество минут\n"
},
"→︎ Меняет текущее время сервера, на указанное в функции.": {
    "scope": "lua",
    "prefix": "setTimeOfDay",
    "body": [
        "setTimeOfDay(${0:int hours, int minutes})"
    ],
    "description": "setTimeOfDay - Меняет текущее время сервера, на указанное в функции.\nПринимаемые значения:\nint hours количество часов, int mins количество минут\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает остаток минут до указаного времени": {
    "scope": "lua",
    "prefix": "getMinutesToTimeOfDay",
    "body": [
        "${1:int minutes} = getMinutesToTimeOfDay(${0:int hours, int minutes})"
    ],
    "description": "getMinutesToTimeOfDay - Получает остаток минут до указаного времени\nПринимаемые значения:\nint hours часы, int minutes минуты\n\nВозвращаемые значения:\nint minutes остаток минут\n"
},
"→︎ Проверяет находится ли точка на экране в заданном радиусе.": {
    "scope": "lua",
    "prefix": "isPointOnScreen",
    "body": [
        "${1:bool result} = isPointOnScreen(${0:float sphereX, float sphereY, float sphereZ, float radius})"
    ],
    "description": "isPointOnScreen - Проверяет находится ли точка на экране в заданном радиусе.\nПринимаемые значения:\nfloat sphereX, float sphereY, float sphereZ координаты точки, float radius радиус\n\nВозвращаемые значения:\nbool radius результат проверки\n"
},
"→︎ Получает хэндл машины в которой сидит персонаж.": {
    "scope": "lua",
    "prefix": "storeCarCharIsIn",
    "body": [
        "${1:Vehicle car} = storeCarCharIsIn(${0:Ped ped})"
    ],
    "description": "storeCarCharIsIn - Получает хэндл машины в которой сидит персонаж.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nVehicle car хэндл машины\n"
},
"→︎ Проверяет находится ли игрок в указанной машине.": {
    "scope": "lua",
    "prefix": "isCharInCar",
    "body": [
        "${1:bool result} = isCharInCar(${0:Ped ped, Vehicle car})"
    ],
    "description": "isCharInCar - Проверяет находится ли игрок в указанной машине.\nПринимаемые значения:\nPed ped хэндл актера, Vehicle car хэндл машины\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет находиться ли игрок в модели машины(Пример: 494 - Hotring)": {
    "scope": "lua",
    "prefix": "isCharInModel",
    "body": [
        "${1:bool result} = isCharInModel(${0:Ped ped, Model carModel})"
    ],
    "description": "isCharInModel - Проверяет находиться ли игрок в модели машины(Пример: 494 - Hotring)\nПринимаемые значения:\nPed ped хэндл персоонажа, Model carModel модель машины\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет находится ли игрок в любой машине.": {
    "scope": "lua",
    "prefix": "isCharInAnyCar",
    "body": [
        "${1:bool result} = isCharInAnyCar(${0:Ped ped})"
    ],
    "description": "isCharInAnyCar - Проверяет находится ли игрок в любой машине.\nПринимаемые значения:\nPed ped хэндл актера\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Возвращает true, если игрок нажимает указанную клавишу": {
    "scope": "lua",
    "prefix": "isButtonPressed",
    "body": [
        "${1:bool result} = isButtonPressed(${0:Player player, int key})"
    ],
    "description": "isButtonPressed - Возвращает true, если игрок нажимает указанную клавишу\nПринимаемые значения:\nPlayer player хендл игрока, int key идентификатор клавиши\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Создает объект.": {
    "scope": "lua",
    "prefix": "createObject",
    "body": [
        "${1:Object object} = createObject(${0:Model model, float atX, float atY, float atZ})"
    ],
    "description": "createObject - Создает объект.\nПринимаемые значения:\nModel model модель объекта, float atX, float atY, float atZ координаты где будет создан объект(XYZ)\n\nВозвращаемые значения:\nObject object хэндл объекта\n"
},
"→︎ Удаляет объект.": {
    "scope": "lua",
    "prefix": "deleteObject",
    "body": [
        "deleteObject(${0:Object object})"
    ],
    "description": "deleteObject - Удаляет объект.\nПринимаемые значения:\nObject object хэндл объекта\n\nВозвращаемые значения:\n\n"
},
"→︎ Дать денег персонажу.": {
    "scope": "lua",
    "prefix": "givePlayerMoney",
    "body": [
        "givePlayerMoney(${0:Player player, int money})"
    ],
    "description": "givePlayerMoney - Дать денег персонажу.\nПринимаемые значения:\nPlayer player хендл игрока, int money деньги\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает количество денег игрока.": {
    "scope": "lua",
    "prefix": "getPlayerMoney",
    "body": [
        "${1:int money} = getPlayerMoney(${0:Player player})"
    ],
    "description": "getPlayerMoney - Возвращает количество денег игрока.\nПринимаемые значения:\nPlayer player игрок\n\nВозвращаемые значения:\nint money баланс\n"
},
"→︎ Устанавливает уровень розыска игроку": {
    "scope": "lua",
    "prefix": "alterWantedLevel",
    "body": [
        "alterWantedLevel(${0:Player player, int WantedLevel})"
    ],
    "description": "alterWantedLevel - Устанавливает уровень розыска игроку\nПринимаемые значения:\nPlayer player хэндл игрока, int WantedLevel уровень розыска\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает уровень розыска игроку, при этом не сбрасывая его в дальнейшем": {
    "scope": "lua",
    "prefix": "alterWantedLevelNoDrop",
    "body": [
        "alterWantedLevelNoDrop(${0:Player player, int minimumWantedLevel})"
    ],
    "description": "alterWantedLevelNoDrop - Устанавливает уровень розыска игроку, при этом не сбрасывая его в дальнейшем\nПринимаемые значения:\nPlayer player хэндл игрока, int minimumWantedLevel минимальный уровень розыска\n\nВозвращаемые значения:\n\n"
},
"→︎ Сравнивает уровень розыска, возвращает true если уровень розыска больше указаного": {
    "scope": "lua",
    "prefix": "isWantedLevelGreater",
    "body": [
        "${1:bool result} = isWantedLevelGreater(${0:Player player, int level})"
    ],
    "description": "isWantedLevelGreater - Сравнивает уровень розыска, возвращает true если уровень розыска больше указаного\nПринимаемые значения:\nPlayer player хэндл, int level уровень розыска для сравнения\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Удаляет розыск игроку.": {
    "scope": "lua",
    "prefix": "clearWantedLevel",
    "body": [
        "clearWantedLevel(${0:Player player})"
    ],
    "description": "clearWantedLevel - Удаляет розыск игроку.\nПринимаемые значения:\nPlayer player скриптовый хендл игрока\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает состояние персонажа: убит или арестован": {
    "scope": "lua",
    "prefix": "  setDeatharrestState",
    "body": [
        "  setDeatharrestState(${0:bool state})"
    ],
    "description": "  setDeatharrestState - Устанавливает состояние персонажа: убит или арестован\nПринимаемые значения:\nbool state состояние\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, умер ли персонаж или арестован": {
    "scope": "lua",
    "prefix": "hasDeatharrestBeenExecuted",
    "body": [
        "${1:bool result} = hasDeatharrestBeenExecuted()"
    ],
    "description": "hasDeatharrestBeenExecuted - Проверяет, умер ли персонаж или арестован\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Добавляет патроны персонажу, если у него есть оружие.": {
    "scope": "lua",
    "prefix": "addAmmoToChar",
    "body": [
        "addAmmoToChar(${0:Ped ped, int weapon, int ammo})"
    ],
    "description": "addAmmoToChar - Добавляет патроны персонажу, если у него есть оружие.\nПринимаемые значения:\nPed ped хэндл персонажа, int weapon ID оружия, int ammo число патронов\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет мертв ли игрок.": {
    "scope": "lua",
    "prefix": "isPlayerDead",
    "body": [
        "${1:bool result} = isPlayerDead(${0:Player player})"
    ],
    "description": "isPlayerDead - Проверяет мертв ли игрок.\nПринимаемые значения:\nPlayer player хэндл игрока\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет мертв ли персонаж.": {
    "scope": "lua",
    "prefix": "isCharDead",
    "body": [
        "${1:bool result} = isCharDead(${0:Ped ped})"
    ],
    "description": "isCharDead - Проверяет мертв ли персонаж.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет взорвана ли машина.": {
    "scope": "lua",
    "prefix": "isCarDead",
    "body": [
        "${1:bool result} = isCarDead(${0:Vehicle car})"
    ],
    "description": "isCarDead - Проверяет взорвана ли машина.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет сигналит ли игрок в машине.": {
    "scope": "lua",
    "prefix": "isPlayerPressingHorn",
    "body": [
        "${1:bool result} = isPlayerPressingHorn(${0:Player player})"
    ],
    "description": "isPlayerPressingHorn - Проверяет сигналит ли игрок в машине.\nПринимаемые значения:\nPlayer player хэндл игрока\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Создает персонажа сидящем в машине на водительском сиденье.": {
    "scope": "lua",
    "prefix": "createCharInsideCar",
    "body": [
        "${1:Ped ped} = createCharInsideCar(${0:Vehicle car, Model pedtype, int model})"
    ],
    "description": "createCharInsideCar - Создает персонажа сидящем в машине на водительском сиденье.\nПринимаемые значения:\nVehicle car хэндл машины, Model pedtype модель персонажа, int model модель\n\nВозвращаемые значения:\nPed ped хэндл персонажа\n"
},
"→︎ Проверяет указанную машину на модель.": {
    "scope": "lua",
    "prefix": "isCarModel",
    "body": [
        "${1:bool result} = isCarModel(${0:Vehicle car, Model model})"
    ],
    "description": "isCarModel - Проверяет указанную машину на модель.\nПринимаемые значения:\nVehicle car хэндл машины, Model model модель машины\n\nВозвращаемые значения:\nbool result результат проверки(возвращает true, если модель совпадает)\n"
},
"→︎ Восстанавливает камеру в обычное положение.": {
    "scope": "lua",
    "prefix": "restoreCamera",
    "body": [
        "restoreCamera()"
    ],
    "description": "restoreCamera - Восстанавливает камеру в обычное положение.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает скорость игры.": {
    "scope": "lua",
    "prefix": "setTimeScale",
    "body": [
        "setTimeScale(${0:float gamespeed})"
    ],
    "description": "setTimeScale - Устанавливает скорость игры.\nПринимаемые значения:\nfloat gamespeed скорость\n\nВозвращаемые значения:\n\n"
},
"→︎ Удаляет маркер.": {
    "scope": "lua",
    "prefix": "removeBlip",
    "body": [
        "removeBlip(${0:markerhandle marker})"
    ],
    "description": "removeBlip - Удаляет маркер.\nПринимаемые значения:\nmarkerhandle marker Хендл маркера.\n\nВозвращаемые значения:\n\n"
},
"→︎ Меняет цвет маркера.": {
    "scope": "lua",
    "prefix": "changeBlipColour",
    "body": [
        "changeBlipColour(${0:markerhandle marker, int color})"
    ],
    "description": "changeBlipColour - Меняет цвет маркера.\nПринимаемые значения:\nmarkerhandle marker Хендл маркера., int color Цвет.\n\nВозвращаемые значения:\n\n"
},
"→︎ Меняет размер маркера.": {
    "scope": "lua",
    "prefix": "changeBlipScale",
    "body": [
        "changeBlipScale(${0:Marker marker, int size})"
    ],
    "description": "changeBlipScale - Меняет размер маркера.\nПринимаемые значения:\nMarker marker Хендл маркера., int size Размер. (3 - стандартный)\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, затухает ли прямо сейчас в игре экран.": {
    "scope": "lua",
    "prefix": "getFadingStatus",
    "body": [
        "${1:bool result} = getFadingStatus()"
    ],
    "description": "getFadingStatus - Проверяет, затухает ли прямо сейчас в игре экран.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Возвращает Z-угол(поворот) персонажа.": {
    "scope": "lua",
    "prefix": "getCharHeading",
    "body": [
        "${1:float angle} = getCharHeading(${0:Ped ped})"
    ],
    "description": "getCharHeading - Возвращает Z-угол(поворот) персонажа.\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\nfloat angle угол поворота\n"
},
"→︎ Устанавливает Z-угол(поворот) персонажа.": {
    "scope": "lua",
    "prefix": "setCharHeading",
    "body": [
        "setCharHeading(${0:Ped ped, float angle})"
    ],
    "description": "setCharHeading - Устанавливает Z-угол(поворот) персонажа.\nПринимаемые значения:\nPed ped хендл персонажа игрока, float angle угол поворота\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает Z-угол(поворот) транспорта.": {
    "scope": "lua",
    "prefix": "getCarHeading",
    "body": [
        "${1:float angle} = getCarHeading(${0:Vehicle car})"
    ],
    "description": "getCarHeading - Возвращает Z-угол(поворот) транспорта.\nПринимаемые значения:\nVehicle car хендл транспорта\n\nВозвращаемые значения:\nfloat angle угол поворота\n"
},
"→︎ Устанавливает Z-угол(поворот) транспорта.": {
    "scope": "lua",
    "prefix": "setCarHeading",
    "body": [
        "setCarHeading(${0:Vehicle car, float angle})"
    ],
    "description": "setCarHeading - Устанавливает Z-угол(поворот) транспорта.\nПринимаемые значения:\nVehicle car хендл транспорта, float angle угол поворота\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает угол поворота объекта": {
    "scope": "lua",
    "prefix": "getObjectHeading",
    "body": [
        "${1:float angle} = getObjectHeading(${0:Object object})"
    ],
    "description": "getObjectHeading - Получает угол поворота объекта\nПринимаемые значения:\nObject object скриптовый хендл объекта\n\nВозвращаемые значения:\nfloat angle угол поворота объекта\n"
},
"→︎ Задаёт угол поворота объекту.": {
    "scope": "lua",
    "prefix": "setObjectHeading",
    "body": [
        "setObjectHeading(${0:Object object, float angle})"
    ],
    "description": "setObjectHeading - Задаёт угол поворота объекту.\nПринимаемые значения:\nObject object скриптовый хендл объекта, float angle угол поворота объекта\n\nВозвращаемые значения:\n\n"
},
"→︎ Узнает, касается ли персонаж объекта": {
    "scope": "lua",
    "prefix": "isCharTouchingObject",
    "body": [
        "${1:bool result} = isCharTouchingObject(${0:Ped ped, Object object})"
    ],
    "description": "isCharTouchingObject - Узнает, касается ли персонаж объекта\nПринимаемые значения:\nPed ped скриптовый хендл персонажа, Object object скриптовый хендл объекта\n\nВозвращаемые значения:\nbool result результат выполнения функции\n"
},
"→︎ Устанавливает количество патронов в указанное оружие.": {
    "scope": "lua",
    "prefix": "setCharAmmo",
    "body": [
        "setCharAmmo(${0:Ped ped, int weapon, int ammo})"
    ],
    "description": "setCharAmmo - Устанавливает количество патронов в указанное оружие.\nПринимаемые значения:\nPed ped хэндл персонажа, int weapon ID оружия, int ammo число патронов\n\nВозвращаемые значения:\n\n"
},
"→︎ Создает маркер над автомобилем.": {
    "scope": "lua",
    "prefix": "addBlipForCar",
    "body": [
        "${1:markerhandle marker} = addBlipForCar(${0:carhandle car})"
    ],
    "description": "addBlipForCar - Создает маркер над автомобилем.\nПринимаемые значения:\ncarhandle car Хендл машины.\n\nВозвращаемые значения:\nmarkerhandle marker Хендл маркера.\n"
},
"→︎ Добавляет маркер над персонажем.": {
    "scope": "lua",
    "prefix": "addBlipForChar",
    "body": [
        "${1:Marker marker} = addBlipForChar(${0:Ped ped})"
    ],
    "description": "addBlipForChar - Добавляет маркер над персонажем.\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\nMarker marker хендл маркера\n"
},
"→︎ Создает маркер над объектом.": {
    "scope": "lua",
    "prefix": "addBlipForObject",
    "body": [
        "${1:markerhandle marker} = addBlipForObject(${0:objhandle object})"
    ],
    "description": "addBlipForObject - Создает маркер над объектом.\nПринимаемые значения:\nobjhandle object Хендл объекта.\n\nВозвращаемые значения:\nmarkerhandle marker Хендл маркера.\n"
},
"→︎ Создает маркер на указанных координатах.": {
    "scope": "lua",
    "prefix": "addBlipForCoord",
    "body": [
        "${1:checkpointhandle checkpoint} = addBlipForCoord(${0:float atX, float atY, float atZ})"
    ],
    "description": "addBlipForCoord - Создает маркер на указанных координатах.\nПринимаемые значения:\nfloat atX , float atY , float atZ Координаты (XYZ)\n\nВозвращаемые значения:\ncheckpointhandle checkpoint Хендл маркера.\n"
},
"→︎ Проигрывает короткий звук., Если указаны координаты - то звук проиграется на указанных координатах.": {
    "scope": "lua",
    "prefix": "addOneOffSound",
    "body": [
        "addOneOffSound(${0:float atX, float atY, float atZ, int sound})"
    ],
    "description": "addOneOffSound - Проигрывает короткий звук., Если указаны координаты - то звук проиграется на указанных координатах.\nПринимаемые значения:\nfloat atX координата X, float atY координата Y, float atZ координата Z, int sound идентификатор звука\n\nВозвращаемые значения:\n\n"
},
"→︎ Удаляет проигрываемый звук": {
    "scope": "lua",
    "prefix": "removeSound",
    "body": [
        "removeSound(${0:int sound})"
    ],
    "description": "removeSound - Удаляет проигрываемый звук\nПринимаемые значения:\nint sound ID звука\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает true если машина перевёрнута (застряла на крыше), то есть транспорт был добавлен к проверке addUpsidedownCarCheck и его движения в перевернутом состоянии минимальны. Проверка срабатывает и с взорванным транспортом.": {
    "scope": "lua",
    "prefix": "isCarStuckOnRoof",
    "body": [
        "${1:bool result} = isCarStuckOnRoof(${0:Vehicle car})"
    ],
    "description": "isCarStuckOnRoof - Возвращает true если машина перевёрнута (застряла на крыше), то есть транспорт был добавлен к проверке addUpsidedownCarCheck и его движения в перевернутом состоянии минимальны. Проверка срабатывает и с взорванным транспортом.\nПринимаемые значения:\nVehicle car хэндл транспорта\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Выдает ID оружия и кол-во патронов.": {
    "scope": "lua",
    "prefix": "giveWeaponToChar",
    "body": [
        "giveWeaponToChar(${0:Ped ped, int weapon, int ammo})"
    ],
    "description": "giveWeaponToChar - Выдает ID оружия и кол-во патронов.\nПринимаемые значения:\nPed ped хендл персонажа, int weapon ID оружия, int ammo количество патронов\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает возможность передвижения персонажа": {
    "scope": "lua",
    "prefix": "setPlayerControl",
    "body": [
        "${1:bool result} = setPlayerControl(${0:Player player, bool canMove})"
    ],
    "description": "setPlayerControl - Устанавливает возможность передвижения персонажа\nПринимаемые значения:\nPlayer player хендл игрока, bool canMove может ли игрок передвигаться true - может, false - не может.\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Дает персонажу в руки указанное оружие.": {
    "scope": "lua",
    "prefix": "setCurrentCharWeapon",
    "body": [
        "setCurrentCharWeapon(${0:Ped ped, int weapon})"
    ],
    "description": "setCurrentCharWeapon - Дает персонажу в руки указанное оружие.\nПринимаемые значения:\nPed ped хэндл персонажа, int weapon ID оружия\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает координаты указанного объекта.": {
    "scope": "lua",
    "prefix": "getObjectCoordinates",
    "body": [
        "${1:bool result, float positionX, float positionY, float positionZ} = getObjectCoordinates(${0:Object object})"
    ],
    "description": "getObjectCoordinates - Возвращает координаты указанного объекта.\nПринимаемые значения:\nObject object хендл объекта\n\nВозвращаемые значения:\nbool result результат проверки, float atX x координата, float atY y координата, float atZ z координата\n"
},
"→︎ Устанавливает указанный объект на указанные координаты.": {
    "scope": "lua",
    "prefix": "setObjectCoordinates",
    "body": [
        "${1:bool result} = setObjectCoordinates(${0:Object object, float atX, float atY, float atZ})"
    ],
    "description": "setObjectCoordinates - Устанавливает указанный объект на указанные координаты.\nПринимаемые значения:\nObject object хендл объекта, float atX x координата, float atY y координата, float atZ z координата\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Возвращает текущий уровень розыска персонажа.": {
    "scope": "lua",
    "prefix": "storeWantedLevel",
    "body": [
        "${1:bool result, int level} = storeWantedLevel(${0:Player player})"
    ],
    "description": "storeWantedLevel - Возвращает текущий уровень розыска персонажа.\nПринимаемые значения:\nPlayer player хендл игрока\n\nВозвращаемые значения:\nbool result результат проверки, int level уровень розыска\n"
},
"→︎ Проверяет стоит ли машина на месте.": {
    "scope": "lua",
    "prefix": "isCarStopped",
    "body": [
        "${1:bool result} = isCarStopped(${0:carhandle car})"
    ],
    "description": "isCarStopped - Проверяет стоит ли машина на месте.\nПринимаемые значения:\ncarhandle car Хендл машины.\n\nВозвращаемые значения:\nbool result Результат проверки.\n"
},
"→︎ Помечает транспорт как более ненужный для скриптового движка и что он может быть удален в любое время игрой": {
    "scope": "lua",
    "prefix": "markCarAsNoLongerNeeded",
    "body": [
        "markCarAsNoLongerNeeded(${0:Vehicle car})"
    ],
    "description": "markCarAsNoLongerNeeded - Помечает транспорт как более ненужный для скриптового движка и что он может быть удален в любое время игрой\nПринимаемые значения:\nVehicle car хендл транспорта\n\nВозвращаемые значения:\n\n"
},
"→︎ Создает персонажа сидящем в машине на пассажирском сидении.": {
    "scope": "lua",
    "prefix": "createCharAsPassenger",
    "body": [
        "${1:bool result, Ped ped} = createCharAsPassenger(${0:Vehicle car, Model pedtype, int model, int passengerSeat})"
    ],
    "description": "createCharAsPassenger - Создает персонажа сидящем в машине на пассажирском сидении.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Возвращает количество пассажиров в автомобиле": {
    "scope": "lua",
    "prefix": "getNumberOfPassengers",
    "body": [
        "${1:bool result, int passengers} = getNumberOfPassengers(${0:Vehicle car})"
    ],
    "description": "getNumberOfPassengers - Возвращает количество пассажиров в автомобиле\nПринимаемые значения:\nVehicle car хэндл транспорта\n\nВозвращаемые значения:\nbool result результат проверки, int passengers количество пассажиров\n"
},
"→︎ Возвращает максимальное количество пассажиров для данного транспортного средства": {
    "scope": "lua",
    "prefix": "getMaximumNumberOfPassengers",
    "body": [
        "${1:int maxPassengers} = getMaximumNumberOfPassengers(${0:Vehicle car})"
    ],
    "description": "getMaximumNumberOfPassengers - Возвращает максимальное количество пассажиров для данного транспортного средства\nПринимаемые значения:\nVehicle car скриптовый хэндл транспортного средства\n\nВозвращаемые значения:\nint maxPassengers количество пассажиров\n"
},
"→︎ Устанавливает максимально возможный уровень розыска": {
    "scope": "lua",
    "prefix": "setMaxWantedLevel",
    "body": [
        "setMaxWantedLevel(${0:int level})"
    ],
    "description": "setMaxWantedLevel - Устанавливает максимально возможный уровень розыска\nПринимаемые значения:\nint level число\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает хэндл персонажа игрока": {
    "scope": "lua",
    "prefix": "getPlayerChar",
    "body": [
        "${1:bool result, Ped ped} = getPlayerChar(${0:Player player})"
    ],
    "description": "getPlayerChar - Получает хэндл персонажа игрока\nПринимаемые значения:\nPlayer player хэндл игрока\n\nВозвращаемые значения:\nbool result результат, Ped ped хэндл игрока\n"
},
"→︎ Устанавливает, должны ли полицейские игнорировать игрока независимо от уровня.": {
    "scope": "lua",
    "prefix": "setPoliceIgnorePlayer",
    "body": [
        "${1:bool result} = setPoliceIgnorePlayer(${0:Player player, bool ignored})"
    ],
    "description": "setPoliceIgnorePlayer - Устанавливает, должны ли полицейские игнорировать игрока независимо от уровня.\nПринимаемые значения:\nplayer player хендл игрока, bool ignored true - включить игнорирование, false - выключить игнорирование\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Устанавливает, открыты или закрыты двери т/с": {
    "scope": "lua",
    "prefix": "lockCarDoors",
    "body": [
        "lockCarDoors(${0:Vehicle car, int status})"
    ],
    "description": "lockCarDoors - Устанавливает, открыты или закрыты двери т/с\nПринимаемые значения:\nVehicle car хендл транспортного средства, int status статус\n\nВозвращаемые значения:\n\n"
},
"→︎ Взрывает транспортное средство.": {
    "scope": "lua",
    "prefix": "explodeCar",
    "body": [
        "${1:bool result} = explodeCar(${0:Vehicle car})"
    ],
    "description": "explodeCar - Взрывает транспортное средство.\nПринимаемые значения:\nVehicle car скриптовый хендл транспортного средства\n\nВозвращаемые значения:\nbool result результат выполнения операции\n"
},
"→︎ Вызывает эффект взрыва на экране.": {
    "scope": "lua",
    "prefix": "addExplosion",
    "body": [
        "${1:bool result} = addExplosion(${0:float atX, float atY, float atZ, int radius})"
    ],
    "description": "addExplosion - Вызывает эффект взрыва на экране.\nПринимаемые значения:\nfloat atX, float atY, float atZ Координаты взрыва, int radius Радиус взрыва\n\nВозвращаемые значения:\nbool result Результат\n"
},
"→︎ Удаляет пикап.": {
    "scope": "lua",
    "prefix": "removePickup",
    "body": [
        "${1:bool result} = removePickup(${0:Pickup pickup})"
    ],
    "description": "removePickup - Удаляет пикап.\nПринимаемые значения:\nPickup pickup скриптовый хендл пикапа\n\nВозвращаемые значения:\nbool result результат выполнения операции\n"
},
"→︎ Устанавливает свечение шашки такси": {
    "scope": "lua",
    "prefix": "setTaxiLights",
    "body": [
        "setTaxiLights(${0:vehicle taxi, bool light})"
    ],
    "description": "setTaxiLights - Устанавливает свечение шашки такси\nПринимаемые значения:\nvehicle taxi такси, bool light состояние\n\nВозвращаемые значения:\n\n"
},
"→︎ Установить/Снять тормоза(невозможность двигаться) у авто, Если 'тормоза' установить, то как бы игрок не пытался двигаться в авто он будет стоять на месте": {
    "scope": "lua",
    "prefix": "applyBrakesToPlayersCar",
    "body": [
        "${1:bool result} = applyBrakesToPlayersCar(${0:Player player, bool apply})"
    ],
    "description": "applyBrakesToPlayersCar - Установить/Снять тормоза(невозможность двигаться) у авто, Если 'тормоза' установить, то как бы игрок не пытался двигаться в авто он будет стоять на месте\nПринимаемые значения:\nPlayer player хендл игрока, bool apply статус\n\nВозвращаемые значения:\nbool result статус\n"
},
"→︎ Устанавливает персонажу уровень здоровья.": {
    "scope": "lua",
    "prefix": "setCharHealth",
    "body": [
        "setCharHealth(${0:pedhandle ped, int health})"
    ],
    "description": "setCharHealth - Устанавливает персонажу уровень здоровья.\nПринимаемые значения:\npedhandle ped Хендл персонажа., int health Число здоровья.\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает уровень здоровья машине.": {
    "scope": "lua",
    "prefix": "setCarHealth",
    "body": [
        "setCarHealth(${0:carhandle car, int health})"
    ],
    "description": "setCarHealth - Устанавливает уровень здоровья машине.\nПринимаемые значения:\ncarhandle car Хендл машины., int health Уровень здоровья.\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает здоровье персонажа.": {
    "scope": "lua",
    "prefix": "getCharHealth",
    "body": [
        "${1:int health} = getCharHealth(${0:Ped ped})"
    ],
    "description": "getCharHealth - Получает здоровье персонажа.\nПринимаемые значения:\npedHandle ped хендл персонажа\n\nВозвращаемые значения:\nhealth здоровье\n"
},
"→︎ Получает состояние машины.": {
    "scope": "lua",
    "prefix": "getCarHealth",
    "body": [
        "${1:int health} = getCarHealth(${0:Vehicle car})"
    ],
    "description": "getCarHealth - Получает состояние машины.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nint health Состояние машины\n"
},
"→︎ Меняет цвет машины.": {
    "scope": "lua",
    "prefix": "changeCarColour",
    "body": [
        "${1:bool result} = changeCarColour(${0:carhandle car, int primaryColor, int secondaryColor})"
    ],
    "description": "changeCarColour - Меняет цвет машины.\nПринимаемые значения:\ncarhandle car Хендл автомобиля., int primaryColor Первичный цвет., int secondaryColor Вторичный цвет.\n\nВозвращаемые значения:\nbool result Результат выполнения.\n"
},
"→︎ Устанавливает указанной банде оружие которое она может использовать.": {
    "scope": "lua",
    "prefix": "setGangWeapons",
    "body": [
        "setGangWeapons(${0:int gang, int weapons1, int weapons2, int weapons3})"
    ],
    "description": "setGangWeapons - Устанавливает указанной банде оружие которое она может использовать.\nПринимаемые значения:\nint gang номер банды, int weapons1, int weapons2, int weapons3 ID оружия которое может использовать банда\n\nВозвращаемые значения:\n\n"
},
"→︎ Загружает указанную модель.": {
    "scope": "lua",
    "prefix": "requestModel",
    "body": [
        "${1:bool result} = requestModel(${0:Model model})"
    ],
    "description": "requestModel - Загружает указанную модель.\nПринимаемые значения:\nModel model номер модели\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Проверяет загружена ли модель.": {
    "scope": "lua",
    "prefix": "hasModelLoaded",
    "body": [
        "${1:bool result} = hasModelLoaded(${0:Model modelId})"
    ],
    "description": "hasModelLoaded - Проверяет загружена ли модель.\nПринимаемые значения:\nModel modelId номер модель\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Помечает загруженную ранее модель как более ненужную для скриптового движка": {
    "scope": "lua",
    "prefix": "markModelAsNoLongerNeeded",
    "body": [
        "markModelAsNoLongerNeeded(${0:Model modelId})"
    ],
    "description": "markModelAsNoLongerNeeded - Помечает загруженную ранее модель как более ненужную для скриптового движка\nПринимаемые значения:\nModel modelId номер модели\n\nВозвращаемые значения:\n\n"
},
"→︎ Сбрасывает количество раз, сколько раз игрок уничтожил определенную модель.": {
    "scope": "lua",
    "prefix": "resetNumOfModelsKilledByPlayer",
    "body": [
        "resetNumOfModelsKilledByPlayer(${0:Player player})"
    ],
    "description": "resetNumOfModelsKilledByPlayer - Сбрасывает количество раз, сколько раз игрок уничтожил определенную модель.\nПринимаемые значения:\nPlayer player хендл игрока\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет двигается ли игрок.": {
    "scope": "lua",
    "prefix": "isCharStopped",
    "body": [
        "${1:bool result} = isCharStopped(${0:Ped ped})"
    ],
    "description": "isCharStopped - Проверяет двигается ли игрок.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Устанавливает иммунитет персонажу": {
    "scope": "lua",
    "prefix": "setCharProofs",
    "body": [
        "setCharProofs(${0:Ped ped, bool BP, bool FP, bool EP, bool CP, bool MP})"
    ],
    "description": "setCharProofs - Устанавливает иммунитет персонажу\nПринимаемые значения:\nPed ped Хэндл персонажа, bool BP иммунитет от пуль, bool FP иммунитет от огня, bool EP иммунитет от взрывов, bool CP иммунитет от ударений, bool MP иммунитет от оружия ближнего боя в т.ч. и кулаков\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает иммунитет машине": {
    "scope": "lua",
    "prefix": "setCarProofs",
    "body": [
        "setCarProofs(${0:Vehicle car, bool BP, bool FP, bool EP, bool CP, bool MP})"
    ],
    "description": "setCarProofs - Устанавливает иммунитет машине\nПринимаемые значения:\nVehicle car Хэндл транспорта, bool BP иммунитет от пуль, bool FP иммунитет от огня, bool EP иммунитет от взрывов, bool CP иммунитет от ударений, bool MP иммунитет от оружия ближнего боя в т.ч. и кулаков\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет находиться ли машина в воде.": {
    "scope": "lua",
    "prefix": "isCarInWater",
    "body": [
        "${1:bool result} = isCarInWater(${0:Vehicle car})"
    ],
    "description": "isCarInWater - Проверяет находиться ли машина в воде.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет видна ли машина.": {
    "scope": "lua",
    "prefix": "isCarOnScreen",
    "body": [
        "${1:bool result} = isCarOnScreen(${0:Vehicle car})"
    ],
    "description": "isCarOnScreen - Проверяет видна ли машина.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет виден ли персонаж.": {
    "scope": "lua",
    "prefix": "isCharOnScreen",
    "body": [
        "${1:bool result} = isCharOnScreen(${0:Ped ped})"
    ],
    "description": "isCharOnScreen - Проверяет виден ли персонаж.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет виден ли объект.": {
    "scope": "lua",
    "prefix": "isObjectOnScreen",
    "body": [
        "${1:bool result} = isObjectOnScreen(${0:Object object})"
    ],
    "description": "isObjectOnScreen - Проверяет виден ли объект.\nПринимаемые значения:\nObject object хэндл объекта\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Находит высоту относительно 3д координат.": {
    "scope": "lua",
    "prefix": "getGroundZFor3dCoord",
    "body": [
        "${1:float z} = getGroundZFor3dCoord(${0:float atX, float atY, float atZ})"
    ],
    "description": "getGroundZFor3dCoord - Находит высоту относительно 3д координат.\nПринимаемые значения:\nfloat atX , float atY , float atZ Координаты\n\nВозвращаемые значения:\nfloat z Результат\n"
},
"→︎ Заглушить мотор т/c": {
    "scope": "lua",
    "prefix": "boatStop",
    "body": [
        "boatStop(${0:Vehicle car})"
    ],
    "description": "boatStop - Заглушить мотор т/c\nПринимаемые значения:\nVehicle car хэндл т/c\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет выстрелил ли персонаж в заданной зоне.": {
    "scope": "lua",
    "prefix": "isCharShootingInArea",
    "body": [
        "${1:bool result} = isCharShootingInArea(${0:pedhandle ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, int weapon})"
    ],
    "description": "isCharShootingInArea - Проверяет выстрелил ли персонаж в заданной зоне.\nПринимаемые значения:\npedhandle ped Хендл персонажа.\n\nВозвращаемые значения:\nbool result Результат проверки.\n"
},
"→︎ Проверяет держит ли игрок в руках указанное оружие.": {
    "scope": "lua",
    "prefix": "isCurrentCharWeapon",
    "body": [
        "${1:bool result} = isCurrentCharWeapon(${0:Ped ped, int weapon})"
    ],
    "description": "isCurrentCharWeapon - Проверяет держит ли игрок в руках указанное оружие.\nПринимаемые значения:\nPed ped хэндл персонажа, int weapon ид оружия\n\nВозвращаемые значения:\nbool result Результат проверки\n"
},
"→︎ Устанавливает максимальную скорость лодки.": {
    "scope": "lua",
    "prefix": "setBoatCruiseSpeed",
    "body": [
        "setBoatCruiseSpeed(${0:Vehicle boat, float maxSpeed})"
    ],
    "description": "setBoatCruiseSpeed - Устанавливает максимальную скорость лодки.\nПринимаемые значения:\nVehicle boat скриптовый хэндл транспортного средства, float maxSpeed максимальная скорость автомобиля\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет выстрелил ли персонаж.": {
    "scope": "lua",
    "prefix": "isCharShooting",
    "body": [
        "${1:bool result} = isCharShooting(${0:Ped ped})"
    ],
    "description": "isCharShooting - Проверяет выстрелил ли персонаж.\nПринимаемые значения:\nPed ped Хендл персонажа\\\\\n\nВозвращаемые значения:\nbool result Результат проверки\\\\\n"
},
"→︎ Получает скорость машины по ее хендлу.": {
    "scope": "lua",
    "prefix": "getCarSpeed",
    "body": [
        "${1:float speed} = getCarSpeed(${0:Vehicle car})"
    ],
    "description": "getCarSpeed - Получает скорость машины по ее хендлу.\nПринимаемые значения:\nVehicle car Хендл машины\n\nВозвращаемые значения:\nfloat speed Скорость машины\n"
},
"→︎ Восстанавливает камеру в исходное положение": {
    "scope": "lua",
    "prefix": "restoreCameraJumpcut",
    "body": [
        "restoreCameraJumpcut()"
    ],
    "description": "restoreCameraJumpcut - Восстанавливает камеру в исходное положение\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Сверяет модель персонажа с указанной.": {
    "scope": "lua",
    "prefix": "isCharModel",
    "body": [
        "${1:bool result} = isCharModel(${0:pedhandle ped, model model})"
    ],
    "description": "isCharModel - Сверяет модель персонажа с указанной.\nПринимаемые значения:\npedhandle ped Хендл персонажа., model model Номер модели.\n\nВозвращаемые значения:\nbool result Результат проверки.\n"
},
"→︎ Проверяет с указанного оружия было попадание по персонажу.": {
    "scope": "lua",
    "prefix": "hasCharBeenDamagedByWeapon",
    "body": [
        "${1:bool result} = hasCharBeenDamagedByWeapon(${0:Ped ped, int weapon})"
    ],
    "description": "hasCharBeenDamagedByWeapon - Проверяет с указанного оружия было попадание по персонажу.\nПринимаемые значения:\nPed ped хендл персонажа, int weapon ID оружия\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет с указанного ли оружия было попадание в машину.": {
    "scope": "lua",
    "prefix": "hasCarBeenDamagedByWeapon",
    "body": [
        "${1:bool result} = hasCarBeenDamagedByWeapon(${0:Vehicle car, int weapon})"
    ],
    "description": "hasCarBeenDamagedByWeapon - Проверяет с указанного ли оружия было попадание в машину.\nПринимаемые значения:\nVehicle car хендл машины, int weapon ID оружия\n\nВозвращаемые значения:\nbool result Результат проверки\n"
},
"→︎ Устанавливает режим камеры": {
    "scope": "lua",
    "prefix": "setCameraZoom",
    "body": [
        "setCameraZoom(${0:int mode})"
    ],
    "description": "setCameraZoom - Устанавливает режим камеры\nПринимаемые значения:\nint mode режим камеры 0/1/2\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает, может ли игрок устать.": {
    "scope": "lua",
    "prefix": "setPlayerNeverGetsTired",
    "body": [
        "setPlayerNeverGetsTired(${0:Player player, bool infiniteRun})"
    ],
    "description": "setPlayerNeverGetsTired - Устанавливает, может ли игрок устать.\nПринимаемые значения:\nPlayer player скриптовый хендл игрока, bool infiniteRun может ли игрок устать (true-не может, false-может)\n\nВозвращаемые значения:\n\n"
},
"→︎ Игроку не нужно будет перезаряжаться.": {
    "scope": "lua",
    "prefix": "setPlayerFastReload",
    "body": [
        "setPlayerFastReload(${0:Player player, bool fastReload})"
    ],
    "description": "setPlayerFastReload - Игроку не нужно будет перезаряжаться.\nПринимаемые значения:\nPlayer player хендл игрока, bool fastReload true - включить, false - выключить\n\nВозвращаемые значения:\n\n"
},
"→︎ Начинает кровотечение у персонажа": {
    "scope": "lua",
    "prefix": "setCharBleeding",
    "body": [
        "setCharBleeding(${0:Ped ped, bool bleeding})"
    ],
    "description": "setCharBleeding - Начинает кровотечение у персонажа\nПринимаемые значения:\nPed ped скриптовый хендл игрового персонажа, bool bleeding течение крови(true-течёт, false-не течёт)\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает актёру невидимость": {
    "scope": "lua",
    "prefix": "setCharVisible",
    "body": [
        "setCharVisible(${0:Ped ped, bool visible})"
    ],
    "description": "setCharVisible - Устанавливает актёру невидимость\nПринимаемые значения:\nPed ped актёр, bool visible значение невидимости\n\nВозвращаемые значения:\n\n"
},
"→︎ Выдаёт броню персонажу": {
    "scope": "lua",
    "prefix": "addArmourToChar",
    "body": [
        "addArmourToChar(${0:Ped ped, int points})"
    ],
    "description": "addArmourToChar - Выдаёт броню персонажу\nПринимаемые значения:\nPed ped скриптовый хендл игрового персонажа, int points количество выданной брони\n\nВозвращаемые значения:\n\n"
},
"→︎ Вытаскивает персонажа из машины на указанные координаты.": {
    "scope": "lua",
    "prefix": "warpCharFromCarToCoord",
    "body": [
        "warpCharFromCarToCoord(${0:Ped ped, float placeAtX, float placeAtY, float placeAtZ})"
    ],
    "description": "warpCharFromCarToCoord - Вытаскивает персонажа из машины на указанные координаты.\nПринимаемые значения:\nPed ped хендл персонажа, float placeAtX, float placeAtY, float placeAtZ координаты XYZ.\n\nВозвращаемые значения:\n\n"
},
"→︎ Помещает педа в указанный транспорт": {
    "scope": "lua",
    "prefix": "warpCharIntoCar",
    "body": [
        "warpCharIntoCar(${0:Ped ped, Vehicle car})"
    ],
    "description": "warpCharIntoCar - Помещает педа в указанный транспорт\nПринимаемые значения:\nPed ped хендл педа/актера, Vehicle car хендл транспорта\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает камеру позади игрока": {
    "scope": "lua",
    "prefix": "setCameraBehindPlayer",
    "body": [
        "setCameraBehindPlayer()"
    ],
    "description": "setCameraBehindPlayer - Устанавливает камеру позади игрока\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Создает персонажа в заданных координатах с рандомной моделью и поведением пешехода.": {
    "scope": "lua",
    "prefix": "createRandomChar",
    "body": [
        "${1:Ped ped} = createRandomChar(${0:float atX, float atY, float atZ})"
    ],
    "description": "createRandomChar - Создает персонажа в заданных координатах с рандомной моделью и поведением пешехода.\nПринимаемые значения:\nfloat atX, float atY, float atZ координаты персонажа (XYZ).\n\nВозвращаемые значения:\nPed ped хэндл персонажа.\n"
},
"→︎ Устанавливает коллизию определенному объекту.": {
    "scope": "lua",
    "prefix": "setObjectCollision",
    "body": [
        "setObjectCollision(${0:Object object, bool collision})"
    ],
    "description": "setObjectCollision - Устанавливает коллизию определенному объекту.\nПринимаемые значения:\nObject object хэндл объекта, bool collision состояние\n\nВозвращаемые значения:\n\n"
},
"→︎ Загрузка ранее запрошенных моделей": {
    "scope": "lua",
    "prefix": "loadAllModelsNow",
    "body": [
        "loadAllModelsNow()"
    ],
    "description": "loadAllModelsNow - Загрузка ранее запрошенных моделей\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает скорость анимации персонажу": {
    "scope": "lua",
    "prefix": "setCharAnimSpeed",
    "body": [
        "setCharAnimSpeed(${0:Ped ped, string animation, float speed})"
    ],
    "description": "setCharAnimSpeed - Устанавливает скорость анимации персонажу\nПринимаемые значения:\nPed ped хэндл персонажа, string animation название анимации, float speed скорость анимации\n\nВозвращаемые значения:\n\n"
},
"→︎ Включает/выключает сирену на автомобиле": {
    "scope": "lua",
    "prefix": "switchCarSiren",
    "body": [
        "switchCarSiren(${0:Vehicle car, bool siren})"
    ],
    "description": "switchCarSiren - Включает/выключает сирену на автомобиле\nПринимаемые значения:\nVehicle car скриптовый хендл автомобиля, bool siren состояние сирены(true-включена, false-выключена)\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет является ли персонаж мужским.": {
    "scope": "lua",
    "prefix": "isCharMale",
    "body": [
        "${1:bool result} = isCharMale(${0:Ped ped})"
    ],
    "description": "isCharMale - Проверяет является ли персонаж мужским.\nПринимаемые значения:\nPed ped хэндл персонажа.\n\nВозвращаемые значения:\nbool result результат проверки.\n"
},
"→︎ Устанавливает игнорирование пешеходов к игроку.": {
    "scope": "lua",
    "prefix": "setEveryoneIgnorePlayer",
    "body": [
        "setEveryoneIgnorePlayer(${0:Player player, bool ignored})"
    ],
    "description": "setEveryoneIgnorePlayer - Устанавливает игнорирование пешеходов к игроку.\nПринимаемые значения:\nPlayer player хендл, bool ignored true - включить игнорирование, false - выключить игнорирование\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает хендл машины, используемый педом.": {
    "scope": "lua",
    "prefix": "storeCarCharIsInNoSave",
    "body": [
        "${1:Vehicle car} = storeCarCharIsInNoSave(${0:Ped ped})"
    ],
    "description": "storeCarCharIsInNoSave - Возвращает хендл машины, используемый педом.\nПринимаемые значения:\nPed ped хендл педа/актера\n\nВозвращаемые значения:\nVehicle car хендл машины\n"
},
"→︎ Помещает камеру перед игроком, указывая на игрока.": {
    "scope": "lua",
    "prefix": "setCameraInFrontOfPlayer",
    "body": [
        "setCameraInFrontOfPlayer()"
    ],
    "description": "setCameraInFrontOfPlayer - Помещает камеру перед игроком, указывая на игрока.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, существует ли объект, возвращает true если объект существует": {
    "scope": "lua",
    "prefix": "doesObjectExist",
    "body": [
        "${1:bool result} = doesObjectExist(${0:Object object})"
    ],
    "description": "doesObjectExist - Проверяет, существует ли объект, возвращает true если объект существует\nПринимаемые значения:\nObject object хэндл объекта\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Создает маркер над пикапом.": {
    "scope": "lua",
    "prefix": "addBlipForPickup",
    "body": [
        "${1:markerhandle marker} = addBlipForPickup(${0:pickuphandle pickup})"
    ],
    "description": "addBlipForPickup - Создает маркер над пикапом.\nПринимаемые значения:\npickuphandle pickup Хендл пикапа.\n\nВозвращаемые значения:\nmarkerhandle marker Хендл маркера.\n"
},
"→︎ Получает цвета автомобиля.": {
    "scope": "lua",
    "prefix": "getCarColours",
    "body": [
        "${1:int primaryColor, int secondaryColor} = getCarColours(${0:carhandle car})"
    ],
    "description": "getCarColours - Получает цвета автомобиля.\nПринимаемые значения:\ncarhandle car Хендл машины.\n\nВозвращаемые значения:\nint primaryColor Первичный цвет., int secondaryColor Вторичный цвет.\n"
},
"→︎ Определяет, будут ли с игрока после смерти взымать деньги за лечение.": {
    "scope": "lua",
    "prefix": "setFreeHealthCare",
    "body": [
        "setFreeHealthCare(${0:Player player, bool free})"
    ],
    "description": "setFreeHealthCare - Определяет, будут ли с игрока после смерти взымать деньги за лечение.\nПринимаемые значения:\nPlayer player скриптовый хендл игрока, bool free возможность бесплатного лечения(true-бесплатно, false-платно)\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает количество патронов у персонажа.": {
    "scope": "lua",
    "prefix": "getAmmoInCharWeapon",
    "body": [
        "${1:int ammo} = getAmmoInCharWeapon(${0:Ped ped, int int})"
    ],
    "description": "getAmmoInCharWeapon - Получает количество патронов у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа, int int ID оружия\n\nВозвращаемые значения:\nint ammo количество патронов\n"
},
"→︎ Устанавливает радиостанцию, играющую в машине.": {
    "scope": "lua",
    "prefix": "setRadioChannel",
    "body": [
        "setRadioChannel(${0:int radioStation})"
    ],
    "description": "setRadioChannel - Устанавливает радиостанцию, играющую в машине.\nПринимаемые значения:\nint radioStation номер радиостанции(0-12)\n\nВозвращаемые значения:\n\n"
},
"→︎ Телепортирует персонажа в автомобиль на выбранное сидение": {
    "scope": "lua",
    "prefix": "warpCharIntoCarAsPassenger",
    "body": [
        "warpCharIntoCarAsPassenger(${0:Ped ped, Vehicle car, int passengerSeat})"
    ],
    "description": "warpCharIntoCarAsPassenger - Телепортирует персонажа в автомобиль на выбранное сидение\nПринимаемые значения:\nPed ped хэндл персонажа, Vehicle car хэндл машины, int passengerSeat номер сидения\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, доступно ли пассажирское сидение": {
    "scope": "lua",
    "prefix": "isCarPassengerSeatFree",
    "body": [
        "${1:bool result} = isCarPassengerSeatFree(${0:vehicle car, int seat})"
    ],
    "description": "isCarPassengerSeatFree - Проверяет, доступно ли пассажирское сидение\nПринимаемые значения:\nvehicle car хэндл транспорта, int seat номер сидения\n\nВозвращаемые значения:\nbool result результат проверки\\\\\n"
},
"→︎ Получает хэндл игрока, который сидит на сидении транспортного средства": {
    "scope": "lua",
    "prefix": "getCharInCarPassengerSeat",
    "body": [
        "${1:Ped ped} = getCharInCarPassengerSeat(${0:Vehicle car, int seat})"
    ],
    "description": "getCharInCarPassengerSeat - Получает хэндл игрока, который сидит на сидении транспортного средства\nПринимаемые значения:\nVehicle car хэндл машины, int seat номер сидения\n\nВозвращаемые значения:\nPed ped хэндл персонажа\n"
},
"→︎ Вызывает титры после прохождения игры на экран.": {
    "scope": "lua",
    "prefix": "startCredits",
    "body": [
        "startCredits()"
    ],
    "description": "startCredits - Вызывает титры после прохождения игры на экран.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Убирает титры после прохождения игры с экрана.": {
    "scope": "lua",
    "prefix": "stopCredits",
    "body": [
        "stopCredits()"
    ],
    "description": "stopCredits - Убирает титры после прохождения игры с экрана.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, закончились ли титры окончания игры.": {
    "scope": "lua",
    "prefix": "areCreditsFinished",
    "body": [
        "${1:bool result} = areCreditsFinished()"
    ],
    "description": "areCreditsFinished - Проверяет, закончились ли титры окончания игры.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result Результат проверки\n"
},
"→︎ Возвращает ID транспорта по хендл машины": {
    "scope": "lua",
    "prefix": "getCarModel",
    "body": [
        "${1:Model modelId} = getCarModel(${0:Vehicle veh})"
    ],
    "description": "getCarModel - Возвращает ID транспорта по хендл машины\nПринимаемые значения:\nVehicle veh хендл машины\n\nВозвращаемые значения:\nModel modelId ID транспорта\n"
},
"→︎ Проверяет, сидит ли хэндл в указанном т/c": {
    "scope": "lua",
    "prefix": "isCharSittingInCar",
    "body": [
        "${1:bool result} = isCharSittingInCar(${0:Ped ped, Vehicle car})"
    ],
    "description": "isCharSittingInCar - Проверяет, сидит ли хэндл в указанном т/c\nПринимаемые значения:\nPed ped хэндл персонажа игрока, Vehicle car хэндл т/с\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Проверяет находится ли игрок в любой машине": {
    "scope": "lua",
    "prefix": "isCharSittingInAnyCar",
    "body": [
        "${1:bool result} = isCharSittingInAnyCar(${0:Ped ped})"
    ],
    "description": "isCharSittingInAnyCar - Проверяет находится ли игрок в любой машине\nПринимаемые значения:\nPed ped хэндл\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Возвращает позицию отладочной камеры.": {
    "scope": "lua",
    "prefix": "getDebugCameraCoordinates",
    "body": [
        "${1:float X, float Y, float Z} = getDebugCameraCoordinates()"
    ],
    "description": "getDebugCameraCoordinates - Возвращает позицию отладочной камеры.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nfloat X ,, float Y ,, float Z координаты\n"
},
"→︎ Возвращает координаты на которые указывает отладочная камера.": {
    "scope": "lua",
    "prefix": "getDebugCameraPointAt",
    "body": [
        "${1:float X, float Y, float Z} = getDebugCameraPointAt()"
    ],
    "description": "getDebugCameraPointAt - Возвращает координаты на которые указывает отладочная камера.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nfloat X ,, float Y ,, float Z координаты\n"
},
"→︎ Очищает последний урон нанесённый персонажу.": {
    "scope": "lua",
    "prefix": "clearCharLastWeaponDamage",
    "body": [
        "clearCharLastWeaponDamage(${0:Ped ped})"
    ],
    "description": "clearCharLastWeaponDamage - Очищает последний урон нанесённый персонажу.\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\n\n"
},
"→︎ Очищает последний нанесенный урон машине.": {
    "scope": "lua",
    "prefix": "clearCarLastWeaponDamage",
    "body": [
        "clearCarLastWeaponDamage(${0:Vehicle car})"
    ],
    "description": "clearCarLastWeaponDamage - Очищает последний нанесенный урон машине.\nПринимаемые значения:\nVehicle car хендл машины\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает водителя указанного транспортного средства": {
    "scope": "lua",
    "prefix": "getDriverOfCar",
    "body": [
        "${1:Ped ped} = getDriverOfCar(${0:Vehicle car})"
    ],
    "description": "getDriverOfCar - Возвращает водителя указанного транспортного средства\nПринимаемые значения:\nVehicle car скриптовый хендл транспортного средства\n\nВозвращаемые значения:\nPed ped скриптовый хендл персонажа\n"
},
"→︎ Получает оружие находящееся в руках у персонажа.": {
    "scope": "lua",
    "prefix": "getCurrentCharWeapon",
    "body": [
        "${1:int weapon} = getCurrentCharWeapon(${0:Ped ped})"
    ],
    "description": "getCurrentCharWeapon - Получает оружие находящееся в руках у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\nint weapon оружие\n"
},
"→︎ Возвращает true если пед находится на мотоцикле/велосипеде": {
    "scope": "lua",
    "prefix": "isCharOnAnyBike",
    "body": [
        "${1:bool result} = isCharOnAnyBike(${0:Ped ped})"
    ],
    "description": "isCharOnAnyBike - Возвращает true если пед находится на мотоцикле/велосипеде\nПринимаемые значения:\nPed ped хендл педа/актера\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Проверяет доступна ли модель для использования.": {
    "scope": "lua",
    "prefix": "isModelAvailable",
    "body": [
        "${1:bool result} = isModelAvailable(${0:model model})"
    ],
    "description": "isModelAvailable - Проверяет доступна ли модель для использования.\nПринимаемые значения:\nmodel model Номер модели.\n\nВозвращаемые значения:\nbool result Результат.\n"
},
"→︎ Проверяет есть ли на указанных координатах любой пикап.": {
    "scope": "lua",
    "prefix": "isAnyPickupAtCoords",
    "body": [
        "${1:bool result} = isAnyPickupAtCoords(${0:float pickupX, float pickupY, float pickupZ})"
    ],
    "description": "isAnyPickupAtCoords - Проверяет есть ли на указанных координатах любой пикап.\nПринимаемые значения:\nfloat pickupX , float pickupY , float pickupZ Координаты (XYZ)\n\nВозвращаемые значения:\nbool result Результат.\n"
},
"→︎ Удаляет все оружие у персонажа.": {
    "scope": "lua",
    "prefix": "removeAllCharWeapons",
    "body": [
        "removeAllCharWeapons(${0:Ped ped})"
    ],
    "description": "removeAllCharWeapons - Удаляет все оружие у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет наличие указанного оружия у персонажа.": {
    "scope": "lua",
    "prefix": "hasCharGotWeapon",
    "body": [
        "${1:bool result} = hasCharGotWeapon(${0:Ped ped, int weapon})"
    ],
    "description": "hasCharGotWeapon - Проверяет наличие указанного оружия у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа, int weapon ID оружия\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Проверяет, горит ли автомобиль.": {
    "scope": "lua",
    "prefix": "isCarOnFire",
    "body": [
        "${1:bool state} = isCarOnFire(${0:Vehicle car})"
    ],
    "description": "isCarOnFire - Проверяет, горит ли автомобиль.\nПринимаемые значения:\nVehicle car хендл машины\n\nВозвращаемые значения:\nbool state состояние автомобиля\n"
},
"→︎ Возвращает true при спущенном колесе автомобиля": {
    "scope": "lua",
    "prefix": "isCarTireBurst",
    "body": [
        "${1:bool result} = isCarTireBurst(${0:Vehicle car, int tire})"
    ],
    "description": "isCarTireBurst - Возвращает true при спущенном колесе автомобиля\nПринимаемые значения:\nVehicle car автомобиль, int tire номер колеса\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Проверяет педа на нахождение в т/c типа 'Лодка'": {
    "scope": "lua",
    "prefix": "isCharInAnyBoat",
    "body": [
        "${1:bool result} = isCharInAnyBoat(${0:Ped ped})"
    ],
    "description": "isCharInAnyBoat - Проверяет педа на нахождение в т/c типа 'Лодка'\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Проверяет педа на нахождение в т/с типа 'Вертолет'": {
    "scope": "lua",
    "prefix": "isCharInAnyHeli",
    "body": [
        "${1:bool result} = isCharInAnyHeli(${0:Ped ped})"
    ],
    "description": "isCharInAnyHeli - Проверяет педа на нахождение в т/с типа 'Вертолет'\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Проверяет хэндл на нахождение в т/с типа 'Самолёт'": {
    "scope": "lua",
    "prefix": "isCharInAnyPlane",
    "body": [
        "${1:bool result} = isCharInAnyPlane(${0:Ped ped})"
    ],
    "description": "isCharInAnyPlane - Проверяет хэндл на нахождение в т/с типа 'Самолёт'\nПринимаемые значения:\nPed ped хэндл\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Проверяет педа на нахождение в воде": {
    "scope": "lua",
    "prefix": "isCharInWater",
    "body": [
        "${1:bool result} = isCharInWater(${0:Ped ped})"
    ],
    "description": "isCharInWater - Проверяет педа на нахождение в воде\nПринимаемые значения:\nPed ped хэндл игрока\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Получает данные об оружии в указанном слоте.": {
    "scope": "lua",
    "prefix": "getCharWeaponInSlot",
    "body": [
        "${1:int weapon, int ammo, Model Model} = getCharWeaponInSlot(${0:Ped ped, int slot})"
    ],
    "description": "getCharWeaponInSlot - Получает данные об оружии в указанном слоте.\nПринимаемые значения:\nPed ped хендл персонажа, int slot номер слота\n\nВозвращаемые значения:\nint weapon ID оружия, int ammo количество патронов к оружию, Model model модель оружия\n"
},
"→︎ Возвращает позицию педа с указанным смещением": {
    "scope": "lua",
    "prefix": "getOffsetFromCharInWorldCoords",
    "body": [
        "${1:float X, float Y, float Z} = getOffsetFromCharInWorldCoords(${0:Ped ped, float offsetX, float offsetY, float offsetZ})"
    ],
    "description": "getOffsetFromCharInWorldCoords - Возвращает позицию педа с указанным смещением\nПринимаемые значения:\nPed ped хендл педа/актера, float offsetX смещение по оси X, float offsetY смещение по оси Y, float offsetZ смещение по оси Z\n\nВозвращаемые значения:\nfloat X позиция по оси X, float Y позиция по оси Y, float Z позиция по оси Z\n"
},
"→︎ Замораживает координаты персонажа по его хендлу": {
    "scope": "lua",
    "prefix": "freezeCharPosition",
    "body": [
        "freezeCharPosition(${0:Ped ped, bool locked})"
    ],
    "description": "freezeCharPosition - Замораживает координаты персонажа по его хендлу\nПринимаемые значения:\nPed ped Хендл персонажа, bool locked Статус заморозки\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает количество брони у педа": {
    "scope": "lua",
    "prefix": "getCharArmour",
    "body": [
        "${1:int armour} = getCharArmour(${0:Ped ped})"
    ],
    "description": "getCharArmour - Возвращает количество брони у педа\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\nint armour значение брони\n"
},
"→︎ Проверяет нахождение объекта в указанных координат в определенном радиусе (2d)": {
    "scope": "lua",
    "prefix": "locateObject2d",
    "body": [
        "${1:bool result} = locateObject2d(${0:Object object, float X, float Y, float radiusX, float radiusY, bool sphere})"
    ],
    "description": "locateObject2d - Проверяет нахождение объекта в указанных координат в определенном радиусе\nПринимаемые значения:\nObject object , float X Позиция по оси X, float Y Позиция по оси Y, float Z Позиция по оси Z, float radiusX Дистанция проверки по оси X, float radiusY Дистанция проверки по оси Y, bool sphere Отображать проверяемую дистанцию в виде сферы\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Проверяет нахождение объекта в указанных координат в определенном радиусе (3d)": {
    "scope": "lua",
    "prefix": "locateObject3d",
    "body": [
        "${1:bool result} = locateObject3d(${0:Object object, float X, float Y, float Z, float radiusX, float radiusY, float radiusZ, bool flag})"
    ],
    "description": "locateObject3d - Проверяет нахождение объекта в указанных координат в определенном радиусе\nПринимаемые значения:\nObject object , float X Позиция по оси X, float Y Позиция по оси Y, float Z Позиция по оси Z, float radiusX Дистанция проверки по оси X, float radiusY Дистанция проверки по оси Y, float radiusZ Дистанция проверки по оси Z, bool sphere Отображать проверяемую дистанцию в виде сферы\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Проверяет нахождение объекта в воде": {
    "scope": "lua",
    "prefix": "isObjectInWater",
    "body": [
        "${1:bool result} = isObjectInWater(${0:Object object})"
    ],
    "description": "isObjectInWater - Проверяет нахождение объекта в воде\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Проверяет нахождение объекта в указанном квадрате": {
    "scope": "lua",
    "prefix": "isObjectInArea2d",
    "body": [
        "${1:bool result} = isObjectInArea2d(${0:Object object, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
    ],
    "description": "isObjectInArea2d - Проверяет нахождение объекта в указанном квадрате\nПринимаемые значения:\nObject object , float cornerAX Начальная координата по оси X, float cornerAY Начальная координата по оси Y, float cornerBX Конечная координата по оси X, float cornerBY Конечная координата по оси Y, bool sphere Отображать границы квадрата в виде сферы\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Проверяет нахождение объекта в указанном кубе": {
    "scope": "lua",
    "prefix": "isObjectInArea3d",
    "body": [
        "${1:bool result} = isObjectInArea3d(${0:Object object, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool flag})"
    ],
    "description": "isObjectInArea3d - Проверяет нахождение объекта в указанном кубе\nПринимаемые значения:\nObject object , float cornerAX Начальная координата по оси X, float cornerAY Начальная координата по оси Y, float cornerAZ Начальная координата по оси Z, float cornerBX Конечная координата по оси X, float cornerBY Конечная координата по оси Y, float cornerBZ Конечная координата по оси Z, bool flag Отображать границы куба в виде сферы\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Предварительная загрузка файла анимации": {
    "scope": "lua",
    "prefix": "requestAnimation",
    "body": [
        "requestAnimation(${0:string animation})"
    ],
    "description": "requestAnimation - Предварительная загрузка файла анимации\nПринимаемые значения:\nstring animation файл анимаций\\\\\n\nВозвращаемые значения:\n\n"
},
"→︎ Получение дистанции между двумя точками в игровом мире (3D)": {
    "scope": "lua",
    "prefix": "getDistanceBetweenCoords3d",
    "body": [
        "${1:float distance} = getDistanceBetweenCoords3d(${0:float x1,float y1,float z1,float x2,float y2,float z2})"
    ],
    "description": "getDistanceBetweenCoords3d - Получение дистанции между двумя точками в игровом мире (3D)\nПринимаемые значения:\nfloat x1, float y1, float z1 координаты первой точки, float x2, float y2, float z2 координаты второй точки\n\nВозвращаемые значения:\nfloat distance дистанция\n"
},
"→︎ Удаляет указанное оружие у персонажа.": {
    "scope": "lua",
    "prefix": "removeWeaponFromChar",
    "body": [
        "removeWeaponFromChar(${0:Ped ped, int weapon})"
    ],
    "description": "removeWeaponFromChar - Удаляет указанное оружие у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа, int weapon ID оружия\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет управляет ли хэндл полицейской машиной": {
    "scope": "lua",
    "prefix": "isCharInAnyPoliceVehicle",
    "body": [
        "${1:bool result} = isCharInAnyPoliceVehicle(${0:Ped ped})"
    ],
    "description": "isCharInAnyPoliceVehicle - Проверяет управляет ли хэндл полицейской машиной\nПринимаемые значения:\nPed ped хэндл\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Проверяет хэндл на существование": {
    "scope": "lua",
    "prefix": "doesCharExist",
    "body": [
        "${1:bool result} = doesCharExist(${0:Ped ped})"
    ],
    "description": "doesCharExist - Проверяет хэндл на существование\nПринимаемые значения:\nPed ped хэндл\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Проверяет существование транспорта.": {
    "scope": "lua",
    "prefix": "doesVehicleExist",
    "body": [
        "${1:bool result} = doesVehicleExist(${0:Vehicle car})"
    ],
    "description": "doesVehicleExist - Проверяет существование транспорта.\nПринимаемые значения:\nVehicle car хэндл транспорта\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Устанавливает на все такси нитро.": {
    "scope": "lua",
    "prefix": "setAllTaxisHaveNitro",
    "body": [
        "setAllTaxisHaveNitro(${0:bool toggle})"
    ],
    "description": "setAllTaxisHaveNitro - Устанавливает на все такси нитро.\nПринимаемые значения:\nbool toggle true - установить, false - снять\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет смерть персонажа по его хендлу": {
    "scope": "lua",
    "prefix": "taskDie",
    "body": [
        "taskDie(${0:Ped ped})"
    ],
    "description": "taskDie - Отправляет смерть персонажа по его хендлу\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\n\n"
},
"→︎ Воспроизводит анимацию где персонаж стоит расслабленно и смотрит по сторонам": {
    "scope": "lua",
    "prefix": "taskScratchHead",
    "body": [
        "taskScratchHead(${0:Ped ped})"
    ],
    "description": "taskScratchHead - Воспроизводит анимацию где персонаж стоит расслабленно и смотрит по сторонам\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\n\n"
},
"→︎ Заставляет актёра ехать на координаты определенным способом": {
    "scope": "lua",
    "prefix": "taskCarDriveToCoord",
    "body": [
        "taskCarDriveToCoord(${0:Ped ped, Vehicle car, float toX, float toY, float toZ, float speed, int rideType, int model, int driveType})"
    ],
    "description": "taskCarDriveToCoord - Заставляет актёра ехать на координаты определенным способом\nПринимаемые значения:\nPed ped хендл игрока, Vehicle car хендл транспорта, float toX, float toY, float toZ позиция к которой начнет ехать актёр, float speed скорость с которой машина будет ехать, int rideType Способ езды:, int model модель чего-то, int driveType Тип вождения:\n\nВозвращаемые значения:\n\n"
},
"→︎ Заставляет актёра воспроизвести / сбить анимацию.": {
    "scope": "lua",
    "prefix": "taskPlayAnim",
    "body": [
        "taskPlayAnim(${0:Ped ped, string animation, string IFP, float framedelta, bool loop, bool lockX, bool lockY, bool lockF, int time})"
    ],
    "description": "taskPlayAnim - Заставляет актёра воспроизвести / сбить анимацию.\nПринимаемые значения:\nPed ped хендл персонажа, string animation имя анимации, string IFP файл анимации, float framedelta скорость анимации, bool loop повторение анимации (true - да, false - нет), bool lockX, bool lockY блокировка позиций по X,Y (true - да, false - нет), bool lockF возврат в исходное положение (true - возвращать, false - не возвращать), int time время воспроизведения\n\nВозвращаемые значения:\n\n"
},
"→︎ Создает маркер поведения актера с заданным типом.": {
    "scope": "lua",
    "prefix": "loadCharDecisionMaker",
    "body": [
        "${1:int maker} = loadCharDecisionMaker(${0:int type})"
    ],
    "description": "loadCharDecisionMaker - Создает маркер поведения актера с заданным типом.\nПринимаемые значения:\nint type тип поведения\\\\\n\nВозвращаемые значения:\nint maker маркер модели поведения\\\\\n"
},
"→︎ проверяет, выполняет ли пед указанную анимацию.": {
    "scope": "lua",
    "prefix": "isCharPlayingAnim",
    "body": [
        "${1:bool result} = isCharPlayingAnim(${0:Ped ped, string anim})"
    ],
    "description": "isCharPlayingAnim - проверяет, выполняет ли пед указанную анимацию.\nПринимаемые значения:\nPed ped хэндл персонажа, string anim название анимации\n\nВозвращаемые значения:\nbool result Результат проверки\n"
},
"→︎ Устанавливает коллизию персонажу.": {
    "scope": "lua",
    "prefix": "setCharCollision",
    "body": [
        "setCharCollision(${0:Ped ped, bool enable})"
    ],
    "description": "setCharCollision - Устанавливает коллизию персонажу.\nПринимаемые значения:\nPed ped Хэндл персонажа, bool enable Статус (true\\\\false)\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает координаты пикапа": {
    "scope": "lua",
    "prefix": "getPickupCoordinates",
    "body": [
        "${1:float X, float Y, float Z} = getPickupCoordinates(${0:Pickup pickup})"
    ],
    "description": "getPickupCoordinates - Возвращает координаты пикапа\nПринимаемые значения:\nPickup pickup хэндл пикапа\n\nВозвращаемые значения:\nfloat X - X координата, float Y - Y координата, float Z - Z координата\n"
},
"→︎ Возвращает ID скина по хэндлу персонажа.": {
    "scope": "lua",
    "prefix": "getCharModel",
    "body": [
        "${1:int modelId} = getCharModel(${0:Ped ped})"
    ],
    "description": "getCharModel - Возвращает ID скина по хэндлу персонажа.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nint modelId ID скина\n"
},
"→︎ Скрывает все оружие у персонажа.": {
    "scope": "lua",
    "prefix": "hideCharWeaponForScriptedCutscene",
    "body": [
        "hideCharWeaponForScriptedCutscene(${0:Ped ped, bool hide})"
    ],
    "description": "hideCharWeaponForScriptedCutscene - Скрывает все оружие у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа, bool hide будет ли скрыто оружие(true/false)\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает скорость движения персонажа по его хендлу.": {
    "scope": "lua",
    "prefix": "getCharSpeed",
    "body": [
        "${1:float speed} = getCharSpeed(${0:Ped ped})"
    ],
    "description": "getCharSpeed - Получает скорость движения персонажа по его хендлу.\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\nfloat speed Значение скорости\n"
},
"→︎ Делает проверку на наличие обьектов определенных типов между точками в трёхмерном пространстве": {
    "scope": "lua",
    "prefix": "isLineOfSightClear",
    "body": [
        "${1:bool result} = isLineOfSightClear(${0:float fromX, float fromY, float fromZ, float toX, float toY, float toZ, bool checkBuildings, bool checkVehicles, bool checkActors, bool checkObjects, bool checkParticles})"
    ],
    "description": "isLineOfSightClear - Делает проверку на наличие обьектов определенных типов между точками в трёхмерном пространстве\nПринимаемые значения:\nfloat fromX, float fromY, float fromZ координаты первой точки, float toX, float toY, float toZ координаты второй точки, bool checkBuildings учитывать здания, bool checkVehicles учитывать транспортные средства, bool checkActors учитывать игроков, bool checkObjects учитывать объекты, bool checkParticles учитывать частицы\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Включает/выключает восстание в Лос-Сантосе, люди воруют вещи, над домами появляется дым.": {
    "scope": "lua",
    "prefix": "setLaRiots",
    "body": [
        "setLaRiots(${0:bool enable})"
    ],
    "description": "setLaRiots - Включает/выключает восстание в Лос-Сантосе, люди воруют вещи, над домами появляется дым.\nПринимаемые значения:\nbool enable true - включить, false - выключить\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает уровень здоровья объекта.": {
    "scope": "lua",
    "prefix": "getObjectHealth",
    "body": [
        "${1:int health} = getObjectHealth(${0:objhandle object})"
    ],
    "description": "getObjectHealth - Получает уровень здоровья объекта.\nПринимаемые значения:\nobjhandle object Хендл объекта.\n\nВозвращаемые значения:\nint health Уровень здоровья.\n"
},
"→︎ Устанавливает уровень здоровья объекту.": {
    "scope": "lua",
    "prefix": "setObjectHealth",
    "body": [
        "setObjectHealth(${0:objhandle object, int health})"
    ],
    "description": "setObjectHealth - Устанавливает уровень здоровья объекту.\nПринимаемые значения:\nobjhandle object Хендл объекта., int health Уровень здоровья.\n\nВозвращаемые значения:\n\n"
},
"→︎ Функция получает айди интерьера, в котором находится Ваш персонаж": {
    "scope": "lua",
    "prefix": "getActiveInterior",
    "body": [
        "${1:int interior} = getActiveInterior()"
    ],
    "description": "getActiveInterior - Функция получает айди интерьера, в котором находится Ваш персонаж\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint interior Айди интерьера\n"
},
"→︎ Получает модель оружия из его ID.": {
    "scope": "lua",
    "prefix": "getWeapontypeModel",
    "body": [
        "${1:int Model} = getWeapontypeModel(${0:int id})"
    ],
    "description": "getWeapontypeModel - Получает модель оружия из его ID.\nПринимаемые значения:\nint id ID оружия\n\nВозвращаемые значения:\nint model номер модели\n"
},
"→︎ Возвращает слот указанного оружия.": {
    "scope": "lua",
    "prefix": "getWeapontypeSlot",
    "body": [
        "${1:int slot} = getWeapontypeSlot(${0:int id})"
    ],
    "description": "getWeapontypeSlot - Возвращает слот указанного оружия.\nПринимаемые значения:\nint id ID оружия\n\nВозвращаемые значения:\nint slot номер слота\n"
},
"→︎ Выдает джетпак персонажу по его хендлу": {
    "scope": "lua",
    "prefix": "taskJetpack",
    "body": [
        "taskJetpack(${0:Ped ped})"
    ],
    "description": "taskJetpack - Выдает джетпак персонажу по его хендлу\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает, может ли игрок входить и выходить из машины.": {
    "scope": "lua",
    "prefix": "setPlayerEnterCarButton",
    "body": [
        "setPlayerEnterCarButton(${0:Player player, bool can})"
    ],
    "description": "setPlayerEnterCarButton - Устанавливает, может ли игрок входить и выходить из машины.\nПринимаемые значения:\nPlayer player хендл игрока, bool can true - может, false - не может\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает текущий день недели": {
    "scope": "lua",
    "prefix": "getCurrentDayOfWeek",
    "body": [
        "getCurrentDayOfWeek()"
    ],
    "description": "getCurrentDayOfWeek - Возвращает текущий день недели\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Помещает игрока в кран на карьере недалеко от Лас-Вентурса.": {
    "scope": "lua",
    "prefix": "playerEnteredQuarryCrane",
    "body": [
        "playerEnteredQuarryCrane()"
    ],
    "description": "playerEnteredQuarryCrane - Помещает игрока в кран на карьере недалеко от Лас-Вентурса.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает на автомобиль гидравлику": {
    "scope": "lua",
    "prefix": "setCarHydraulics",
    "body": [
        "setCarHydraulics(${0:Vehicle car, bool hydraulics})"
    ],
    "description": "setCarHydraulics - Устанавливает на автомобиль гидравлику\nПринимаемые значения:\nVehicle car скриптовый хэндл транспортного средства, bool hydraulics true - включить, false - выключить.\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, находиться ли игра в режиме 2 игроков.": {
    "scope": "lua",
    "prefix": "is2playerGameGoingOn",
    "body": [
        "${1:bool result} = is2playerGameGoingOn()"
    ],
    "description": "is2playerGameGoingOn - Проверяет, находиться ли игра в режиме 2 игроков.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Возвращает поле зрения.": {
    "scope": "lua",
    "prefix": "getCameraFov",
    "body": [
        "${1:float fov} = getCameraFov()"
    ],
    "description": "getCameraFov - Возвращает поле зрения.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nfloat fov поле зрения\n"
},
"→︎ Вынуждает актера воссоздать / очистить неприкосновенную анимацию.": {
    "scope": "lua",
    "prefix": "taskPlayAnimNonInterruptable",
    "body": [
        "taskPlayAnimNonInterruptable(${0:Ped ped, string animation, string IFP, float framedelta, bool loop, bool lockX, bool lockY, bool lockF, int time})"
    ],
    "description": "taskPlayAnimNonInterruptable - Вынуждает актера воссоздать / очистить неприкосновенную анимацию.\nПринимаемые значения:\nPed ped хендл персонажа, string animation имя анимации, string IFP файл анимации, float framedelta скорость анимации, bool loop повторение анимации (true - да, false - нет), bool lockX, bool lockY блокировка позиций по X,Y (true - да, false - нет), bool lockF возврат в исходное положение (true - возвращать, false - не возвращать), int time время воспроизведения\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет находится ли персонаж в воздухе.": {
    "scope": "lua",
    "prefix": "isCharInAir",
    "body": [
        "${1:bool result} = isCharInAir(${0:Ped ped})"
    ],
    "description": "isCharInAir - Проверяет находится ли персонаж в воздухе.\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\nbool result Результат\n"
},
"→︎ Возвращает точное значение высоты над землёй относительно персонажа": {
    "scope": "lua",
    "prefix": "getCharHeightAboveGround",
    "body": [
        "${1:float height} = getCharHeightAboveGround(${0:Ped ped})"
    ],
    "description": "getCharHeightAboveGround - Возвращает точное значение высоты над землёй относительно персонажа\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\nfloat height Результат\n"
},
"→︎ Устанавливает персонажу уровень владения оружием(скилл)": {
    "scope": "lua",
    "prefix": "setCharWeaponSkill",
    "body": [
        "setCharWeaponSkill(${0:Ped ped, int skill})"
    ],
    "description": "setCharWeaponSkill - Устанавливает персонажу уровень владения оружием(скилл)\nПринимаемые значения:\nPed ped хендл персонажа, int skill уровень владения\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, является ли указанная модель лодкой.": {
    "scope": "lua",
    "prefix": "isThisModelABoat",
    "body": [
        "${1:bool result} = isThisModelABoat(${0:Model modelId})"
    ],
    "description": "isThisModelABoat - Проверяет, является ли указанная модель лодкой.\nПринимаемые значения:\nModel modelId идентификатор игровой модели\n\nВозвращаемые значения:\nbool result true - является, false - не является\n"
},
"→︎ Проверяет, является ли указанная модель самолётом.": {
    "scope": "lua",
    "prefix": "isThisModelAPlane",
    "body": [
        "${1:bool result} = isThisModelAPlane(${0:Model modelId})"
    ],
    "description": "isThisModelAPlane - Проверяет, является ли указанная модель самолётом.\nПринимаемые значения:\nModel modelId идентификатор игровой модели\n\nВозвращаемые значения:\nbool result true - является, false - не является\n"
},
"→︎ Проверяет, является ли указанная модель вертолётом.": {
    "scope": "lua",
    "prefix": "isThisModelAHeli",
    "body": [
        "${1:bool result} = isThisModelAHeli(${0:Model modelId})"
    ],
    "description": "isThisModelAHeli - Проверяет, является ли указанная модель вертолётом.\nПринимаемые значения:\nModel modelId идентификатор игровой модели\n\nВозвращаемые значения:\nbool result true - является, false - не является\n"
},
"→︎ Включает вид бампера автомобиля для камеры.": {
    "scope": "lua",
    "prefix": "setFirstPersonInCarCameraMode",
    "body": [
        "setFirstPersonInCarCameraMode(${0:bool enable})"
    ],
    "description": "setFirstPersonInCarCameraMode - Включает вид бампера автомобиля для камеры.\nПринимаемые значения:\nbool enable true - включить, false - выключить\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает отображение/скрытие худа. Оставляя радар.": {
    "scope": "lua",
    "prefix": "displayHud",
    "body": [
        "displayHud(${0:bool state})"
    ],
    "description": "displayHud - Устанавливает отображение/скрытие худа. Оставляя радар.\nПринимаемые значения:\nbool state статус худа\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает текущий ID города, возвращает 0 если игрок не в городе.": {
    "scope": "lua",
    "prefix": "getCityPlayerIsIn",
    "body": [
        "${1:int city} = getCityPlayerIsIn(${0:Player player})"
    ],
    "description": "getCityPlayerIsIn - Получает текущий ID города, возвращает 0 если игрок не в городе.\nПринимаемые значения:\nPlayer player хендл игрока\n\nВозвращаемые значения:\nint city ID города\n"
},
"→︎ Получение название района/части карты.": {
    "scope": "lua",
    "prefix": "getNameOfZone",
    "body": [
        "${1:GxtString name} = getNameOfZone(${0:float X, float Y, float Z})"
    ],
    "description": "getNameOfZone - Получение название района/части карты.\nПринимаемые значения:\nfloat X координаты X, float Y координаты Y, float Z координаты Z\n\nВозвращаемые значения:\nGxtString name название района\n"
},
"→︎ Захват/отображение территорий в игре": {
    "scope": "lua",
    "prefix": "setGangWarsTrainingMission",
    "body": [
        "setGangWarsTrainingMission(${0:bool set})"
    ],
    "description": "setGangWarsTrainingMission - Захват/отображение территорий в игре\nПринимаемые значения:\nbool set статус отображения (false - да, true - нет)\n\nВозвращаемые значения:\n\n"
},
"→︎ Включает игроку ночное зрение": {
    "scope": "lua",
    "prefix": "setNightVision",
    "body": [
        "setNightVision(${0:bool enable})"
    ],
    "description": "setNightVision - Включает игроку ночное зрение\nПринимаемые значения:\nbool enable true - включить, false - выключить\n\nВозвращаемые значения:\n\n"
},
"→︎ Включает игроку инфракрасное зрение": {
    "scope": "lua",
    "prefix": "setInfraredVision",
    "body": [
        "setInfraredVision(${0:bool enable})"
    ],
    "description": "setInfraredVision - Включает игроку инфракрасное зрение\nПринимаемые значения:\nbool enable true - включить, false - выключить\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет с указанного ли оружия было попадание по объекту.": {
    "scope": "lua",
    "prefix": "hasObjectBeenDamagedByWeapon",
    "body": [
        "${1:bool result} = hasObjectBeenDamagedByWeapon(${0:Object object, int type})"
    ],
    "description": "hasObjectBeenDamagedByWeapon - Проверяет с указанного ли оружия было попадание по объекту.\nПринимаемые значения:\nObject object хендл объекта, int type ID оружия\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Очищает объект от последнего нанесенного урона.": {
    "scope": "lua",
    "prefix": "clearObjectLastWeaponDamage",
    "body": [
        "clearObjectLastWeaponDamage(${0:Object object})"
    ],
    "description": "clearObjectLastWeaponDamage - Очищает объект от последнего нанесенного урона.\nПринимаемые значения:\nObject object хендл объекта\n\nВозвращаемые значения:\n\n"
},
"→︎ Помещает камеру перед указанным игроком.": {
    "scope": "lua",
    "prefix": "setCameraInFrontOfChar",
    "body": [
        "setCameraInFrontOfChar(${0:Ped ped})"
    ],
    "description": "setCameraInFrontOfChar - Помещает камеру перед указанным игроком.\nПринимаемые значения:\nPed ped хендл игрока\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет плавает ли пед": {
    "scope": "lua",
    "prefix": "isCharSwimming",
    "body": [
        "${1:bool result} = isCharSwimming(${0:Ped ped})"
    ],
    "description": "isCharSwimming - Проверяет плавает ли пед\nПринимаемые значения:\nPed ped хендл педа\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Возвращает ид объекта по его хендлу.": {
    "scope": "lua",
    "prefix": "getObjectModel",
    "body": [
        "${1:int id} = getObjectModel(${0:Object object})"
    ],
    "description": "getObjectModel - Возвращает ид объекта по его хендлу.\nПринимаемые значения:\nObject object хендл объекта\n\nВозвращаемые значения:\nint id ID объекта\n"
},
"→︎ Устанавливает / отключает коллизию транспортному средству.": {
    "scope": "lua",
    "prefix": "setCarCollision",
    "body": [
        "setCarCollision(${0:Vehicle car, bool collision})"
    ],
    "description": "setCarCollision - Устанавливает / отключает коллизию транспортному средству.\nПринимаемые значения:\nVehicle car хендл транспортного средства, bool collision статус коллизии\n\nВозвращаемые значения:\n\n"
},
"→︎ Определяет состояние дверей автомобиля (открыты/закрыты)": {
    "scope": "lua",
    "prefix": "getCarDoorLockStatus",
    "body": [
        "${1:int doorStatus} = getCarDoorLockStatus(${0:Vehicle car})"
    ],
    "description": "getCarDoorLockStatus - Определяет состояние дверей автомобиля (открыты/закрыты)\nПринимаемые значения:\nVehicle car хэндл кара\n\nВозвращаемые значения:\ndoorStatus состояние двери (0/1)\n"
},
"→︎ Меняет скин игрока.": {
    "scope": "lua",
    "prefix": "setPlayerModel",
    "body": [
        "setPlayerModel(${0:Player player, Model modelId})"
    ],
    "description": "setPlayerModel - Меняет скин игрока.\nПринимаемые значения:\nPlayer player хендл игрока, Model modelId ID скина\n\nВозвращаемые значения:\n\n"
},
"→︎ Функция возвращает айди интерьера, в котором находится персонаж по его хендлу": {
    "scope": "lua",
    "prefix": "getCharActiveInterior",
    "body": [
        "${1:int interior} = getCharActiveInterior(${0:Ped ped})"
    ],
    "description": "getCharActiveInterior - Функция возвращает айди интерьера, в котором находится персонаж по его хендлу\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\nint interior Айди интерьера\n"
},
"→︎ Проверяет, использует ли игрок джетпак": {
    "scope": "lua",
    "prefix": "isPlayerUsingJetpack",
    "body": [
        "${1:bool result} = isPlayerUsingJetpack(${0:Player player})"
    ],
    "description": "isPlayerUsingJetpack - Проверяет, использует ли игрок джетпак\nПринимаемые значения:\nPlayer player скриптовый хэндл игрока\n\nВозвращаемые значения:\nbool result результат выполнения операции\n"
},
"→︎ Удаляет стилизованный текст, который был воспроизведен через printBig": {
    "scope": "lua",
    "prefix": "clearThisPrintBigNow",
    "body": [
        "clearThisPrintBigNow(${0:int style})"
    ],
    "description": "clearThisPrintBigNow - Удаляет стилизованный текст, который был воспроизведен через printBig\nПринимаемые значения:\nint style тип стиля\\\\\n\nВозвращаемые значения:\n\n"
},
"→︎ Сделать снимок экрана, снимок будет сохранён в Мои Документы/Andreas User Files\\\\Gallery": {
    "scope": "lua",
    "prefix": "takePhoto",
    "body": [
        "takePhoto(${0:bool unk})"
    ],
    "description": "takePhoto - Сделать снимок экрана, снимок будет сохранён в Мои Документы/Andreas User Files\\\\Gallery\nПринимаемые значения:\nbool unk результат выполнения\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает радиостанцию ??транспортного средства, на котором игрок находится в настоящее время, на любимую станцию, полученную из статистики.": {
    "scope": "lua",
    "prefix": "setRadioToPlayersFavouriteStation",
    "body": [
        "setRadioToPlayersFavouriteStation()"
    ],
    "description": "setRadioToPlayersFavouriteStation - Устанавливает радиостанцию ??транспортного средства, на котором игрок находится в настоящее время, на любимую станцию, полученную из статистики.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает скорость плавания игроку": {
    "scope": "lua",
    "prefix": "setCharSwimSpeed",
    "body": [
        "setCharSwimSpeed(${0:Ped ped, float speed})"
    ],
    "description": "setCharSwimSpeed - Устанавливает скорость плавания игроку\nПринимаемые значения:\nPed ped хэндл персонажа, float speed скорость\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает true, если игрок перелазит/лезет на что-то (стена, забор, любое препятствие).": {
    "scope": "lua",
    "prefix": "isPlayerClimbing",
    "body": [
        "${1:bool result} = isPlayerClimbing(${0:Player player})"
    ],
    "description": "isPlayerClimbing - Возвращает true, если игрок перелазит/лезет на что-то (стена, забор, любое препятствие).\nПринимаемые значения:\nPlayer player хендл игрока\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Чинит транспортное средство.": {
    "scope": "lua",
    "prefix": "fixCar",
    "body": [
        "fixCar(${0:Vehicle car})"
    ],
    "description": "fixCar - Чинит транспортное средство.\nПринимаемые значения:\nVehicle car скриптовый хендл транспортного средства\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает выбранный режим камеры текущего автомобиля.": {
    "scope": "lua",
    "prefix": "getPlayerInCarCameraMode",
    "body": [
        "${1:int mode} = getPlayerInCarCameraMode()"
    ],
    "description": "getPlayerInCarCameraMode - Возвращает выбранный режим камеры текущего автомобиля.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint mode ID режима камеры.\n"
},
"→︎ Отменяет любые приглашения проститутки, полученные в игре, и заставляет всех текущих проституток уйти.": {
    "scope": "lua",
    "prefix": "getRidOfPlayerProstitute",
    "body": [
        "getRidOfPlayerProstitute()"
    ],
    "description": "getRidOfPlayerProstitute - Отменяет любые приглашения проститутки, полученные в игре, и заставляет всех текущих проституток уйти.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет локального игрока на спавн.": {
    "scope": "lua",
    "prefix": "sampSpawnPlayer",
    "body": [
        "sampSpawnPlayer()"
    ],
    "description": "sampSpawnPlayer - Отправляет локального игрока на спавн.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает адрес samp.dll": {
    "scope": "lua",
    "prefix": "sampGetBase",
    "body": [
        "${1:uint handle} = sampGetBase()"
    ],
    "description": "sampGetBase - Возвращает адрес samp.dll\nПринимаемые значения:\n\n\nВозвращаемые значения:\nuint handle адрес\n"
},
"→︎ Добавляет в окно чата SA:MP сообщение заданного цвета. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.": {
    "scope": "lua",
    "prefix": "sampAddChatMessage",
    "body": [
        "sampAddChatMessage('$0', -1)"
    ],
    "description": "sampAddChatMessage - Добавляет в окно чата SA:MP сообщение заданного цвета. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.\nПринимаемые значения:\nstring text текст сообщения, int color цвет\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет на сервер текстовое сообщение или команду, если сообщение начинается с символа '/'. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.": {
    "scope": "lua",
    "prefix": "sampSendChat",
    "body": [
        "sampSendChat(${0:string text})"
    ],
    "description": "sampSendChat - Отправляет на сервер текстовое сообщение или команду, если сообщение начинается с символа '/'. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.\nПринимаемые значения:\nstring text текст сообщения\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет инициализацию структур SA:MP.": {
    "scope": "lua",
    "prefix": "isSampAvailable",
    "body": [
        "${1:bool result} = isSampAvailable()"
    ],
    "description": "isSampAvailable - Проверяет инициализацию структур SA:MP.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает специальное действие локальному игроку": {
    "scope": "lua",
    "prefix": "sampSetSpecialAction",
    "body": [
        "sampSetSpecialAction(${0:int action})"
    ],
    "description": "sampSetSpecialAction - Устанавливает специальное действие локальному игроку\nПринимаемые значения:\nint action Специальное действие\n\nВозвращаемые значения:\n\n"
},
"→︎ Убивает игрока.": {
    "scope": "lua",
    "prefix": "sampSendDeathByPlayer",
    "body": [
        "sampSendDeathByPlayer(${0:int playerId, int reason})"
    ],
    "description": "sampSendDeathByPlayer - Убивает игрока.\nПринимаемые значения:\nint playerId ID игрока, int reason причина смерти\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает хендл т/с по его иду. Если автомобиля нет в зоне стрима, то возвращает false.": {
    "scope": "lua",
    "prefix": "sampGetCarHandleBySampVehicleId",
    "body": [
        "${1:bool result, Vehicle car} = sampGetCarHandleBySampVehicleId(${0:int id})"
    ],
    "description": "sampGetCarHandleBySampVehicleId - Получает хендл т/с по его иду. Если автомобиля нет в зоне стрима, то возвращает false.\nПринимаемые значения:\nint id ID т/c\n\nВозвращаемые значения:\nbool result результат, Vehicle car хендл т/c\n"
},
"→︎ Получает хендл игрока по его иду.": {
    "scope": "lua",
    "prefix": "sampGetCharHandleBySampPlayerId",
    "body": [
        "${1:bool result, Ped ped} = sampGetCharHandleBySampPlayerId(${0:int id})"
    ],
    "description": "sampGetCharHandleBySampPlayerId - Получает хендл игрока по его иду.\nПринимаемые значения:\nint id ID игрока\n\nВозвращаемые значения:\nbool result результат, Ped ped хендл игрока\n"
},
"→︎ Проверяет открыт ли инпут чата.": {
    "scope": "lua",
    "prefix": "sampIsChatInputActive",
    "body": [
        "${1:bool result} = sampIsChatInputActive()"
    ],
    "description": "sampIsChatInputActive - Проверяет открыт ли инпут чата.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Получает уровень здоровья игрока.": {
    "scope": "lua",
    "prefix": "sampGetPlayerHealth",
    "body": [
        "${1:int health} = sampGetPlayerHealth(${0:int id})"
    ],
    "description": "sampGetPlayerHealth - Получает уровень здоровья игрока.\nПринимаемые значения:\nint id ИД игрока.\n\nВозвращаемые значения:\nint health Уровень здоровья.\n"
},
"→︎ Получает уровень брони игрока.": {
    "scope": "lua",
    "prefix": "sampGetPlayerArmor",
    "body": [
        "${1:int armor} = sampGetPlayerArmor(${0:int id})"
    ],
    "description": "sampGetPlayerArmor - Получает уровень брони игрока.\nПринимаемые значения:\nint id ИД игрока.\n\nВозвращаемые значения:\nint armor Уровень брони.\n"
},
"→︎ Устанавливает статус подключения к серверу.": {
    "scope": "lua",
    "prefix": "sampSetGamestate",
    "body": [
        "sampSetGamestate(${0:int gamestate})"
    ],
    "description": "sampSetGamestate - Устанавливает статус подключения к серверу.\nПринимаемые значения:\nint gamestate статус\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает локальному игроку новый ник.": {
    "scope": "lua",
    "prefix": "sampSetLocalPlayerName",
    "body": [
        "sampSetLocalPlayerName(${0:string name})"
    ],
    "description": "sampSetLocalPlayerName - Устанавливает локальному игроку новый ник.\nПринимаемые значения:\nstring name новый ник\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает пинг игрока.": {
    "scope": "lua",
    "prefix": "sampGetPlayerPing",
    "body": [
        "${1:int ping} = sampGetPlayerPing(${0:int id})"
    ],
    "description": "sampGetPlayerPing - Получает пинг игрока.\nПринимаемые значения:\nint id ИД игрока.\n\nВозвращаемые значения:\nint ping Пинг.\n"
},
"→︎ Получает SAMP ID игрока по хэндлу персонажа.": {
    "scope": "lua",
    "prefix": "sampGetPlayerIdByCharHandle",
    "body": [
        "${1:bool result, int id} = sampGetPlayerIdByCharHandle(${0:Ped ped})"
    ],
    "description": "sampGetPlayerIdByCharHandle - Получает SAMP ID игрока по хэндлу персонажа.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nbool result результат выполнения, int id ID игрока\n"
},
"→︎ Получает ID транспортного средства по его хендлу": {
    "scope": "lua",
    "prefix": "sampGetVehicleIdByCarHandle",
    "body": [
        "${1:bool result, int id} = sampGetVehicleIdByCarHandle(${0:Vehicle car})"
    ],
    "description": "sampGetVehicleIdByCarHandle - Получает ID транспортного средства по его хендлу\nПринимаемые значения:\nVehicle car скриптовый хендл транспортного средства\n\nВозвращаемые значения:\nbool result результат выполнения операции, int id ID транспортного средства\n"
},
"→︎ Получает позицию игрока, который находится вне зоны стрима, если сервер даёт на это разрешение.": {
    "scope": "lua",
    "prefix": "sampGetStreamedOutPlayerPos",
    "body": [
        "${1:bool result, float posX, float posY, float posZ} = sampGetStreamedOutPlayerPos(${0:int id})"
    ],
    "description": "sampGetStreamedOutPlayerPos - Получает позицию игрока, который находится вне зоны стрима, если сервер даёт на это разрешение.\nПринимаемые значения:\nint id ID игрока\n\nВозвращаемые значения:\nbool result результат, float posX ,, float posY ,, float posZ координаты\n"
},
"→︎ Отправляет пакет о посадке в транспортное средство.": {
    "scope": "lua",
    "prefix": "sampSendEnterVehicle",
    "body": [
        "sampSendEnterVehicle(${0:int id, bool passenger})"
    ],
    "description": "sampSendEnterVehicle - Отправляет пакет о посадке в транспортное средство.\nПринимаемые значения:\nint id ID транспортного средства, bool passenger true - на пассажирское место, false - на водительское.\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC - RPC_EXITVEHICLE": {
    "scope": "lua",
    "prefix": "sampSendExitVehicle",
    "body": [
        "sampSendExitVehicle(${0:int carid})"
    ],
    "description": "sampSendExitVehicle - Отправляет RPC - RPC_EXITVEHICLE\nПринимаемые значения:\nint carid ид транспорта\n\nВозвращаемые значения:\n\n"
},
"→︎ Спавнит игрока.": {
    "scope": "lua",
    "prefix": "sampSendSpawn",
    "body": [
        "sampSendSpawn()"
    ],
    "description": "sampSendSpawn - Спавнит игрока.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает ник игрока по его ID.": {
    "scope": "lua",
    "prefix": "sampGetPlayerNickname",
    "body": [
        "${1:name} = sampGetPlayerNickname(${0:int id})"
    ],
    "description": "sampGetPlayerNickname - Получает ник игрока по его ID.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает цвет игрока из scoreboard'a": {
    "scope": "lua",
    "prefix": "sampGetPlayerColor",
    "body": [
        "${1:int color} = sampGetPlayerColor(${0:int id})"
    ],
    "description": "sampGetPlayerColor - Получает цвет игрока из scoreboard'a\nПринимаемые значения:\nint id ИД игрока.\n\nВозвращаемые значения:\nint color Цвет(ARGB).\n"
},
"→︎ Выполняет подключение к серверу": {
    "scope": "lua",
    "prefix": "sampConnectToServer",
    "body": [
        "sampConnectToServer(${0:zstring ip, uint port})"
    ],
    "description": "sampConnectToServer - Выполняет подключение к серверу\nПринимаемые значения:\nzstring ip IP сервера, uint port порт сервера\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает текущий адрес сервера.": {
    "scope": "lua",
    "prefix": "sampGetCurrentServerAddress",
    "body": [
        "${1:zstring ip, uint port} = sampGetCurrentServerAddress()"
    ],
    "description": "sampGetCurrentServerAddress - Получает текущий адрес сервера.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nzstring ip IP сервера, uint port порт сервера\n"
},
"→︎ Получает текущее название сервера": {
    "scope": "lua",
    "prefix": "sampGetCurrentServerName",
    "body": [
        "${1:zstring name} = sampGetCurrentServerName()"
    ],
    "description": "sampGetCurrentServerName - Получает текущее название сервера\nПринимаемые значения:\n\n\nВозвращаемые значения:\nzstring name название сервера\n"
},
"→︎ Показывает игроку диалоговое окно": {
    "scope": "lua",
    "prefix": "sampShowDialog",
    "body": [
        "sampShowDialog(${0:int id, zstring caption, zstring text, zstring button1, zstring button2, int style})"
    ],
    "description": "sampShowDialog - Показывает игроку диалоговое окно\nПринимаемые значения:\nint id id диалога, zstring caption заголовок окна, zstring text текст самого диалога. Можно использовать \\\\n для перевода строки и \\\\t для табуляции, zstring button1 название первой (левой) кнопки диалога, zstring button2 название второй (правой) кнопки диалога, int style стиль диалогового окна\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает информацию с локального диалога (нужно использовать в цикле)": {
    "scope": "lua",
    "prefix": "sampHasDialogRespond",
    "body": [
        "${1:bool result, int button, int list, zstring input} = sampHasDialogRespond(${0:int id})"
    ],
    "description": "sampHasDialogRespond - Получает информацию с локального диалога (нужно использовать в цикле)\nПринимаемые значения:\nint id id локального диалога\n\nВозвращаемые значения:\nbool result результат, возвращает true если диалог открыт, int button номер кнопки, int list выбранная строка в списке, zstring input текст\n"
},
"→︎ Записывает значение типа boolean в BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamWriteBool",
    "body": [
        "raknetBitStreamWriteBool(${0:Bitstream bs, bool value})"
    ],
    "description": "raknetBitStreamWriteBool - Записывает значение типа boolean в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, bool value значение\n\nВозвращаемые значения:\n\n"
},
"→︎ Записывает значение типа byte в BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamWriteInt8",
    "body": [
        "raknetBitStreamWriteInt8(${0:Bitstream bs, int value})"
    ],
    "description": "raknetBitStreamWriteInt8 - Записывает значение типа byte в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int value значение\n\nВозвращаемые значения:\n\n"
},
"→︎ Записывает значение типа short (2 байта) в BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamWriteInt16",
    "body": [
        "raknetBitStreamWriteInt16(${0:Bitstream bs, int value})"
    ],
    "description": "raknetBitStreamWriteInt16 - Записывает значение типа short (2 байта) в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int value значение\n\nВозвращаемые значения:\n\n"
},
"→︎ Записывает значение типа integer (4 байта) в BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamWriteInt32",
    "body": [
        "raknetBitStreamWriteInt32(${0:Bitstream bs, int value})"
    ],
    "description": "raknetBitStreamWriteInt32 - Записывает значение типа integer (4 байта) в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int value значение\n\nВозвращаемые значения:\n\n"
},
"→︎ Записывает значение типа float (4 байта) в BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamWriteFloat",
    "body": [
        "raknetBitStreamWriteFloat(${0:Bitstream bs, float value})"
    ],
    "description": "raknetBitStreamWriteFloat - Записывает значение типа float (4 байта) в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, float value значение\n\nВозвращаемые значения:\n\n"
},
"→︎ Записывает буффер указанного размера в BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamWriteBuffer",
    "body": [
        "raknetBitStreamWriteBuffer(${0:Bitstream bs, int dest, int size})"
    ],
    "description": "raknetBitStreamWriteBuffer - Записывает буффер указанного размера в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int dest буффер, int size размер\n\nВозвращаемые значения:\n\n"
},
"→︎ Записывает BitStream в BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamWriteBitStream",
    "body": [
        "raknetBitStreamWriteBitStream(${0:Bitstream bs, Bitstream bitstream})"
    ],
    "description": "raknetBitStreamWriteBitStream - Записывает BitStream в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, Bitstream bitstream bitStream (который записываем)\n\nВозвращаемые значения:\n\n"
},
"→︎ Записывает строку в BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamWriteString",
    "body": [
        "raknetBitStreamWriteString(${0:Bitstream bs, string str})"
    ],
    "description": "raknetBitStreamWriteString - Записывает строку в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, string str строка\n\nВозвращаемые значения:\n\n"
},
"→︎ Создает SAMP объект --- 3D-текст": {
    "scope": "lua",
    "prefix": "sampCreate3dText",
    "body": [
        "sampCreate3dText(${0:zstring text, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId})"
    ],
    "description": "sampCreate3dText - Создает SAMP объект --- 3D-текст\nПринимаемые значения:\nzstring text Содержимое, int color Цвет (ARGB), float posX Позиция/смещение относительно крепления по оси X, float posY Позиция/смещение относительно крепления по оси Y, float posZ Позиция/смещение относительно крепления по оси Z, float distance Дистанция при которой будет виден 3D-текст, bool ignoreWalls Виден за объектами/стенами, int playerId Крепление к игроку по ид (-1 --- отключить), int vehicleId Крепление к т/с по ид (-1 --- отключить)\n\nВозвращаемые значения:\nint textlabel ид созданного 3D-текста\n"
},
"→︎ Удаляет 3D текст.": {
    "scope": "lua",
    "prefix": "sampDestroy3dText",
    "body": [
        "sampDestroy3dText(${0:int textlabel})"
    ],
    "description": "sampDestroy3dText - Удаляет 3D текст.\nПринимаемые значения:\nint textlabel указатель на 3D текст\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет 3D текст на существование.": {
    "scope": "lua",
    "prefix": "sampIs3dTextDefined",
    "body": [
        "${1:bool result} = sampIs3dTextDefined(${0:int 3dText})"
    ],
    "description": "sampIs3dTextDefined - Проверяет 3D текст на существование.\nПринимаемые значения:\nint 3dText ID 3D текста\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Закрывает открытый диалог с указанием нажатой кнопки.": {
    "scope": "lua",
    "prefix": "sampCloseCurrentDialogWithButton",
    "body": [
        "sampCloseCurrentDialogWithButton(${0:int button})"
    ],
    "description": "sampCloseCurrentDialogWithButton - Закрывает открытый диалог с указанием нажатой кнопки.\nПринимаемые значения:\nint button номер кнопки\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает номер элемента из списка (диалога), который в данный момент активен": {
    "scope": "lua",
    "prefix": "sampGetCurrentDialogListItem",
    "body": [
        "${1:int list} = sampGetCurrentDialogListItem()"
    ],
    "description": "sampGetCurrentDialogListItem - Возвращает номер элемента из списка (диалога), который в данный момент активен\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint list номер элемента из списка (диалога)\n"
},
"→︎ Выбирает элемент из списка (диалога)": {
    "scope": "lua",
    "prefix": "sampSetCurrentDialogListItem",
    "body": [
        "sampSetCurrentDialogListItem(${0:int list})"
    ],
    "description": "sampSetCurrentDialogListItem - Выбирает элемент из списка (диалога)\nПринимаемые значения:\nint list номер элемента\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает текст из полей диалога 1 стиля": {
    "scope": "lua",
    "prefix": "sampGetCurrentDialogEditboxText",
    "body": [
        "${1:zstring text} = sampGetCurrentDialogEditboxText()"
    ],
    "description": "sampGetCurrentDialogEditboxText - Возвращает текст из полей диалога 1 стиля\nПринимаемые значения:\n\n\nВозвращаемые значения:\nzstring text текст\n"
},
"→︎ Вставляет текст в поле для ввода диалога 1 стиля": {
    "scope": "lua",
    "prefix": "sampSetCurrentDialogEditboxText",
    "body": [
        "sampSetCurrentDialogEditboxText(${0:zstring text})"
    ],
    "description": "sampSetCurrentDialogEditboxText - Вставляет текст в поле для ввода диалога 1 стиля\nПринимаемые значения:\nzstring text текст\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, активен ли любой SA:MP-диалог. Отличие от опкода в отсутствии аргумента, являющегося идентификатором диалога.": {
    "scope": "lua",
    "prefix": "sampIsDialogActive",
    "body": [
        "${1:bool result} = sampIsDialogActive()"
    ],
    "description": "sampIsDialogActive - Проверяет, активен ли любой SA:MP-диалог. Отличие от опкода в отсутствии аргумента, являющегося идентификатором диалога.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result статус\n"
},
"→︎ Возвращает стиль активного диалога": {
    "scope": "lua",
    "prefix": "sampGetCurrentDialogType",
    "body": [
        "${1:int type} = sampGetCurrentDialogType()"
    ],
    "description": "sampGetCurrentDialogType - Возвращает стиль активного диалога\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint type стиль\n"
},
"→︎ Возвращает ID последнего(открытого) диалогового окна": {
    "scope": "lua",
    "prefix": "sampGetCurrentDialogId",
    "body": [
        "${1:int id} = sampGetCurrentDialogId()"
    ],
    "description": "sampGetCurrentDialogId - Возвращает ID последнего(открытого) диалогового окна\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint id ID диалогового окна\n"
},
"→︎ Возвращает текущий gamestate.": {
    "scope": "lua",
    "prefix": "sampGetGamestate",
    "body": [
        "${1:int gamestate} = sampGetGamestate()"
    ],
    "description": "sampGetGamestate - Возвращает текущий gamestate.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint gamestate ID gamestate\n"
},
"→︎ Возвращает хендл объекта по его иду.": {
    "scope": "lua",
    "prefix": "sampGetObjectHandleBySampId",
    "body": [
        "${1:Object object} = sampGetObjectHandleBySampId(${0:int id})"
    ],
    "description": "sampGetObjectHandleBySampId - Возвращает хендл объекта по его иду.\nПринимаемые значения:\nint id ID объекта\n\nВозвращаемые значения:\nObject object хендл объекта\n"
},
"→︎ Получает ID объекта по его хендлу": {
    "scope": "lua",
    "prefix": "sampGetObjectSampIdByHandle",
    "body": [
        "${1:int objectId} = sampGetObjectSampIdByHandle(${0:Object object})"
    ],
    "description": "sampGetObjectSampIdByHandle - Получает ID объекта по его хендлу\nПринимаемые значения:\nObject object handle объекта\n\nВозвращаемые значения:\nint objectId ID объекта\n"
},
"→︎ Возвращает общее кол-во элементов в списке (последнего)открытого диалога.": {
    "scope": "lua",
    "prefix": "sampGetListboxItemsCount",
    "body": [
        "${1:int count} = sampGetListboxItemsCount()"
    ],
    "description": "sampGetListboxItemsCount - Возвращает общее кол-во элементов в списке (последнего)открытого диалога.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint count кол-во элементов\n"
},
"→︎ Получает ид текущей анимации игрока.": {
    "scope": "lua",
    "prefix": "sampGetPlayerAnimationId",
    "body": [
        "${1:int animid} = sampGetPlayerAnimationId(${0:int playerId})"
    ],
    "description": "sampGetPlayerAnimationId - Получает ид текущей анимации игрока.\nПринимаемые значения:\nint playerId ИД игрока.\n\nВозвращаемые значения:\nint animid ИД анимации.\n"
},
"→︎ Получает текущее разрешение экрана в пикселях": {
    "scope": "lua",
    "prefix": "getScreenResolution",
    "body": [
        "${1:int resX, int resY} = getScreenResolution()"
    ],
    "description": "getScreenResolution - Получает текущее разрешение экрана в пикселях\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint resX, int resY разрешение экрана\n"
},
"→︎ Получает текст из листбокса по его номеру": {
    "scope": "lua",
    "prefix": "sampGetListboxItemText",
    "body": [
        "${1:zstring text} = sampGetListboxItemText(${0:int item})"
    ],
    "description": "sampGetListboxItemText - Получает текст из листбокса по его номеру\nПринимаемые значения:\nint item номер элемента\n\nВозвращаемые значения:\nzstring text текст\n"
},
"→︎ Проверяет, находится ли указанный игрок на паузе": {
    "scope": "lua",
    "prefix": "sampIsPlayerPaused",
    "body": [
        "${1:bool result} = sampIsPlayerPaused(${0:int id})"
    ],
    "description": "sampIsPlayerPaused - Проверяет, находится ли указанный игрок на паузе\nПринимаемые значения:\nint id id игрока\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Переключает видимость курсора SAMP": {
    "scope": "lua",
    "prefix": "sampToggleCursor",
    "body": [
        "sampToggleCursor(${0:bool show})"
    ],
    "description": "sampToggleCursor - Переключает видимость курсора SAMP\nПринимаемые значения:\nbool show статус\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, заспавнился ли игрок.": {
    "scope": "lua",
    "prefix": "sampIsLocalPlayerSpawned",
    "body": [
        "${1:bool result} = sampIsLocalPlayerSpawned()"
    ],
    "description": "sampIsLocalPlayerSpawned - Проверяет, заспавнился ли игрок.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result статус\n"
},
"→︎ Возвращает ид специального действия игрока.": {
    "scope": "lua",
    "prefix": "sampGetPlayerSpecialAction",
    "body": [
        "${1:int action} = sampGetPlayerSpecialAction(${0:int id})"
    ],
    "description": "sampGetPlayerSpecialAction - Возвращает ид специального действия игрока.\nПринимаемые значения:\nint id ID игрока\n\nВозвращаемые значения:\nint action ID специального действия\n"
},
"→︎ Отменяет регистрацию команды, созданной с помощью функции sampRegisterChatCommand.": {
    "scope": "lua",
    "prefix": "sampUnregisterChatCommand",
    "body": [
        "${1:bool result} = sampUnregisterChatCommand(${0:string cmd})"
    ],
    "description": "sampUnregisterChatCommand - Отменяет регистрацию команды, созданной с помощью функции sampRegisterChatCommand.\nПринимаемые значения:\nstring cmd команда\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Проверяет, является ли указанный игрок NPC": {
    "scope": "lua",
    "prefix": "sampIsPlayerNpc",
    "body": [
        "${1:bool result} = sampIsPlayerNpc(${0:int id})"
    ],
    "description": "sampIsPlayerNpc - Проверяет, является ли указанный игрок NPC\nПринимаемые значения:\nint id id игрока\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Получает очки игрока.": {
    "scope": "lua",
    "prefix": "sampGetPlayerScore",
    "body": [
        "${1:int score} = sampGetPlayerScore(${0:int id})"
    ],
    "description": "sampGetPlayerScore - Получает очки игрока.\nПринимаемые значения:\nint id ИД игрока.\n\nВозвращаемые значения:\nint score Очки.\n"
},
"→︎ Меняет параметры строки чата на пользовательские.": {
    "scope": "lua",
    "prefix": "sampSetChatString",
    "body": [
        "sampSetChatString(${0:int id, zstring text, zstring prefix, uint color, uint pcolor})"
    ],
    "description": "sampSetChatString - Меняет параметры строки чата на пользовательские.\nПринимаемые значения:\nint id ID строки(0-99), zstring text текст строки, zstring prefix префикс, uint color цвет строки, uint pcolor цвет префикса\\\\\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает данные о сообщении в окне чата., А именно: string text, string prefix, int color, int pcolor": {
    "scope": "lua",
    "prefix": "sampGetChatString",
    "body": [
        "${1:zstring text, zstring prefix, int color, int pcolor} = sampGetChatString(${0:int id})"
    ],
    "description": "sampGetChatString - Получает данные о сообщении в окне чата., А именно: string text, string prefix, int color, int pcolor\nПринимаемые значения:\nint id Номер строки чата\n\nВозвращаемые значения:\nstring text Текст сообщения, string prefix Префикс, int color Цвет сообщения, int pcolor int pcolor\n"
},
"→︎ Вставляет в поле чата текст.": {
    "scope": "lua",
    "prefix": "sampSetChatInputText",
    "body": [
        "sampSetChatInputText(${0:zstring text})"
    ],
    "description": "sampSetChatInputText - Вставляет в поле чата текст.\nПринимаемые значения:\nzstring zstring text Строка\\\\\n\nВозвращаемые значения:\n\n"
},
"→︎ Записывает в переменную данные введенные в поле чата.": {
    "scope": "lua",
    "prefix": "sampGetChatInputText",
    "body": [
        "${1:zstring text} = sampGetChatInputText()"
    ],
    "description": "sampGetChatInputText - Записывает в переменную данные введенные в поле чата.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nzstring Строка\\\\\n"
},
"→︎ Добавляет в консоль и лог-файл SAMPFUNCS текстовое сообщение. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.": {
    "scope": "lua",
    "prefix": "sampfuncsLog",
    "body": [
        "sampfuncsLog(${0:string text})"
    ],
    "description": "sampfuncsLog - Добавляет в консоль и лог-файл SAMPFUNCS текстовое сообщение. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.\nПринимаемые значения:\nstring text текст\n\nВозвращаемые значения:\n\n"
},
"→︎ Открывает/Закрывает чат": {
    "scope": "lua",
    "prefix": "sampSetChatInputEnabled",
    "body": [
        "sampSetChatInputEnabled(${0:bool enabled})"
    ],
    "description": "sampSetChatInputEnabled - Открывает/Закрывает чат\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Создаёт dxut диалог": {
    "scope": "lua",
    "prefix": "dxutCreateDialog",
    "body": [
        "${1:DxutDialog dialog} = dxutCreateDialog(${0:zstring name})"
    ],
    "description": "dxutCreateDialog - Создаёт dxut диалог\nПринимаемые значения:\nzstring name заголовок\n\nВозвращаемые значения:\nDxutDialog dialog указатель на объект диалога\n"
},
"→︎ Возвращает последнее id события и компонента которое произошло с указанным диалогом": {
    "scope": "lua",
    "prefix": "dxutPopEvent",
    "body": [
        "${1:bool result, int event, int id} = dxutPopEvent(${0:DxutDialog dialog})"
    ],
    "description": "dxutPopEvent - Возвращает последнее id события и компонента которое произошло с указанным диалогом\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога\n\nВозвращаемые значения:\nbool result результат, int events id события, int id id компонента\n"
},
"→︎ Создаёт кнопку на Dxut диалоге": {
    "scope": "lua",
    "prefix": "dxutAddButton",
    "body": [
        "dxutAddButton(${0:DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY})"
    ],
    "description": "dxutAddButton - Создаёт кнопку на Dxut диалоге\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int id уникальный id кнопки, zstring text надпись на кнопке, int posX ,, int posY позиция кнопки, int sizeX ,, int sizeY размер кнопки\n\nВозвращаемые значения:\n\n"
},
"→︎ Создаёт чекбокс в Dxut диалоге": {
    "scope": "lua",
    "prefix": "dxutAddCheckbox",
    "body": [
        "dxutAddCheckbox(${0:DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY})"
    ],
    "description": "dxutAddCheckbox - Создаёт чекбокс в Dxut диалоге\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int id уникальный id чекбокса, zstring text название чекбокса, int posX ,, int posY позиция чекбокса, int sizeX ,, int sizeY размер чекбокса\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает позицию и размер Dxut диалогу": {
    "scope": "lua",
    "prefix": "dxutSetDialogPos",
    "body": [
        "dxutSetDialogPos(${0:DxutDialog dialog, int posX, int posY, int sizeX, int sizeY})"
    ],
    "description": "dxutSetDialogPos - Устанавливает позицию и размер Dxut диалогу\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int posX ,, int posY позиция диалога, int sizeX ,, int sizeY размер диалога\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает позицию и размер Dxut диалога": {
    "scope": "lua",
    "prefix": "dxutGetDialogPosAndSize",
    "body": [
        "${1:int posX, int posY, int sizeX, int sizeY} = dxutGetDialogPosAndSize(${0:DxutDialog dialog})"
    ],
    "description": "dxutGetDialogPosAndSize - Получает позицию и размер Dxut диалога\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога\n\nВозвращаемые значения:\nint posX ,, int posY позиция диалога, int sizeX ,, int sizeY размер диалога\n"
},
"→︎ Устанавливает видимость диалогу": {
    "scope": "lua",
    "prefix": "dxutSetDialogVisible",
    "body": [
        "dxutSetDialogVisible(${0:DxutDialog dialog, bool visible})"
    ],
    "description": "dxutSetDialogVisible - Устанавливает видимость диалогу\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, bool visible видимость диалога (если true-виден, если false-не виден)\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, виден ли Dxut диалог, возвращает true если диалог виден и наоборот": {
    "scope": "lua",
    "prefix": "dxutIsDialogVisible",
    "body": [
        "${1:bool result} = dxutIsDialogVisible(${0:DxutDialog dialog})"
    ],
    "description": "dxutIsDialogVisible - Проверяет, виден ли Dxut диалог, возвращает true если диалог виден и наоборот\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Добавляет поле для ввода текста в Dxut диалоге": {
    "scope": "lua",
    "prefix": "dxutAddEditbox",
    "body": [
        "dxutAddEditbox(${0:DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY})"
    ],
    "description": "dxutAddEditbox - Добавляет поле для ввода текста в Dxut диалоге\nПринимаемые значения:\nDxutDialog dialog указатель на объект Dxut диалога, int id уникальный id, zstring text название, int posX ,, int posY позиция, int sizeX ,, int sizeY размер\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает текст компонента по id": {
    "scope": "lua",
    "prefix": "dxutGetControlText",
    "body": [
        "${1:zstring text} = dxutGetControlText(${0:DxutDialog dialog, int id})"
    ],
    "description": "dxutGetControlText - Возвращает текст компонента по id\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int id id компонента\n\nВозвращаемые значения:\nzstring text текст\n"
},
"→︎ Проверяет, виден ли курсор": {
    "scope": "lua",
    "prefix": "sampIsCursorActive",
    "body": [
        "${1:bool result} = sampIsCursorActive()"
    ],
    "description": "sampIsCursorActive - Проверяет, виден ли курсор\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат\n"
},
"→︎ Устанавливает режим курсора SAMP., Доступные режимы:, 0 - Отключен., 1 - Управление клавиатурой заблокировано, курсор отключен., 2 - Управление клавиатурой и мышкой заблокировано, курсор включен., 3 - Управление мышкой заблокировано, курсор включен., 4 - Управление мышкой заблокировано, курсор отключен.\\\\": {
    "scope": "lua",
    "prefix": "sampSetCursorMode",
    "body": [
        "sampSetCursorMode(${0:int mode})"
    ],
    "description": "sampSetCursorMode - Устанавливает режим курсора SAMP., Доступные режимы:, 0 - Отключен., 1 - Управление клавиатурой заблокировано, курсор отключен., 2 - Управление клавиатурой и мышкой заблокировано, курсор включен., 3 - Управление мышкой заблокировано, курсор включен., 4 - Управление мышкой заблокировано, курсор отключен.\\\\\nПринимаемые значения:\nint mode Режим\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает текущий режим курсора": {
    "scope": "lua",
    "prefix": "sampGetCursorMode",
    "body": [
        "${1:int mode} = sampGetCursorMode()"
    ],
    "description": "sampGetCursorMode - Возвращает текущий режим курсора\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint mode ID режима\n"
},
"→︎ Устанавливает видимость компонента Dxut диалога": {
    "scope": "lua",
    "prefix": "dxutSetControlVisible",
    "body": [
        "dxutSetControlVisible(${0:DxutDialog dialog, int id, bool visible})"
    ],
    "description": "dxutSetControlVisible - Устанавливает видимость компонента Dxut диалога\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int id id компонента диалога, bool result видимость компонента\n\nВозвращаемые значения:\n\n"
},
"→︎ Создаёт статистический текст на Dxut диалоге": {
    "scope": "lua",
    "prefix": "dxutAddStatic",
    "body": [
        "dxutAddStatic(${0:DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY})"
    ],
    "description": "dxutAddStatic - Создаёт статистический текст на Dxut диалоге\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int id уникальный id текста, zstring text текст, int posX ,, int posY позиция, int sizeX ,, int sizeY размер\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет, активирован ли чекбокс Dxut диалога": {
    "scope": "lua",
    "prefix": "dxutIsCheckboxChecked",
    "body": [
        "${1:bool result} = dxutIsCheckboxChecked(${0:DxutDialog dialog, int id})"
    ],
    "description": "dxutIsCheckboxChecked - Проверяет, активирован ли чекбокс Dxut диалога\nПринимаемые значения:\nDxutDialog хэндл DXUT-диалога SAMPFUNCS, int id ID чекбокса\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Получает размеры компонента": {
    "scope": "lua",
    "prefix": "dxutGetControlSize",
    "body": [
        "${1:int sizeX, int sizeY} = dxutGetControlSize(${0:DxutDialog dialog, int id})"
    ],
    "description": "dxutGetControlSize - Получает размеры компонента\nПринимаемые значения:\nDxutDialog dialog Диалог, int id ID компонента\n\nВозвращаемые значения:\nint sizeX, int sizeY Размеры\n"
},
"→︎ Возвращает указатель на структуру настроек сервера": {
    "scope": "lua",
    "prefix": "sampGetServerSettingsPtr",
    "body": [
        "${1:uint settingsPtr} = sampGetServerSettingsPtr()"
    ],
    "description": "sampGetServerSettingsPtr - Возвращает указатель на структуру настроек сервера\nПринимаемые значения:\n\n\nВозвращаемые значения:\nsettingsPtr указатель\n"
},
"→︎ Возвращает указатель на структуру чата": {
    "scope": "lua",
    "prefix": "sampGetChatInfoPtr",
    "body": [
        "${1:uint chatPtr} = sampGetChatInfoPtr()"
    ],
    "description": "sampGetChatInfoPtr - Возвращает указатель на структуру чата\nПринимаемые значения:\n\n\nВозвращаемые значения:\nchatPtr указатель\n"
},
"→︎ Возвращает указатель на структуру поля ввода в чате": {
    "scope": "lua",
    "prefix": "sampGetInputInfoPtr",
    "body": [
        "${1:uint inputPtr} = sampGetInputInfoPtr()"
    ],
    "description": "sampGetInputInfoPtr - Возвращает указатель на структуру поля ввода в чате\nПринимаемые значения:\n\n\nВозвращаемые значения:\nuint inputPtr указатель\n"
},
"→︎ Возвращает указатель на структуру диалогов": {
    "scope": "lua",
    "prefix": "sampGetDialogInfoPtr",
    "body": [
        "${1:uint dialogPtr} = sampGetDialogInfoPtr()"
    ],
    "description": "sampGetDialogInfoPtr - Возвращает указатель на структуру диалогов\nПринимаемые значения:\n\n\nВозвращаемые значения:\nuint dialogPtr указатель\n"
},
"→︎ Получает указатель на структуру текстдравов.": {
    "scope": "lua",
    "prefix": "sampGetTextdrawPoolPtr",
    "body": [
        "${1:int tdpool} = sampGetTextdrawPoolPtr()"
    ],
    "description": "sampGetTextdrawPoolPtr - Получает указатель на структуру текстдравов.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint tdpool структура\n"
},
"→︎ Возвращает указатель на пул игроков": {
    "scope": "lua",
    "prefix": "sampGetPlayerPoolPtr",
    "body": [
        "${1:uint playerpoolPtr} = sampGetPlayerPoolPtr()"
    ],
    "description": "sampGetPlayerPoolPtr - Возвращает указатель на пул игроков\nПринимаемые значения:\n\n\nВозвращаемые значения:\nuint playerpoolPtr указатель\n"
},
"→︎ Отправляет RCON команду серверу": {
    "scope": "lua",
    "prefix": "sampSendRconCommand",
    "body": [
        "sampSendRconCommand(${0:zstring cmd})"
    ],
    "description": "sampSendRconCommand - Отправляет RCON команду серверу\nПринимаемые значения:\nzstring cmd команда\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет onFootData серверу": {
    "scope": "lua",
    "prefix": "sampSendOnfootData",
    "body": [
        "sampSendOnfootData(${0:uint dataPtr})"
    ],
    "description": "sampSendOnfootData - Отправляет onFootData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет IncarData серверу": {
    "scope": "lua",
    "prefix": "sampSendIncarData",
    "body": [
        "sampSendIncarData(${0:uint dataPtr})"
    ],
    "description": "sampSendIncarData - Отправляет IncarData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет PassengerData серверу": {
    "scope": "lua",
    "prefix": "sampSendPassengerData",
    "body": [
        "sampSendPassengerData(${0:uint dataPtr})"
    ],
    "description": "sampSendPassengerData - Отправляет PassengerData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет AimData серверу": {
    "scope": "lua",
    "prefix": "sampSendAimData",
    "body": [
        "sampSendAimData(${0:uint dataPtr})"
    ],
    "description": "sampSendAimData - Отправляет AimData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет BulletData серверу": {
    "scope": "lua",
    "prefix": "sampSendBulletData",
    "body": [
        "sampSendBulletData(${0:uint dataPtr})"
    ],
    "description": "sampSendBulletData - Отправляет BulletData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет TrailerData серверу": {
    "scope": "lua",
    "prefix": "sampSendTrailerData",
    "body": [
        "sampSendTrailerData(${0:uint dataPtr})"
    ],
    "description": "sampSendTrailerData - Отправляет TrailerData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет UnoccupiedData серверу": {
    "scope": "lua",
    "prefix": "sampSendUnoccupiedData",
    "body": [
        "sampSendUnoccupiedData(${0:uint dataPtr})"
    ],
    "description": "sampSendUnoccupiedData - Отправляет UnoccupiedData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет SpectatorData серверу": {
    "scope": "lua",
    "prefix": "sampSendSpectatorData",
    "body": [
        "sampSendSpectatorData(${0:uint dataPtr})"
    ],
    "description": "sampSendSpectatorData - Отправляет SpectatorData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC - RPC_CLICKPLAYER": {
    "scope": "lua",
    "prefix": "sampSendClickPlayer",
    "body": [
        "sampSendClickPlayer(${0:int id, int source})"
    ],
    "description": "sampSendClickPlayer - Отправляет RPC - RPC_CLICKPLAYER\nПринимаемые значения:\nint id ид игрока, int source источник вызова (\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC - RPC_DIALOGRESPONSE": {
    "scope": "lua",
    "prefix": "sampSendDialogResponse",
    "body": [
        "sampSendDialogResponse(${0:int id, int button, int listitem, zstring input})"
    ],
    "description": "sampSendDialogResponse - Отправляет RPC - RPC_DIALOGRESPONSE\nПринимаемые значения:\nint id ид диалога, int button ид кнопки (0 / 1), int listitem номер элемента списка (от 0), zstring input текст введенный в поле\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC ClickTextdraw на сервер.": {
    "scope": "lua",
    "prefix": "sampSendClickTextdraw",
    "body": [
        "sampSendClickTextdraw(${0:int id})"
    ],
    "description": "sampSendClickTextdraw - Отправляет RPC ClickTextdraw на сервер.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC о нанесении урона другому игроку.": {
    "scope": "lua",
    "prefix": "sampSendGiveDamage",
    "body": [
        "sampSendGiveDamage(${0:int id, float damage, int weapon, int bodypart})"
    ],
    "description": "sampSendGiveDamage - Отправляет RPC о нанесении урона другому игроку.\nПринимаемые значения:\nint id ID игрока, float damage количество урона, int weapon ID оружия, int bodypart часть тела\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC о получении урона от другого игрока.": {
    "scope": "lua",
    "prefix": "sampSendTakeDamage",
    "body": [
        "sampSendTakeDamage(${0:int id, float damage, int weapon, int bodypart})"
    ],
    "description": "sampSendTakeDamage - Отправляет RPC о получении урона от другого игрока.\nПринимаемые значения:\nint id ID игрока, float damage количество урона, int weapon ID оружия, int bodypart часть тела\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC о изменении структуры объекта в режиме его редактирования.": {
    "scope": "lua",
    "prefix": "sampSendEditObject",
    "body": [
        "sampSendEditObject(${0:bool playerObject, int objectId, int response, float posX, float posY, float posZ, float rotX, float rotY, float rotZ})"
    ],
    "description": "sampSendEditObject - Отправляет RPC о изменении структуры объекта в режиме его редактирования.\nПринимаемые значения:\nbool playerObject 0 --- глобальный объект / 1 --- объект для одного игрока, int objectId ID объекта, int response Тип ответа (от 0 до 2), float posX, float posY, float posZ Позиция объекта, float rotX, float rotY, float rotZ Поворот объекта\\\\\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC о изменении прикрепленного объекта в режиме редактирования объекта.": {
    "scope": "lua",
    "prefix": "sampSendEditAttachedObject",
    "body": [
        "sampSendEditAttachedObject(${0:int response, int index, int model, int bone, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ})"
    ],
    "description": "sampSendEditAttachedObject - Отправляет RPC о изменении прикрепленного объекта в режиме редактирования объекта.\nПринимаемые значения:\nint response Cтатус ответа(0 --- нажата отмена(ESC) / 1 --- сохранено), int index Индекс/слот объекта, int model Модель объекта, int bone ID кости к которой присоединен объект, float offsetX, float offsetY, float offsetZ Смещение объекта, float rotX, float rotY, float rotZ Поворот объекта, float scaleX, float scaleY, float scaleZ Масштаб объекта\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC - RPC_SETINTERIORID": {
    "scope": "lua",
    "prefix": "sampSendInteriorChange",
    "body": [
        "sampSendInteriorChange(${0:int id})"
    ],
    "description": "sampSendInteriorChange - Отправляет RPC - RPC_SETINTERIORID\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC - RPC_REQUESTSPAWN": {
    "scope": "lua",
    "prefix": "sampSendRequestSpawn",
    "body": [
        "sampSendRequestSpawn()"
    ],
    "description": "sampSendRequestSpawn - Отправляет RPC - RPC_REQUESTSPAWN\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC - RPC_PICKEDUPPICKUP": {
    "scope": "lua",
    "prefix": "sampSendPickedUpPickup",
    "body": [
        "sampSendPickedUpPickup(${0:int id})"
    ],
    "description": "sampSendPickedUpPickup - Отправляет RPC - RPC_PICKEDUPPICKUP\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC - RPC_MENUSELECT": {
    "scope": "lua",
    "prefix": "sampSendMenuSelectRow",
    "body": [
        "sampSendMenuSelectRow(${0:int id})"
    ],
    "description": "sampSendMenuSelectRow - Отправляет RPC - RPC_MENUSELECT\nПринимаемые значения:\nint id номер строки меню\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC - RPC_MENUQUIT": {
    "scope": "lua",
    "prefix": "sampSendMenuQuit",
    "body": [
        "sampSendMenuQuit()"
    ],
    "description": "sampSendMenuQuit - Отправляет RPC - RPC_MENUQUIT\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Отправляет RPC - RPC_VEHICLEDESTROYED": {
    "scope": "lua",
    "prefix": "sampSendVehicleDestroyed",
    "body": [
        "sampSendVehicleDestroyed(${0:int id})"
    ],
    "description": "sampSendVehicleDestroyed - Отправляет RPC - RPC_VEHICLEDESTROYED\nПринимаемые значения:\nint id ид т/с\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет видимость списка игроков (TAB)": {
    "scope": "lua",
    "prefix": "sampIsScoreboardOpen",
    "body": [
        "${1:bool result} = sampIsScoreboardOpen()"
    ],
    "description": "sampIsScoreboardOpen - Проверяет видимость списка игроков (TAB)\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Переключает видимость списка игроков (TAB)": {
    "scope": "lua",
    "prefix": "sampToggleScoreboard",
    "body": [
        "sampToggleScoreboard(${0:bool show})"
    ],
    "description": "sampToggleScoreboard - Переключает видимость списка игроков (TAB)\nПринимаемые значения:\nbool show статус\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает основной текст последнего или активного диалогового окна.": {
    "scope": "lua",
    "prefix": "sampGetDialogText",
    "body": [
        "${1:string text} = sampGetDialogText()"
    ],
    "description": "sampGetDialogText - Возвращает основной текст последнего или активного диалогового окна.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nstring text текст\n"
},
"→︎ Возвращает заголовок последнего открытого диалога": {
    "scope": "lua",
    "prefix": "sampGetDialogCaption",
    "body": [
        "${1:zstring caption} = sampGetDialogCaption()"
    ],
    "description": "sampGetDialogCaption - Возвращает заголовок последнего открытого диалога\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Устанавливает сторону (клиентская/серверная) диалога., Если указана клиентская, то информация после закрытия диалога (Dialog Response) не будет отправлена на сервер": {
    "scope": "lua",
    "prefix": "sampSetDialogClientside",
    "body": [
        "sampSetDialogClientside(${0:bool clientside})"
    ],
    "description": "sampSetDialogClientside - Устанавливает сторону (клиентская/серверная) диалога., Если указана клиентская, то информация после закрытия диалога (Dialog Response) не будет отправлена на сервер\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет диалог на то, что тот принадлежит клиентской стороне": {
    "scope": "lua",
    "prefix": "sampIsDialogClientside",
    "body": [
        "${1:bool result} = sampIsDialogClientside()"
    ],
    "description": "sampIsDialogClientside - Проверяет диалог на то, что тот принадлежит клиентской стороне\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Проверяет видимость чата": {
    "scope": "lua",
    "prefix": "sampIsChatVisible",
    "body": [
        "${1:bool result} = sampIsChatVisible()"
    ],
    "description": "sampIsChatVisible - Проверяет видимость чата\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Возвращает режим отображения чата, Режимы:, 2 - обычный, 1 - без тени у текста, 0 - не виден\\\\": {
    "scope": "lua",
    "prefix": "sampGetChatDisplayMode",
    "body": [
        "${1:int mode} = sampGetChatDisplayMode()"
    ],
    "description": "sampGetChatDisplayMode - Возвращает режим отображения чата, Режимы:, 2 - обычный, 1 - без тени у текста, 0 - не виден\\\\\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Устанавливает режим отображения чата": {
    "scope": "lua",
    "prefix": "sampSetChatDisplayMode",
    "body": [
        "sampSetChatDisplayMode(${0:int mode})"
    ],
    "description": "sampSetChatDisplayMode - Устанавливает режим отображения чата\nПринимаемые значения:\nint mode режим отображения чата\n\nВозвращаемые значения:\n\n"
},
"→︎ Возобновляет исполнение SCM-потока.": {
    "scope": "lua",
    "prefix": "resumeScmThread",
    "body": [
        "resumeScmThread(${0:uint thread})"
    ],
    "description": "resumeScmThread - Возобновляет исполнение SCM-потока.\nПринимаемые значения:\nuint thread указатель на поток\n\nВозвращаемые значения:\n\n"
},
"→︎ Читает значение типа boolean из BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamReadBool",
    "body": [
        "${1:bool value} = raknetBitStreamReadBool(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamReadBool - Читает значение типа boolean из BitStream.\nПринимаемые значения:\nBitstream bs bitStream\n\nВозвращаемые значения:\nbool value результирующее значение\n"
},
"→︎ Читает значение типа byte из BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamReadInt8",
    "body": [
        "${1:int value} = raknetBitStreamReadInt8(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamReadInt8 - Читает значение типа byte из BitStream.\nПринимаемые значения:\nBitstream bs bitStream\n\nВозвращаемые значения:\nint value результирующее значение\n"
},
"→︎ Читает значение типа short (2 байта) из BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamReadInt16",
    "body": [
        "${1:int value} = raknetBitStreamReadInt16(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamReadInt16 - Читает значение типа short (2 байта) из BitStream.\nПринимаемые значения:\nBitstream bs bitStream\n\nВозвращаемые значения:\nint value результирующее значение\n"
},
"→︎ Читает значение типа integer (4 байта) из BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamReadInt32",
    "body": [
        "${1:int value} = raknetBitStreamReadInt32(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamReadInt32 - Читает значение типа integer (4 байта) из BitStream.\nПринимаемые значения:\nBitstream bs bitStream\n\nВозвращаемые значения:\nint value результирующее значение\n"
},
"→︎ Читает значение типа float из BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamReadFloat",
    "body": [
        "${1:float value} = raknetBitStreamReadFloat(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamReadFloat - Читает значение типа float из BitStream.\nПринимаемые значения:\nBitstream bs bitStream\n\nВозвращаемые значения:\nfloat value результирующее значение\n"
},
"→︎ Читает буффер указанного размера из BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamReadBuffer",
    "body": [
        "raknetBitStreamReadBuffer(${0:Bitstream bs, int dest, int size})"
    ],
    "description": "raknetBitStreamReadBuffer - Читает буффер указанного размера из BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int dest буффер, int size размер\n\nВозвращаемые значения:\n\n"
},
"→︎ Читает строку указанной длины (переменный размер) из BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamReadString",
    "body": [
        "${1:string value} = raknetBitStreamReadString(${0:Bitstream bs, int size})"
    ],
    "description": "raknetBitStreamReadString - Читает строку указанной длины (переменный размер) из BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int size длина строки\n\nВозвращаемые значения:\nstring value результирующее значение\n"
},
"→︎ Сбрасывает указатель чтения битстрима": {
    "scope": "lua",
    "prefix": "raknetBitStreamResetReadPointer",
    "body": [
        "raknetBitStreamResetReadPointer(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamResetReadPointer - Сбрасывает указатель чтения битстрима\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
},
"→︎ Сбрасывает указатель записи битстрима": {
    "scope": "lua",
    "prefix": "raknetBitStreamResetWritePointer",
    "body": [
        "raknetBitStreamResetWritePointer(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamResetWritePointer - Сбрасывает указатель записи битстрима\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
},
"→︎ Осуществляет пропуск битов в указателе чтения/записи битстрима": {
    "scope": "lua",
    "prefix": "raknetBitStreamIgnoreBits",
    "body": [
        "raknetBitStreamIgnoreBits(${0:Bitstream bs, int amount})"
    ],
    "description": "raknetBitStreamIgnoreBits - Осуществляет пропуск битов в указателе чтения/записи битстрима\nПринимаемые значения:\nBitstream bs , int amount количество битов\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает смещение для последующей записи в битстрим": {
    "scope": "lua",
    "prefix": "raknetBitStreamSetWriteOffset",
    "body": [
        "raknetBitStreamSetWriteOffset(${0:Bitstream bs, int offset})"
    ],
    "description": "raknetBitStreamSetWriteOffset - Устанавливает смещение для последующей записи в битстрим\nПринимаемые значения:\nBitstream bs , int offset смещение (в битах)\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает смещение для последующего чтения битстрима": {
    "scope": "lua",
    "prefix": "raknetBitStreamSetReadOffset",
    "body": [
        "raknetBitStreamSetReadOffset(${0:Bitstream bs, int offset})"
    ],
    "description": "raknetBitStreamSetReadOffset - Устанавливает смещение для последующего чтения битстрима\nПринимаемые значения:\nBitstream bs , int offset смещение (в битах)\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает количество записанных битов в битстриме": {
    "scope": "lua",
    "prefix": "raknetBitStreamGetNumberOfBitsUsed",
    "body": [
        "${1:int value} = raknetBitStreamGetNumberOfBitsUsed(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamGetNumberOfBitsUsed - Возвращает количество записанных битов в битстриме\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Возвращает количество записанных байтов в битстриме": {
    "scope": "lua",
    "prefix": "raknetBitStreamGetNumberOfBytesUsed",
    "body": [
        "${1:int value} = raknetBitStreamGetNumberOfBytesUsed(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamGetNumberOfBytesUsed - Возвращает количество записанных байтов в битстриме\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Возвращает количество непрочитанных битов в битстриме": {
    "scope": "lua",
    "prefix": "raknetBitStreamGetNumberOfUnreadBits",
    "body": [
        "${1:int value} = raknetBitStreamGetNumberOfUnreadBits(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamGetNumberOfUnreadBits - Возвращает количество непрочитанных битов в битстриме\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Возвращает текущий оффсет записи в BitStream.": {
    "scope": "lua",
    "prefix": "raknetBitStreamGetWriteOffset",
    "body": [
        "${1:int value} = raknetBitStreamGetWriteOffset(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamGetWriteOffset - Возвращает текущий оффсет записи в BitStream.\nПринимаемые значения:\nBitstream bs Указатель на BitStream\n\nВозвращаемые значения:\nint value Оффсет\n"
},
"→︎ Возвращает текущий оффсет чтения из BitStream'а.": {
    "scope": "lua",
    "prefix": "raknetBitStreamGetReadOffset",
    "body": [
        "${1:int value} = raknetBitStreamGetReadOffset(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamGetReadOffset - Возвращает текущий оффсет чтения из BitStream'а.\nПринимаемые значения:\nBitstream bs Указатель на BitStream\n\nВозвращаемые значения:\nint value Оффсет\n"
},
"→︎ Возвращает указатель на данные BitStream'а.": {
    "scope": "lua",
    "prefix": "raknetBitStreamGetDataPtr",
    "body": [
        "${1:uint value} = raknetBitStreamGetDataPtr(${0:Bitstream bs})"
    ],
    "description": "raknetBitStreamGetDataPtr - Возвращает указатель на данные BitStream'а.\nПринимаемые значения:\nBitstream bs BitStream\\\\\n\nВозвращаемые значения:\nuint value указатель на структуру данных\\\\\n"
},
"→︎ Декриптует строку из BitStream`a и записывает её в буфер": {
    "scope": "lua",
    "prefix": "raknetBitStreamDecodeString",
    "body": [
        "${1:zstring string} = raknetBitStreamDecodeString(${0:Bitstream bs, int size})"
    ],
    "description": "raknetBitStreamDecodeString - Декриптует строку из BitStream`a и записывает её в буфер\nПринимаемые значения:\nBitstream bs Указатель на BitStream, int size Размер буфера\n\nВозвращаемые значения:\nzstring string Буфер\n"
},
"→︎ Криптует строку и записывает в BitStream": {
    "scope": "lua",
    "prefix": "raknetBitStreamEncodeString",
    "body": [
        "raknetBitStreamEncodeString(${0:Bitstream bs, zstring string})"
    ],
    "description": "raknetBitStreamEncodeString - Криптует строку и записывает в BitStream\nПринимаемые значения:\nBitstream bs Указатель на BitStream, zstring string Буфер\n\nВозвращаемые значения:\n\n"
},
"→︎ Эмулирует входящий RPC с помощью данных BitStream'а.": {
    "scope": "lua",
    "prefix": "raknetEmulRpcReceiveBitStream",
    "body": [
        "raknetEmulRpcReceiveBitStream(${0:int rpc, Bitstream bs})"
    ],
    "description": "raknetEmulRpcReceiveBitStream - Эмулирует входящий RPC с помощью данных BitStream'а.\nПринимаемые значения:\nint rpc ID RPC, Bitstream bs Указатель на BitStream\n\nВозвращаемые значения:\n\n"
},
"→︎ Эмулирует входящий пакет с помощью даннных BitStream'а.": {
    "scope": "lua",
    "prefix": "raknetEmulPacketReceiveBitStream",
    "body": [
        "raknetEmulPacketReceiveBitStream(${0:int PacketId, int BitStream})"
    ],
    "description": "raknetEmulPacketReceiveBitStream - Эмулирует входящий пакет с помощью даннных BitStream'а.\nПринимаемые значения:\nint Packet Id ID пакета, int BitStream Указатель на BitStream\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает наименование RPC по его ид": {
    "scope": "lua",
    "prefix": "raknetGetRpcName",
    "body": [
        "${1:zstring name} = raknetGetRpcName(${0:int rpc})"
    ],
    "description": "raknetGetRpcName - Возвращает наименование RPC по его ид\nПринимаемые значения:\nint rpc ид RPC\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Возвращает наименование пакета по его ид": {
    "scope": "lua",
    "prefix": "raknetGetPacketName",
    "body": [
        "${1:zstring name} = raknetGetPacketName(${0:int packet})"
    ],
    "description": "raknetGetPacketName - Возвращает наименование пакета по его ид\nПринимаемые значения:\nint packet ид пакета\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Устанавливает новое значение (регистрирует) для глобальной переменной SAMPFUNCS": {
    "scope": "lua",
    "prefix": "setSampfuncsGlobalVar",
    "body": [
        "${1:bool result} = setSampfuncsGlobalVar(${0:zstring var, int value})"
    ],
    "description": "setSampfuncsGlobalVar - Устанавливает новое значение (регистрирует) для глобальной переменной SAMPFUNCS\nПринимаемые значения:\nzstring var наименование переменной, int value значение переменной\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Возвращает значение глобальной переменной, зарегистрированной с помощью SAMPFUNCS": {
    "scope": "lua",
    "prefix": "getSampfuncsGlobalVar",
    "body": [
        "${1:bool result, int value} = getSampfuncsGlobalVar(${0:zstring var})"
    ],
    "description": "getSampfuncsGlobalVar - Возвращает значение глобальной переменной, зарегистрированной с помощью SAMPFUNCS\nПринимаемые значения:\nzstring var наименование переменной\n\nВозвращаемые значения:\nbool result переменная найдена, int value значение переменной\n"
},
"→︎ Создает (перезаписывает) SAMP объект --- 3D-текст., В отличии от sampCreate3dText данная функция взаимодействует с SAMP пулом напрямую.": {
    "scope": "lua",
    "prefix": "sampCreate3dTextEx",
    "body": [
        "sampCreate3dTextEx(${0:int id, zstring text, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId})"
    ],
    "description": "sampCreate3dTextEx - Создает (перезаписывает) SAMP объект --- 3D-текст., В отличии от sampCreate3dText данная функция взаимодействует с SAMP пулом напрямую.\nПринимаемые значения:\nint id Ид создаваемого/перезаписываемого 3D-текста, zstring text Содержимое, int color Цвет (ARGB), float posX Позиция/смещение относительно крепления по оси X, float posY Позиция/смещение относительно крепления по оси Y, float posZ Позиция/смещение относительно крепления по оси Z, float distance Дистанция при которой будет виден 3D-текст, bool ignoreWalls Виден за объектами/стенами, int playerId Крепление к игроку по ид (-1 --- отключить), int vehicleId Крепление к т/с по ид (-1 --- отключить)\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает параметры 3D текста.": {
    "scope": "lua",
    "prefix": "sampGet3dTextInfoById",
    "body": [
        "${1:string string, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId} = sampGet3dTextInfoById(${0:int id})"
    ],
    "description": "sampGet3dTextInfoById - Получает параметры 3D текста.\nПринимаемые значения:\nint id ID 3D Текста\n\nВозвращаемые значения:\nstring string текст., int color цвет., float posX , float posY , float posZ координаты 3D текста(XYZ), float distance дистанция., bool ignoreWalls виден ли через стены., int playerId если прикреплен к игроку, то возвращает его ид., int vehicleId если прикреплен к т/с, то возвращает его ид\n"
},
"→︎ Устанавливает 3D тексту новый текст.": {
    "scope": "lua",
    "prefix": "sampSet3dTextString",
    "body": [
        "sampSet3dTextString(${0:int id, string text})"
    ],
    "description": "sampSet3dTextString - Устанавливает 3D тексту новый текст.\nПринимаемые значения:\nint id ID 3D текста., string text текст\n\nВозвращаемые значения:\n\n"
},
"→︎ Создает текстдрав c заданными параметрами.": {
    "scope": "lua",
    "prefix": "sampTextdrawCreate",
    "body": [
        "sampTextdrawCreate(${0:int id, string text, float posX, float posY})"
    ],
    "description": "sampTextdrawCreate - Создает текстдрав c заданными параметрами.\nПринимаемые значения:\nint id ID текстдрава, string text текст текстдрава, float posX , float posY координаты текстдрава(XY)\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает параметры прямоугольника текстдраву.": {
    "scope": "lua",
    "prefix": "sampTextdrawSetBoxColorAndSize",
    "body": [
        "sampTextdrawSetBoxColorAndSize(${0:int id, int box, int color, float sizeX, float sizeY})"
    ],
    "description": "sampTextdrawSetBoxColorAndSize - Устанавливает параметры прямоугольника текстдраву.\nПринимаемые значения:\nint id ID текстдрава, int box статус, int color цвет, float sizeX , float sizeY размеры\n\nВозвращаемые значения:\n\n"
},
"→︎ Задает выравнивание текста текстдраву.": {
    "scope": "lua",
    "prefix": "sampTextdrawSetAlign",
    "body": [
        "sampTextdrawSetAlign(${0:int id, int align})"
    ],
    "description": "sampTextdrawSetAlign - Задает выравнивание текста текстдраву.\nПринимаемые значения:\nint id ID текстдрава, int align тип выравнивания\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает масштабирование текста текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawSetProportional",
    "body": [
        "sampTextdrawSetProportional(${0:int id, int proportional})"
    ],
    "description": "sampTextdrawSetProportional - Устанавливает масштабирование текста текстдрава.\nПринимаемые значения:\nint id ID текстдрава, int proportional статус\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает стиль текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawSetStyle",
    "body": [
        "sampTextdrawSetStyle(${0:int id, int style})"
    ],
    "description": "sampTextdrawSetStyle - Устанавливает стиль текстдрава.\nПринимаемые значения:\nint id ID текстдрава, int style стиль\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает тень текстдраву.": {
    "scope": "lua",
    "prefix": "sampTextdrawSetShadow",
    "body": [
        "sampTextdrawSetShadow(${0:int id, int shadow, int color})"
    ],
    "description": "sampTextdrawSetShadow - Устанавливает тень текстдраву.\nПринимаемые значения:\nint id ID текстдрава, int shadow размер тени, int color цвет\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает текстдраву обводку": {
    "scope": "lua",
    "prefix": "sampTextdrawSetOutlineColor",
    "body": [
        "sampTextdrawSetOutlineColor(${0:int id, int outline, int color})"
    ],
    "description": "sampTextdrawSetOutlineColor - Устанавливает текстдраву обводку\nПринимаемые значения:\nint id ID текстдрава, int outline толщина обводки, int color цвет\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает модель объекта/машины текстдраву со стилем 5.": {
    "scope": "lua",
    "prefix": "sampTextdrawSetModelRotationZoomVehColor",
    "body": [
        "sampTextdrawSetModelRotationZoomVehColor(${0:int id, int model, float rotX, float rotY, float rotZ, float zoom, int clr1, int clr2})"
    ],
    "description": "sampTextdrawSetModelRotationZoomVehColor - Устанавливает модель объекта/машины текстдраву со стилем 5.\nПринимаемые значения:\nint id ID текстдрава, int model номер модели, float rotX , float rotY , float rotZ вращение модели по осям (XYZ), float zoom дальность камеры, int clr1 , int clr2 первичный и вторичный цвет\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает текст текстдраву.": {
    "scope": "lua",
    "prefix": "sampTextdrawSetString",
    "body": [
        "sampTextdrawSetString(${0:int id, string text})"
    ],
    "description": "sampTextdrawSetString - Устанавливает текст текстдраву.\nПринимаемые значения:\nint id ID текстдрава, string text текст\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает позицию текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawSetPos",
    "body": [
        "sampTextdrawSetPos(${0:int id, float posX, float posY})"
    ],
    "description": "sampTextdrawSetPos - Устанавливает позицию текстдрава.\nПринимаемые значения:\nint id ID текстдрава, float posX , float posY позиция текстдрава (XY)\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает параметры символов текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawSetLetterSizeAndColor",
    "body": [
        "sampTextdrawSetLetterSizeAndColor(${0:int id, float letSizeX, float letSizeY, int color})"
    ],
    "description": "sampTextdrawSetLetterSizeAndColor - Устанавливает параметры символов текстдрава.\nПринимаемые значения:\nint id ID текстдрава, float letSizeX , float letSizeY Размер, int color цвет\n\nВозвращаемые значения:\n\n"
},
"→︎ Получает параметры прямоугольника текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawGetBoxEnabledColorAndSize",
    "body": [
        "${1:int box, int color, float sizeX, float sizeY} = sampTextdrawGetBoxEnabledColorAndSize(${0:int id})"
    ],
    "description": "sampTextdrawGetBoxEnabledColorAndSize - Получает параметры прямоугольника текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint box статус., int color цвет., float sizeX , float sizeY размер\n"
},
"→︎ Получает тип выравнивания текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawGetAlign",
    "body": [
        "${1:int align} = sampTextdrawGetAlign(${0:int id})"
    ],
    "description": "sampTextdrawGetAlign - Получает тип выравнивания текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint align тип\n"
},
"→︎ Получает статус масштабирования текста в пропорциональном соотношении указанного текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawGetProportional",
    "body": [
        "${1:int prop} = sampTextdrawGetProportional(${0:int id})"
    ],
    "description": "sampTextdrawGetProportional - Получает статус масштабирования текста в пропорциональном соотношении указанного текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint prop пропорция\n"
},
"→︎ Получает стиль текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawGetStyle",
    "body": [
        "${1:int style} = sampTextdrawGetStyle(${0:int id})"
    ],
    "description": "sampTextdrawGetStyle - Получает стиль текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint style стиль\n"
},
"→︎ Получает параметры тени текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawGetShadowColor",
    "body": [
        "${1:int shadow, int color} = sampTextdrawGetShadowColor(${0:int id})"
    ],
    "description": "sampTextdrawGetShadowColor - Получает параметры тени текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint shadow размер., int color цвет\n"
},
"→︎ Получает параметры обводки текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawGetOutlineColor",
    "body": [
        "${1:int outline, int color} = sampTextdrawGetOutlineColor(${0:int id})"
    ],
    "description": "sampTextdrawGetOutlineColor - Получает параметры обводки текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint outline толщина., int color цвет\n"
},
"→︎ Получает параметры модели текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawGetModelRotationZoomVehColor",
    "body": [
        "${1:int model, float rotX, float rotY, float rotZ, float zoom, int clr1, int clr2} = sampTextdrawGetModelRotationZoomVehColor(${0:int id})"
    ],
    "description": "sampTextdrawGetModelRotationZoomVehColor - Получает параметры модели текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint model модель, float rotX , float rotY , float rotZ поворот по осям(XYZ), float zoom отдаление камеры, int clr1 , int clr2 первичный и вторичный цвета\n"
},
"→︎ Получает текст текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawGetString",
    "body": [
        "${1:string text} = sampTextdrawGetString(${0:int id})"
    ],
    "description": "sampTextdrawGetString - Получает текст текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nstring text текст\n"
},
"→︎ Получает позицию текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawGetPos",
    "body": [
        "${1:float posX, float posY} = sampTextdrawGetPos(${0:int id})"
    ],
    "description": "sampTextdrawGetPos - Получает позицию текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nfloat posX , float posY позиция по X и Y\n"
},
"→︎ Получает длину, ширину и цвет текстдрава.": {
    "scope": "lua",
    "prefix": "sampTextdrawGetLetterSizeAndColor",
    "body": [
        "${1:float letSizeX, float letSizeY, int color} = sampTextdrawGetLetterSizeAndColor(${0:int id})"
    ],
    "description": "sampTextdrawGetLetterSizeAndColor - Получает длину, ширину и цвет текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nfloat letSizeX , float letSizeY размер., int color цвет\n"
},
"→︎ Проверяет текстдрав на существование.": {
    "scope": "lua",
    "prefix": "sampTextdrawIsExists",
    "body": [
        "${1:bool result} = sampTextdrawIsExists(${0:int id})"
    ],
    "description": "sampTextdrawIsExists - Проверяет текстдрав на существование.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nbool result результат проверки\n"
},
"→︎ Удаляет текстдрав.": {
    "scope": "lua",
    "prefix": "sampTextdrawDelete",
    "body": [
        "sampTextdrawDelete(${0:int id})"
    ],
    "description": "sampTextdrawDelete - Удаляет текстдрав.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет существование глобальной переменной, зарегистрированной с помощью SAMPFUNCS": {
    "scope": "lua",
    "prefix": "isSampfuncsGlobalVarDefined",
    "body": [
        "${1:bool result} = isSampfuncsGlobalVarDefined(${0:zstring var})"
    ],
    "description": "isSampfuncsGlobalVarDefined - Проверяет существование глобальной переменной, зарегистрированной с помощью SAMPFUNCS\nПринимаемые значения:\nzstring var наименование переменной\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Возвращает разрешения записи/чтения глобальной переменной, зарегистрированной с помощью SAMPFUNCS, для указанного SCM-потока": {
    "scope": "lua",
    "prefix": "getSampfuncsGlobalVarAccessForThread",
    "body": [
        "${1:int read, int write} = getSampfuncsGlobalVarAccessForThread(${0:zstring var, int thread})"
    ],
    "description": "getSampfuncsGlobalVarAccessForThread - Возвращает разрешения записи/чтения глобальной переменной, зарегистрированной с помощью SAMPFUNCS, для указанного SCM-потока\nПринимаемые значения:\nzstring var наименование переменной, int thread указатель на поток\n\nВозвращаемые значения:\nint read чтение (bool?), int write запись (bool?)\n"
},
"→︎ Выполняет указанную консольную SAMPFUNCS команду": {
    "scope": "lua",
    "prefix": "runSampfuncsConsoleCommand",
    "body": [
        "runSampfuncsConsoleCommand(${0:zstring cmd})"
    ],
    "description": "runSampfuncsConsoleCommand - Выполняет указанную консольную SAMPFUNCS команду\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
},
"→︎ Отменяет регистрацию консольной команды, созданной с помощью функции sampfuncsRegisterConsoleCommand.": {
    "scope": "lua",
    "prefix": "sampfuncsUnregisterConsoleCommand",
    "body": [
        "${1:bool result} = sampfuncsUnregisterConsoleCommand(${0:string cmd})"
    ],
    "description": "sampfuncsUnregisterConsoleCommand - Отменяет регистрацию консольной команды, созданной с помощью функции sampfuncsRegisterConsoleCommand.\nПринимаемые значения:\nstring cmd команда\n\nВозвращаемые значения:\nbool result результат выполнения\n"
},
"→︎ Создает SCM-поток, содержимое которого будет определено из участка памяти": {
    "scope": "lua",
    "prefix": "createScmThreadAtPointer",
    "body": [
        "${1:int thread} = createScmThreadAtPointer(${0:int pointer, table args})"
    ],
    "description": "createScmThreadAtPointer - Создает SCM-поток, содержимое которого будет определено из участка памяти\nПринимаемые значения:\nint pointer Указатель на участок памяти, table args Передаваемые значения/аргументы\n\nВозвращаемые значения:\nint thread Указатель на поток\n"
},
"→︎ Устанавливает новое значение переменной в SCM-потоке": {
    "scope": "lua",
    "prefix": "setScmThreadLocalVar",
    "body": [
        "setScmThreadLocalVar(${0:int thread, int var, int value})"
    ],
    "description": "setScmThreadLocalVar - Устанавливает новое значение переменной в SCM-потоке\nПринимаемые значения:\nint thread Указатель на поток, int var Номер переменной, int value Значение\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает значение переменной в SCM-потоке": {
    "scope": "lua",
    "prefix": "getScmThreadLocalVar",
    "body": [
        "${1:int value} = getScmThreadLocalVar(${0:int thread, int var})"
    ],
    "description": "getScmThreadLocalVar - Возвращает значение переменной в SCM-потоке\nПринимаемые значения:\nint thread Указатель на поток, int var Номер переменной\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Уничтожает ранее созданный SCM-поток": {
    "scope": "lua",
    "prefix": "destroyScmThread",
    "body": [
        "destroyScmThread(${0:int thread})"
    ],
    "description": "destroyScmThread - Уничтожает ранее созданный SCM-поток\nПринимаемые значения:\nint thread Указатель на поток\n\nВозвращаемые значения:\n\n"
},
"→︎ Перезагружает ранее созданный SCM-поток": {
    "scope": "lua",
    "prefix": "restartScmThread",
    "body": [
        "restartScmThread(${0:int thread, table args})"
    ],
    "description": "restartScmThread - Перезагружает ранее созданный SCM-поток\nПринимаемые значения:\nint thread Указатель на поток, table args Передаваемые значения/аргументы в поток\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет видимость/активность консоли SAMPFUNCS": {
    "scope": "lua",
    "prefix": "isSampfuncsConsoleActive",
    "body": [
        "${1:bool result} = isSampfuncsConsoleActive()"
    ],
    "description": "isSampfuncsConsoleActive - Проверяет видимость/активность консоли SAMPFUNCS\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Устанавливает описание для клиентской команды": {
    "scope": "lua",
    "prefix": "sampSetClientCommandDescription",
    "body": [
        "sampSetClientCommandDescription(${0:zstring cmd, zstring text})"
    ],
    "description": "sampSetClientCommandDescription - Устанавливает описание для клиентской команды\nПринимаемые значения:\nzstring cmd Команда, zstring text Описание\n\nВозвращаемые значения:\n\n"
},
"→︎ Устанавливает описание для консольной команды": {
    "scope": "lua",
    "prefix": "setSampfuncsConsoleCommandDescription",
    "body": [
        "setSampfuncsConsoleCommandDescription(${0:zstring cmd, zstring text})"
    ],
    "description": "setSampfuncsConsoleCommandDescription - Устанавливает описание для консольной команды\nПринимаемые значения:\nzstring cmd Команда, zstring text Описание\n\nВозвращаемые значения:\n\n"
},
"→︎ Принудительная отправка пакета синхронизации - PACKET_VEHICLE_SYNC": {
    "scope": "lua",
    "prefix": "sampForceVehicleSync",
    "body": [
        "sampForceVehicleSync(${0:int id})"
    ],
    "description": "sampForceVehicleSync - Принудительная отправка пакета синхронизации - PACKET_VEHICLE_SYNC\nПринимаемые значения:\nint id SAMP ид т/с\n\nВозвращаемые значения:\n\n"
},
"→︎ Принудительная отправка пакета синхронизации - PACKET_UNOCCUPIED_SYNC": {
    "scope": "lua",
    "prefix": "sampForceUnoccupiedSyncSeatId",
    "body": [
        "sampForceUnoccupiedSyncSeatId(${0:int id, int seatId})"
    ],
    "description": "sampForceUnoccupiedSyncSeatId - Принудительная отправка пакета синхронизации - PACKET_UNOCCUPIED_SYNC\nПринимаемые значения:\nint id SAMP ид т/с, int seatId Номер сиденья\n\nВозвращаемые значения:\n\n"
},
"→︎ Принудительная отправка пакета синхронизации - PACKET_PLAYER_SYNC": {
    "scope": "lua",
    "prefix": "sampForceOnfootSync",
    "body": [
        "sampForceOnfootSync()"
    ],
    "description": "sampForceOnfootSync - Принудительная отправка пакета синхронизации - PACKET_PLAYER_SYNC\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Принудительная отправка пакета синхронизации - PACKET_AIM_SYNC": {
    "scope": "lua",
    "prefix": "sampForceAimSync",
    "body": [
        "sampForceAimSync()"
    ],
    "description": "sampForceAimSync - Принудительная отправка пакета синхронизации - PACKET_AIM_SYNC\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Принудительная отправка пакета синхронизации - PACKET_TRAILER_SYNC": {
    "scope": "lua",
    "prefix": "sampForceTrailerSync",
    "body": [
        "sampForceTrailerSync(${0:int id})"
    ],
    "description": "sampForceTrailerSync - Принудительная отправка пакета синхронизации - PACKET_TRAILER_SYNC\nПринимаемые значения:\nint id SAMP ид трейлера\n\nВозвращаемые значения:\n\n"
},
"→︎ Принудительная отправка пакета синхронизации - PACKET_PASSENGER_SYNC": {
    "scope": "lua",
    "prefix": "sampForcePassengerSyncSeatId",
    "body": [
        "sampForcePassengerSyncSeatId(${0:int id, int seatId})"
    ],
    "description": "sampForcePassengerSyncSeatId - Принудительная отправка пакета синхронизации - PACKET_PASSENGER_SYNC\nПринимаемые значения:\nint id SAMP ид т/с, int seatId Номер сиденья\n\nВозвращаемые значения:\n\n"
},
"→︎ Принудительная отправка пакета синхронизации - PACKET_STATS_UPDATE": {
    "scope": "lua",
    "prefix": "sampForceStatsSync",
    "body": [
        "sampForceStatsSync()"
    ],
    "description": "sampForceStatsSync - Принудительная отправка пакета синхронизации - PACKET_STATS_UPDATE\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Принудительная отправка пакета синхронизации - PACKET_WEAPONS_UPDATE": {
    "scope": "lua",
    "prefix": "sampForceWeaponsSync",
    "body": [
        "sampForceWeaponsSync()"
    ],
    "description": "sampForceWeaponsSync - Принудительная отправка пакета синхронизации - PACKET_WEAPONS_UPDATE\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
},
"→︎ Возвращает максимальный SAMP ид игрока на сервере/в зоне прорисовки (стриме)": {
    "scope": "lua",
    "prefix": "sampGetMaxPlayerId",
    "body": [
        "${1:int id} = sampGetMaxPlayerId(${0:bool streamed})"
    ],
    "description": "sampGetMaxPlayerId - Возвращает максимальный SAMP ид игрока на сервере/в зоне прорисовки (стриме)\nПринимаемые значения:\nbool streamed Поиск в стриме\n\nВозвращаемые значения:\nint id ID игрока\n"
},
"→︎ Возвращает количество игроков. При streamed = false возвращает количество игроков на сервере, при противоположном значении - количество игроков в зоне прорисовки (стриме)": {
    "scope": "lua",
    "prefix": "sampGetPlayerCount",
    "body": [
        "${1:int count} = sampGetPlayerCount(${0:bool streamed})"
    ],
    "description": "sampGetPlayerCount - Возвращает количество игроков. При streamed = false возвращает количество игроков на сервере, при противоположном значении - количество игроков в зоне прорисовки (стриме)\nПринимаемые значения:\nbool streamed Поиск в стриме\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Передает строку на обработку к ChatInput (поле для ввода в чате), FIXME Запрещен вызов внутри тела любой зарегистрированной команды (с помощью опкода 0B34 или функции sampRegisterChatCommand)": {
    "scope": "lua",
    "prefix": "sampProcessChatInput",
    "body": [
        "sampProcessChatInput(${0:zstring text})"
    ],
    "description": "sampProcessChatInput - Передает строку на обработку к ChatInput (поле для ввода в чате), FIXME Запрещен вызов внутри тела любой зарегистрированной команды (с помощью опкода 0B34 или функции sampRegisterChatCommand)\nПринимаемые значения:\nzstring text Команда/строка\n\nВозвращаемые значения:\n\n"
},
"→︎ Проверяет существование клиентской команды, зарегистрированной SAMPFUNCS": {
    "scope": "lua",
    "prefix": "sampIsChatCommandDefined",
    "body": [
        "${1:bool result} = sampIsChatCommandDefined(${0:zstring cmd})"
    ],
    "description": "sampIsChatCommandDefined - Проверяет существование клиентской команды, зарегистрированной SAMPFUNCS\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Проверяет существование консольной команды SAMPFUNCS": {
    "scope": "lua",
    "prefix": "isSampfuncsConsoleCommandDefined",
    "body": [
        "${1:bool result} = isSampfuncsConsoleCommandDefined(${0:zstring cmd})"
    ],
    "description": "isSampfuncsConsoleCommandDefined - Проверяет существование консольной команды SAMPFUNCS\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
},
"→︎ Получает версию Cleo.": {
    "scope": "lua",
    "prefix": "getCleoLibraryVersion",
    "body": [
        "${1:int version} = getCleoLibraryVersion()"
    ],
    "description": "getCleoLibraryVersion - Получает версию Cleo.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nversion версия CLEO\n"
},



    "AudioStreamState PAUSE": {"scope": "lua","prefix": "AudioStreamState PAUSE","body": ["2"],"description": "PAUSE"},
    "AudioStreamState STOP": {"scope": "lua","prefix": "AudioStreamState STOP","body": ["0"],"description": "STOP"},
    "AudioStreamState RESUME": {"scope": "lua","prefix": "AudioStreamState RESUME","body": ["3"],"description": "RESUME"},
    "AudioStreamState PLAY": {"scope": "lua","prefix": "AudioStreamState PLAY","body": ["1"],"description": "PLAY"},
    "AudioStreamStatus PAUSED": {"scope": "lua","prefix": "AudioStreamStatus PAUSED","body": ["2"],"description": "PAUSED"},
    "AudioStreamStatus STOPPED": {"scope": "lua","prefix": "AudioStreamStatus STOPPED","body": ["-1"],"description": "STOPPED"},
    "AudioStreamStatus PLAYING": {"scope": "lua","prefix": "AudioStreamStatus PLAYING","body": ["1"],"description": "PLAYING"},

    "FontFlag STRIKEOUT": {"scope": "lua","prefix": "FontFlag STRIKEOUT","body": ["32"],"description": "STRIKEOUT"},
    "FontFlag SHADOW": {"scope": "lua","prefix": "FontFlag SHADOW","body": ["8"],"description": "SHADOW"},
    "FontFlag UNDERLINE": {"scope": "lua","prefix": "FontFlag UNDERLINE","body": ["16"],"description": "UNDERLINE"},
    "FontFlag ITALICS": {"scope": "lua","prefix": "FontFlag ITALICS","body": ["2"],"description": "ITALICS"},
    "FontFlag NONE": {"scope": "lua","prefix": "FontFlag NONE","body": ["0"],"description": "NONE"},
    "FontFlag BORDER": {"scope": "lua","prefix": "FontFlag BORDER","body": ["4"],"description": "BORDER"},
    "FontFlag BOLD": {"scope": "lua","prefix": "FontFlag BOLD","body": ["1"],"description": "BOLD"},

    "DLStatus STATUS_CLASSIDAVAILABLE": {"scope": "lua","prefix": "DL_STATUS_CLASSIDAVAILABLE","body": ["12"],"description": "STATUS_CLASSIDAVAILABLE"},
    "DLStatus STATUS_PROXYDETECTING": {"scope": "lua","prefix": "DL_STATUS_PROXYDETECTING","body": ["32"],"description": "STATUS_PROXYDETECTING"},
    "DLStatus STATUSEX_DATAAVAILABLE": {"scope": "lua","prefix": "DL_STATUSEX_DATAAVAILABLE","body": ["60"],"description": "STATUSEX_DATAAVAILABLE"},
    "DLStatus STATUS_P3P_HEADER": {"scope": "lua","prefix": "DL_STATUS_P3P_HEADER","body": ["44"],"description": "STATUS_P3P_HEADER"},
    "DLStatus STATUS_BEGINSYNCOPERATION": {"scope": "lua","prefix": "DL_STATUS_BEGINSYNCOPERATION","body": ["15"],"description": "STATUS_BEGINSYNCOPERATION"},
    "DLStatus STATUSEX_STARTBINDING": {"scope": "lua","prefix": "DL_STATUSEX_STARTBINDING","body": ["57"],"description": "STATUSEX_STARTBINDING"},
    "DLStatus STATUS_SNIFFED_CLASSIDAVAILABLE": {"scope": "lua","prefix": "DL_STATUS_SNIFFED_CLASSIDAVAILABLE","body": ["55"],"description": "STATUS_SNIFFED_CLASSIDAVAILABLE"},
    "DLStatus STATUS_CONNECTING": {"scope": "lua","prefix": "DL_STATUS_CONNECTING","body": ["2"],"description": "STATUS_CONNECTING"},
    "DLStatus STATUS_PROTOCOLCLASSID": {"scope": "lua","prefix": "DL_STATUS_PROTOCOLCLASSID","body": ["20"],"description": "STATUS_PROTOCOLCLASSID"},
    "DLStatus STATUSEX_ENDDOWNLOAD": {"scope": "lua","prefix": "DL_STATUSEX_ENDDOWNLOAD","body": ["58"],"description": "STATUSEX_ENDDOWNLOAD"},
    "DLStatus STATUS_COOKIE_STATE_LEASH": {"scope": "lua","prefix": "DL_STATUS_COOKIE_STATE_LEASH","body": ["41"],"description": "STATUS_COOKIE_STATE_LEASH"},
    "DLStatus STATUS_REDIRECTING": {"scope": "lua","prefix": "DL_STATUS_REDIRECTING","body": ["3"],"description": "STATUS_REDIRECTING"},
    "DLStatus STATUS_PERSISTENT_COOKIE_RECEIVED": {"scope": "lua","prefix": "DL_STATUS_PERSISTENT_COOKIE_RECEIVED","body": ["46"],"description": "STATUS_PERSISTENT_COOKIE_RECEIVED"},
    "DLStatus STATUSEX_LOWRESOURCE": {"scope": "lua","prefix": "DL_STATUSEX_LOWRESOURCE","body": ["59"],"description": "STATUSEX_LOWRESOURCE"},
    "DLStatus STATUS_MIMETEXTPLAINMISMATCH": {"scope": "lua","prefix": "DL_STATUS_MIMETEXTPLAINMISMATCH","body": ["50"],"description": "STATUS_MIMETEXTPLAINMISMATCH"},
    "DLStatus STATUS_DOWNLOADINGDATA": {"scope": "lua","prefix": "DL_STATUS_DOWNLOADINGDATA","body": ["5"],"description": "STATUS_DOWNLOADINGDATA"},
    "DLStatus STATUS_BEGINDOWNLOADDATA": {"scope": "lua","prefix": "DL_STATUS_BEGINDOWNLOADDATA","body": ["4"],"description": "STATUS_BEGINDOWNLOADDATA"},
    "DLStatus STATUS_FILTERREPORTMIMETYPE": {"scope": "lua","prefix": "DL_STATUS_FILTERREPORTMIMETYPE","body": ["27"],"description": "STATUS_FILTERREPORTMIMETYPE"},
    "DLStatus STATUS_SERVER_MIMETYPEAVAILABLE": {"scope": "lua","prefix": "DL_STATUS_SERVER_MIMETYPEAVAILABLE","body": ["54"],"description": "STATUS_SERVER_MIMETYPEAVAILABLE"},
    "DLStatus STATUS_SSLUX_NAVBLOCKED": {"scope": "lua","prefix": "DL_STATUS_SSLUX_NAVBLOCKED","body": ["53"],"description": "STATUS_SSLUX_NAVBLOCKED"},
    "DLStatus STATUS_ENDSYNCOPERATION": {"scope": "lua","prefix": "DL_STATUS_ENDSYNCOPERATION","body": ["16"],"description": "STATUS_ENDSYNCOPERATION"},
    "DLStatus STATUS_SESSION_COOKIES_ALLOWED": {"scope": "lua","prefix": "DL_STATUS_SESSION_COOKIES_ALLOWED","body": ["47"],"description": "STATUS_SESSION_COOKIES_ALLOWED"},
    "DLStatus STATUS_FINDINGRESOURCE": {"scope": "lua","prefix": "DL_STATUS_FINDINGRESOURCE","body": ["1"],"description": "STATUS_FINDINGRESOURCE"},
    "DLStatus STATUS_POLICY_HREF": {"scope": "lua","prefix": "DL_STATUS_POLICY_HREF","body": ["43"],"description": "STATUS_POLICY_HREF"},
    "DLStatus STATUS_USINGCACHEDCOPY": {"scope": "lua","prefix": "DL_STATUS_USINGCACHEDCOPY","body": ["10"],"description": "STATUS_USINGCACHEDCOPY"},
    "DLStatus STATUS_DISPLAYNAMEAVAILABLE": {"scope": "lua","prefix": "DL_STATUS_DISPLAYNAMEAVAILABLE","body": ["52"],"description": "STATUS_DISPLAYNAMEAVAILABLE"},
    "DLStatus STATUS_MIMETYPEAVAILABLE": {"scope": "lua","prefix": "DL_STATUS_MIMETYPEAVAILABLE","body": ["13"],"description": "STATUS_MIMETYPEAVAILABLE"},
    "DLStatus STATUS_RAWMIMETYPE": {"scope": "lua","prefix": "DL_STATUS_RAWMIMETYPE","body": ["31"],"description": "STATUS_RAWMIMETYPE"},
    "DLStatus STATUS_LOADINGMIMEHANDLER": {"scope": "lua","prefix": "DL_STATUS_LOADINGMIMEHANDLER","body": ["25"],"description": "STATUS_LOADINGMIMEHANDLER"},
    "DLStatus STATUS_COOKIE_STATE_PROMPT": {"scope": "lua","prefix": "DL_STATUS_COOKIE_STATE_PROMPT","body": ["40"],"description": "STATUS_COOKIE_STATE_PROMPT"},
    "DLStatus STATUS_BEGINDOWNLOADCOMPONENTS": {"scope": "lua","prefix": "DL_STATUS_BEGINDOWNLOADCOMPONENTS","body": ["7"],"description": "STATUS_BEGINDOWNLOADCOMPONENTS"},
    "DLStatus STATUS_DIRECTBIND": {"scope": "lua","prefix": "DL_STATUS_DIRECTBIND","body": ["30"],"description": "STATUS_DIRECTBIND"},
    "DLStatus STATUS_SENDINGREQUEST": {"scope": "lua","prefix": "DL_STATUS_SENDINGREQUEST","body": ["11"],"description": "STATUS_SENDINGREQUEST"},
    "DLStatus STATUS_COOKIE_SUPPRESSED": {"scope": "lua","prefix": "DL_STATUS_COOKIE_SUPPRESSED","body": ["36"],"description": "STATUS_COOKIE_SUPPRESSED"},
    "DLStatus STATUS_COOKIE_STATE_ACCEPT": {"scope": "lua","prefix": "DL_STATUS_COOKIE_STATE_ACCEPT","body": ["38"],"description": "STATUS_COOKIE_STATE_ACCEPT"},
    "DLStatus STATUS_BEGINUPLOADDATA": {"scope": "lua","prefix": "DL_STATUS_BEGINUPLOADDATA","body": ["17"],"description": "STATUS_BEGINUPLOADDATA"},
    "DLStatus STATUS_CLASSINSTALLLOCATION": {"scope": "lua","prefix": "DL_STATUS_CLASSINSTALLLOCATION","body": ["23"],"description": "STATUS_CLASSINSTALLLOCATION"},
    "DLStatus STATUS_COOKIE_SENT": {"scope": "lua","prefix": "DL_STATUS_COOKIE_SENT","body": ["34"],"description": "STATUS_COOKIE_SENT"},
    "DLStatus STATUS_CACHECONTROL": {"scope": "lua","prefix": "DL_STATUS_CACHECONTROL","body": ["48"],"description": "STATUS_CACHECONTROL"},
    "DLStatus STATUS_ACCEPTRANGES": {"scope": "lua","prefix": "DL_STATUS_ACCEPTRANGES","body": ["33"],"description": "STATUS_ACCEPTRANGES"},
    "DLStatus STATUS_VERIFIEDMIMETYPEAVAILABLE": {"scope": "lua","prefix": "DL_STATUS_VERIFIEDMIMETYPEAVAILABLE","body": ["22"],"description": "STATUS_VERIFIEDMIMETYPEAVAILABLE"},
    "DLStatus STATUS_SESSION_COOKIE_RECEIVED": {"scope": "lua","prefix": "DL_STATUS_SESSION_COOKIE_RECEIVED","body": ["45"],"description": "STATUS_SESSION_COOKIE_RECEIVED"},
    "DLStatus STATUS_INSTALLINGCOMPONENTS": {"scope": "lua","prefix": "DL_STATUS_INSTALLINGCOMPONENTS","body": ["8"],"description": "STATUS_INSTALLINGCOMPONENTS"},
    "DLStatus STATUS_COOKIE_STATE_DOWNGRADE": {"scope": "lua","prefix": "DL_STATUS_COOKIE_STATE_DOWNGRADE","body": ["42"],"description": "STATUS_COOKIE_STATE_DOWNGRADE"},
    "DLStatus STATUS_64BIT_PROGRESS": {"scope": "lua","prefix": "DL_STATUS_64BIT_PROGRESS","body": ["56"],"description": "STATUS_64BIT_PROGRESS"},
    "DLStatus STATUS_COOKIE_STATE_REJECT": {"scope": "lua","prefix": "DL_STATUS_COOKIE_STATE_REJECT","body": ["39"],"description": "STATUS_COOKIE_STATE_REJECT"},
    "DLStatus STATUS_CONTENTDISPOSITIONATTACH": {"scope": "lua","prefix": "DL_STATUS_CONTENTDISPOSITIONATTACH","body": ["26"],"description": "STATUS_CONTENTDISPOSITIONATTACH"},
    "DLStatus STATUS_UPLOADINGDATA": {"scope": "lua","prefix": "DL_STATUS_UPLOADINGDATA","body": ["18"],"description": "STATUS_UPLOADINGDATA"},
    "DLStatus STATUS_CONTENTDISPOSITIONFILENAME": {"scope": "lua","prefix": "DL_STATUS_CONTENTDISPOSITIONFILENAME","body": ["49"],"description": "STATUS_CONTENTDISPOSITIONFILENAME"},
    "DLStatus STATUS_COMPACT_POLICY_RECEIVED": {"scope": "lua","prefix": "DL_STATUS_COMPACT_POLICY_RECEIVED","body": ["35"],"description": "STATUS_COMPACT_POLICY_RECEIVED"},
    "DLStatus STATUS_ENDUPLOADDATA": {"scope": "lua","prefix": "DL_STATUS_ENDUPLOADDATA","body": ["19"],"description": "STATUS_ENDUPLOADDATA"},
    "DLStatus STATUS_COOKIE_STATE_UNKNOWN": {"scope": "lua","prefix": "DL_STATUS_COOKIE_STATE_UNKNOWN","body": ["37"],"description": "STATUS_COOKIE_STATE_UNKNOWN"},
    "DLStatus STATUS_IUNKNOWNAVAILABLE": {"scope": "lua","prefix": "DL_STATUS_IUNKNOWNAVAILABLE","body": ["29"],"description": "STATUS_IUNKNOWNAVAILABLE"},
    "DLStatus STATUS_ENDDOWNLOADDATA": {"scope": "lua","prefix": "DL_STATUS_ENDDOWNLOADDATA","body": ["6"],"description": "STATUS_ENDDOWNLOADDATA"},
    "DLStatus STATUS_CLSIDCANINSTANTIATE": {"scope": "lua","prefix": "DL_STATUS_CLSIDCANINSTANTIATE","body": ["28"],"description": "STATUS_CLSIDCANINSTANTIATE"},
    "DLStatus STATUS_DECODING": {"scope": "lua","prefix": "DL_STATUS_DECODING","body": ["24"],"description": "STATUS_DECODING"},
    "DLStatus STATUS_PUBLISHERAVAILABLE": {"scope": "lua","prefix": "DL_STATUS_PUBLISHERAVAILABLE","body": ["51"],"description": "STATUS_PUBLISHERAVAILABLE"},
    "DLStatus STATUS_ENCODING": {"scope": "lua","prefix": "DL_STATUS_ENCODING","body": ["21"],"description": "STATUS_ENCODING"},
    "DLStatus STATUS_CACHEFILENAMEAVAILABLE": {"scope": "lua","prefix": "DL_STATUS_CACHEFILENAMEAVAILABLE","body": ["14"],"description": "STATUS_CACHEFILENAMEAVAILABLE"},
    "DLStatus STATUS_ENDDOWNLOADCOMPONENTS": {"scope": "lua","prefix": "DL_STATUS_ENDDOWNLOADCOMPONENTS","body": ["9"],"description": "STATUS_ENDDOWNLOADCOMPONENTS"},

	"VK_LAUNCH_MAIL": {"scope": "lua","prefix": "VK_LAUNCH_MAIL (180)","body": ["VK_LAUNCH_MAIL"],"description": "VK_LAUNCH_MAIL = 180"},
	"VK_OEM_COPY": {"scope": "lua","prefix": "VK_OEM_COPY (242)","body": ["VK_OEM_COPY"],"description": "VK_OEM_COPY = 242"},
	"VK_0": {"scope": "lua","prefix": "VK_0 (48)","body": ["VK_0"],"description": "VK_0 = 48"},
	"VK_MBUTTON": {"scope": "lua","prefix": "VK_MBUTTON (4)","body": ["VK_MBUTTON"],"description": "VK_MBUTTON = 4"},
	"VK_BROWSER_HOME": {"scope": "lua","prefix": "VK_BROWSER_HOME (172)","body": ["VK_BROWSER_HOME"],"description": "VK_BROWSER_HOME = 172"},
	"VK_RCONTROL": {"scope": "lua","prefix": "VK_RCONTROL (163)","body": ["VK_RCONTROL"],"description": "VK_RCONTROL = 163"},
	"VK_PRIOR": {"scope": "lua","prefix": "VK_PRIOR (33)","body": ["VK_PRIOR"],"description": "VK_PRIOR = 33"},
	"VK_BROWSER_STOP": {"scope": "lua","prefix": "VK_BROWSER_STOP (169)","body": ["VK_BROWSER_STOP"],"description": "VK_BROWSER_STOP = 169"},
	"VK_CRSEL": {"scope": "lua","prefix": "VK_CRSEL (247)","body": ["VK_CRSEL"],"description": "VK_CRSEL = 247"},
	"VK_F5": {"scope": "lua","prefix": "VK_F5 (116)","body": ["VK_F5"],"description": "VK_F5 = 116"},
	"VK_DOWN": {"scope": "lua","prefix": "VK_DOWN (40)","body": ["VK_DOWN"],"description": "VK_DOWN = 40"},
	"VK_F10": {"scope": "lua","prefix": "VK_F10 (121)","body": ["VK_F10"],"description": "VK_F10 = 121"},
	"VK_S": {"scope": "lua","prefix": "VK_S (83)","body": ["VK_S"],"description": "VK_S = 83"},
	"VK_RIGHT": {"scope": "lua","prefix": "VK_RIGHT (39)","body": ["VK_RIGHT"],"description": "VK_RIGHT = 39"},
	"VK_U": {"scope": "lua","prefix": "VK_U (85)","body": ["VK_U"],"description": "VK_U = 85"},
	"VK_OEM_PERIOD": {"scope": "lua","prefix": "VK_OEM_PERIOD (190)","body": ["VK_OEM_PERIOD"],"description": "VK_OEM_PERIOD = 190"},
	"VK_OEM_RESET": {"scope": "lua","prefix": "VK_OEM_RESET (233)","body": ["VK_OEM_RESET"],"description": "VK_OEM_RESET = 233"},
	"VK_K": {"scope": "lua","prefix": "VK_K (75)","body": ["VK_K"],"description": "VK_K = 75"},
	"VK_F11": {"scope": "lua","prefix": "VK_F11 (122)","body": ["VK_F11"],"description": "VK_F11 = 122"},
	"VK_SELECT": {"scope": "lua","prefix": "VK_SELECT (41)","body": ["VK_SELECT"],"description": "VK_SELECT = 41"},
	"VK_OEM_AX": {"scope": "lua","prefix": "VK_OEM_AX (225)","body": ["VK_OEM_AX"],"description": "VK_OEM_AX = 225"},
	"VK_PAUSE": {"scope": "lua","prefix": "VK_PAUSE (19)","body": ["VK_PAUSE"],"description": "VK_PAUSE = 19"},
	"VK_OEM_8": {"scope": "lua","prefix": "VK_OEM_8 (223)","body": ["VK_OEM_8"],"description": "VK_OEM_8 = 223"},
	"VK_OEM_FJ_TOUROKU": {"scope": "lua","prefix": "VK_OEM_FJ_TOUROKU (148)","body": ["VK_OEM_FJ_TOUROKU"],"description": "VK_OEM_FJ_TOUROKU = 148"},
	"VK_ATTN": {"scope": "lua","prefix": "VK_ATTN (246)","body": ["VK_ATTN"],"description": "VK_ATTN = 246"},
	"VK_OEM_FJ_LOYA": {"scope": "lua","prefix": "VK_OEM_FJ_LOYA (149)","body": ["VK_OEM_FJ_LOYA"],"description": "VK_OEM_FJ_LOYA = 149"},
	"VK_8": {"scope": "lua","prefix": "VK_8 (56)","body": ["VK_8"],"description": "VK_8 = 56"},
	"VK_OEM_FJ_JISHO": {"scope": "lua","prefix": "VK_OEM_FJ_JISHO (146)","body": ["VK_OEM_FJ_JISHO"],"description": "VK_OEM_FJ_JISHO = 146"},
	"VK_OEM_PA2": {"scope": "lua","prefix": "VK_OEM_PA2 (236)","body": ["VK_OEM_PA2"],"description": "VK_OEM_PA2 = 236"},
	"VK_5": {"scope": "lua","prefix": "VK_5 (53)","body": ["VK_5"],"description": "VK_5 = 53"},
	"VK_KANA": {"scope": "lua","prefix": "VK_KANA (21)","body": ["VK_KANA"],"description": "VK_KANA = 21"},
	"VK_LBUTTON": {"scope": "lua","prefix": "VK_LBUTTON (1)","body": ["VK_LBUTTON"],"description": "VK_LBUTTON = 1"},
	"VK_CONVERT": {"scope": "lua","prefix": "VK_CONVERT (28)","body": ["VK_CONVERT"],"description": "VK_CONVERT = 28"},
	"VK_F23": {"scope": "lua","prefix": "VK_F23 (134)","body": ["VK_F23"],"description": "VK_F23 = 134"},
	"VK_ESCAPE": {"scope": "lua","prefix": "VK_ESCAPE (27)","body": ["VK_ESCAPE"],"description": "VK_ESCAPE = 27"},
	"VK_ABNT_C1": {"scope": "lua","prefix": "VK_ABNT_C1 (193)","body": ["VK_ABNT_C1"],"description": "VK_ABNT_C1 = 193"},
	"VK_MULTIPLY": {"scope": "lua","prefix": "VK_MULTIPLY (106)","body": ["VK_MULTIPLY"],"description": "VK_MULTIPLY = 106"},
	"VK_RBUTTON": {"scope": "lua","prefix": "VK_RBUTTON (2)","body": ["VK_RBUTTON"],"description": "VK_RBUTTON = 2"},
	"VK_XBUTTON2": {"scope": "lua","prefix": "VK_XBUTTON2 (6)","body": ["VK_XBUTTON2"],"description": "VK_XBUTTON2 = 6"},
	"VK_NUMPAD8": {"scope": "lua","prefix": "VK_NUMPAD8 (104)","body": ["VK_NUMPAD8"],"description": "VK_NUMPAD8 = 104"},
	"VK_M": {"scope": "lua","prefix": "VK_M (77)","body": ["VK_M"],"description": "VK_M = 77"},
	"VK_APPS": {"scope": "lua","prefix": "VK_APPS (93)","body": ["VK_APPS"],"description": "VK_APPS = 93"},
	"VK_OEM_1": {"scope": "lua","prefix": "VK_OEM_1 (186)","body": ["VK_OEM_1"],"description": "VK_OEM_1 = 186"},
	"VK_OEM_ATTN": {"scope": "lua","prefix": "VK_OEM_ATTN (240)","body": ["VK_OEM_ATTN"],"description": "VK_OEM_ATTN = 240"},
	"VK_F14": {"scope": "lua","prefix": "VK_F14 (125)","body": ["VK_F14"],"description": "VK_F14 = 125"},
	"VK_F18": {"scope": "lua","prefix": "VK_F18 (129)","body": ["VK_F18"],"description": "VK_F18 = 129"},
	"VK_NUMPAD0": {"scope": "lua","prefix": "VK_NUMPAD0 (96)","body": ["VK_NUMPAD0"],"description": "VK_NUMPAD0 = 96"},
	"VK_MEDIA_PLAY_PAUSE": {"scope": "lua","prefix": "VK_MEDIA_PLAY_PAUSE (179)","body": ["VK_MEDIA_PLAY_PAUSE"],"description": "VK_MEDIA_PLAY_PAUSE = 179"},
	"VK_RSHIFT": {"scope": "lua","prefix": "VK_RSHIFT (161)","body": ["VK_RSHIFT"],"description": "VK_RSHIFT = 161"},
	"VK_6": {"scope": "lua","prefix": "VK_6 (54)","body": ["VK_6"],"description": "VK_6 = 54"},
	"VK_NUMPAD9": {"scope": "lua","prefix": "VK_NUMPAD9 (105)","body": ["VK_NUMPAD9"],"description": "VK_NUMPAD9 = 105"},
	"VK_NEXT": {"scope": "lua","prefix": "VK_NEXT (34)","body": ["VK_NEXT"],"description": "VK_NEXT = 34"},
	"VK_NUMPAD5": {"scope": "lua","prefix": "VK_NUMPAD5 (101)","body": ["VK_NUMPAD5"],"description": "VK_NUMPAD5 = 101"},
	"VK_KANJI": {"scope": "lua","prefix": "VK_KANJI (25)","body": ["VK_KANJI"],"description": "VK_KANJI = 25"},
	"VK_F8": {"scope": "lua","prefix": "VK_F8 (119)","body": ["VK_F8"],"description": "VK_F8 = 119"},
	"VK_OEM_6": {"scope": "lua","prefix": "VK_OEM_6 (221)","body": ["VK_OEM_6"],"description": "VK_OEM_6 = 221"},
	"VK_END": {"scope": "lua","prefix": "VK_END (35)","body": ["VK_END"],"description": "VK_END = 35"},
	"VK_7": {"scope": "lua","prefix": "VK_7 (55)","body": ["VK_7"],"description": "VK_7 = 55"},
	"VK_OEM_PLUS": {"scope": "lua","prefix": "VK_OEM_PLUS (187)","body": ["VK_OEM_PLUS"],"description": "VK_OEM_PLUS = 187"},
	"VK_HELP": {"scope": "lua","prefix": "VK_HELP (47)","body": ["VK_HELP"],"description": "VK_HELP = 47"},
	"VK_JUNJA": {"scope": "lua","prefix": "VK_JUNJA (23)","body": ["VK_JUNJA"],"description": "VK_JUNJA = 23"},
	"VK_MEDIA_PREV_TRACK": {"scope": "lua","prefix": "VK_MEDIA_PREV_TRACK (177)","body": ["VK_MEDIA_PREV_TRACK"],"description": "VK_MEDIA_PREV_TRACK = 177"},
	"VK_N": {"scope": "lua","prefix": "VK_N (78)","body": ["VK_N"],"description": "VK_N = 78"},
	"VK_PRINT": {"scope": "lua","prefix": "VK_PRINT (42)","body": ["VK_PRINT"],"description": "VK_PRINT = 42"},
	"VK_SNAPSHOT": {"scope": "lua","prefix": "VK_SNAPSHOT (44)","body": ["VK_SNAPSHOT"],"description": "VK_SNAPSHOT = 44"},
	"VK_ACCEPT": {"scope": "lua","prefix": "VK_ACCEPT (30)","body": ["VK_ACCEPT"],"description": "VK_ACCEPT = 30"},
	"VK_G": {"scope": "lua","prefix": "VK_G (71)","body": ["VK_G"],"description": "VK_G = 71"},
	"VK_D": {"scope": "lua","prefix": "VK_D (68)","body": ["VK_D"],"description": "VK_D = 68"},
	"VK_OEM_5": {"scope": "lua","prefix": "VK_OEM_5 (220)","body": ["VK_OEM_5"],"description": "VK_OEM_5 = 220"},
	"VK_OEM_FJ_ROYA": {"scope": "lua","prefix": "VK_OEM_FJ_ROYA (150)","body": ["VK_OEM_FJ_ROYA"],"description": "VK_OEM_FJ_ROYA = 150"},
	"VK_R": {"scope": "lua","prefix": "VK_R (82)","body": ["VK_R"],"description": "VK_R = 82"},
	"VK_CANCEL": {"scope": "lua","prefix": "VK_CANCEL (3)","body": ["VK_CANCEL"],"description": "VK_CANCEL = 3"},
	"VK_NUMPAD7": {"scope": "lua","prefix": "VK_NUMPAD7 (103)","body": ["VK_NUMPAD7"],"description": "VK_NUMPAD7 = 103"},
	"VK_OEM_CLEAR": {"scope": "lua","prefix": "VK_OEM_CLEAR (254)","body": ["VK_OEM_CLEAR"],"description": "VK_OEM_CLEAR = 254"},
	"VK_OEM_WSCTRL": {"scope": "lua","prefix": "VK_OEM_WSCTRL (238)","body": ["VK_OEM_WSCTRL"],"description": "VK_OEM_WSCTRL = 238"},
	"VK_PA1": {"scope": "lua","prefix": "VK_PA1 (253)","body": ["VK_PA1"],"description": "VK_PA1 = 253"},
	"VK_ZOOM": {"scope": "lua","prefix": "VK_ZOOM (251)","body": ["VK_ZOOM"],"description": "VK_ZOOM = 251"},
	"VK_2": {"scope": "lua","prefix": "VK_2 (50)","body": ["VK_2"],"description": "VK_2 = 50"},
	"VK_PLAY": {"scope": "lua","prefix": "VK_PLAY (250)","body": ["VK_PLAY"],"description": "VK_PLAY = 250"},
	"VK_EREOF": {"scope": "lua","prefix": "VK_EREOF (249)","body": ["VK_EREOF"],"description": "VK_EREOF = 249"},
	"VK_OEM_7": {"scope": "lua","prefix": "VK_OEM_7 (222)","body": ["VK_OEM_7"],"description": "VK_OEM_7 = 222"},
	"VK_Y": {"scope": "lua","prefix": "VK_Y (89)","body": ["VK_Y"],"description": "VK_Y = 89"},
	"VK_OEM_ENLW": {"scope": "lua","prefix": "VK_OEM_ENLW (244)","body": ["VK_OEM_ENLW"],"description": "VK_OEM_ENLW = 244"},
	"VK_A": {"scope": "lua","prefix": "VK_A (65)","body": ["VK_A"],"description": "VK_A = 65"},
	"VK_OEM_BACKTAB": {"scope": "lua","prefix": "VK_OEM_BACKTAB (245)","body": ["VK_OEM_BACKTAB"],"description": "VK_OEM_BACKTAB = 245"},
	"VK_V": {"scope": "lua","prefix": "VK_V (86)","body": ["VK_V"],"description": "VK_V = 86"},
	"VK_SPACE": {"scope": "lua","prefix": "VK_SPACE (32)","body": ["VK_SPACE"],"description": "VK_SPACE = 32"},
	"VK_F17": {"scope": "lua","prefix": "VK_F17 (128)","body": ["VK_F17"],"description": "VK_F17 = 128"},
	"VK_OEM_AUTO": {"scope": "lua","prefix": "VK_OEM_AUTO (243)","body": ["VK_OEM_AUTO"],"description": "VK_OEM_AUTO = 243"},
	"VK_OEM_FINISH": {"scope": "lua","prefix": "VK_OEM_FINISH (241)","body": ["VK_OEM_FINISH"],"description": "VK_OEM_FINISH = 241"},
	"VK_OEM_CUSEL": {"scope": "lua","prefix": "VK_OEM_CUSEL (239)","body": ["VK_OEM_CUSEL"],"description": "VK_OEM_CUSEL = 239"},
	"VK_OEM_PA3": {"scope": "lua","prefix": "VK_OEM_PA3 (237)","body": ["VK_OEM_PA3"],"description": "VK_OEM_PA3 = 237"},
	"VK_OEM_PA1": {"scope": "lua","prefix": "VK_OEM_PA1 (235)","body": ["VK_OEM_PA1"],"description": "VK_OEM_PA1 = 235"},
	"VK_OEM_JUMP": {"scope": "lua","prefix": "VK_OEM_JUMP (234)","body": ["VK_OEM_JUMP"],"description": "VK_OEM_JUMP = 234"},
	"VK_F3": {"scope": "lua","prefix": "VK_F3 (114)","body": ["VK_F3"],"description": "VK_F3 = 114"},
	"VK_PACKET": {"scope": "lua","prefix": "VK_PACKET (231)","body": ["VK_PACKET"],"description": "VK_PACKET = 231"},
	"VK_3": {"scope": "lua","prefix": "VK_3 (51)","body": ["VK_3"],"description": "VK_3 = 51"},
	"VK_F9": {"scope": "lua","prefix": "VK_F9 (120)","body": ["VK_F9"],"description": "VK_F9 = 120"},
	"VK_J": {"scope": "lua","prefix": "VK_J (74)","body": ["VK_J"],"description": "VK_J = 74"},
	"VK_ICO_CLEAR": {"scope": "lua","prefix": "VK_ICO_CLEAR (230)","body": ["VK_ICO_CLEAR"],"description": "VK_ICO_CLEAR = 230"},
	"VK_PROCESSKEY": {"scope": "lua","prefix": "VK_PROCESSKEY (229)","body": ["VK_PROCESSKEY"],"description": "VK_PROCESSKEY = 229"},
	"VK_SHIFT": {"scope": "lua","prefix": "VK_SHIFT (16)","body": ["VK_SHIFT"],"description": "VK_SHIFT = 16"},
	"VK_ICO_HELP": {"scope": "lua","prefix": "VK_ICO_HELP (227)","body": ["VK_ICO_HELP"],"description": "VK_ICO_HELP = 227"},
	"VK_ABNT_C2": {"scope": "lua","prefix": "VK_ABNT_C2 (194)","body": ["VK_ABNT_C2"],"description": "VK_ABNT_C2 = 194"},
	"VK_OEM_102": {"scope": "lua","prefix": "VK_OEM_102 (226)","body": ["VK_OEM_102"],"description": "VK_OEM_102 = 226"},
	"VK_EXSEL": {"scope": "lua","prefix": "VK_EXSEL (248)","body": ["VK_EXSEL"],"description": "VK_EXSEL = 248"},
	"VK_LMENU": {"scope": "lua","prefix": "VK_LMENU (164)","body": ["VK_LMENU"],"description": "VK_LMENU = 164"},
	"VK_SUBTRACT": {"scope": "lua","prefix": "VK_SUBTRACT (109)","body": ["VK_SUBTRACT"],"description": "VK_SUBTRACT = 109"},
	"VK_NUMPAD4": {"scope": "lua","prefix": "VK_NUMPAD4 (100)","body": ["VK_NUMPAD4"],"description": "VK_NUMPAD4 = 100"},
	"VK_OEM_4": {"scope": "lua","prefix": "VK_OEM_4 (219)","body": ["VK_OEM_4"],"description": "VK_OEM_4 = 219"},
	"VK_DELETE": {"scope": "lua","prefix": "VK_DELETE (46)","body": ["VK_DELETE"],"description": "VK_DELETE = 46"},
	"VK_9": {"scope": "lua","prefix": "VK_9 (57)","body": ["VK_9"],"description": "VK_9 = 57"},
	"VK_OEM_3": {"scope": "lua","prefix": "VK_OEM_3 (192)","body": ["VK_OEM_3"],"description": "VK_OEM_3 = 192"},
	"VK_OEM_2": {"scope": "lua","prefix": "VK_OEM_2 (191)","body": ["VK_OEM_2"],"description": "VK_OEM_2 = 191"},
	"VK_O": {"scope": "lua","prefix": "VK_O (79)","body": ["VK_O"],"description": "VK_O = 79"},
	"VK_CLEAR": {"scope": "lua","prefix": "VK_CLEAR (12)","body": ["VK_CLEAR"],"description": "VK_CLEAR = 12"},
	"VK_OEM_COMMA": {"scope": "lua","prefix": "VK_OEM_COMMA (188)","body": ["VK_OEM_COMMA"],"description": "VK_OEM_COMMA = 188"},
	"VK_LAUNCH_APP2": {"scope": "lua","prefix": "VK_LAUNCH_APP2 (183)","body": ["VK_LAUNCH_APP2"],"description": "VK_LAUNCH_APP2 = 183"},
	"VK_1": {"scope": "lua","prefix": "VK_1 (49)","body": ["VK_1"],"description": "VK_1 = 49"},
	"VK_MEDIA_STOP": {"scope": "lua","prefix": "VK_MEDIA_STOP (178)","body": ["VK_MEDIA_STOP"],"description": "VK_MEDIA_STOP = 178"},
	"VK_LAUNCH_MEDIA_SELECT": {"scope": "lua","prefix": "VK_LAUNCH_MEDIA_SELECT (181)","body": ["VK_LAUNCH_MEDIA_SELECT"],"description": "VK_LAUNCH_MEDIA_SELECT = 181"},
	"VK_LAUNCH_APP1": {"scope": "lua","prefix": "VK_LAUNCH_APP1 (182)","body": ["VK_LAUNCH_APP1"],"description": "VK_LAUNCH_APP1 = 182"},
	"VK_VOLUME_UP": {"scope": "lua","prefix": "VK_VOLUME_UP (175)","body": ["VK_VOLUME_UP"],"description": "VK_VOLUME_UP = 175"},
	"VK_BACK": {"scope": "lua","prefix": "VK_BACK (8)","body": ["VK_BACK"],"description": "VK_BACK = 8"},
	"VK_F4": {"scope": "lua","prefix": "VK_F4 (115)","body": ["VK_F4"],"description": "VK_F4 = 115"},
	"VK_F7": {"scope": "lua","prefix": "VK_F7 (118)","body": ["VK_F7"],"description": "VK_F7 = 118"},
	"VK_CAPITAL": {"scope": "lua","prefix": "VK_CAPITAL (20)","body": ["VK_CAPITAL"],"description": "VK_CAPITAL = 20"},
	"VK_MEDIA_NEXT_TRACK": {"scope": "lua","prefix": "VK_MEDIA_NEXT_TRACK (176)","body": ["VK_MEDIA_NEXT_TRACK"],"description": "VK_MEDIA_NEXT_TRACK = 176"},
	"VK_VOLUME_DOWN": {"scope": "lua","prefix": "VK_VOLUME_DOWN (174)","body": ["VK_VOLUME_DOWN"],"description": "VK_VOLUME_DOWN = 174"},
	"VK_VOLUME_MUTE": {"scope": "lua","prefix": "VK_VOLUME_MUTE (173)","body": ["VK_VOLUME_MUTE"],"description": "VK_VOLUME_MUTE = 173"},
	"VK_BROWSER_FAVORITES": {"scope": "lua","prefix": "VK_BROWSER_FAVORITES (171)","body": ["VK_BROWSER_FAVORITES"],"description": "VK_BROWSER_FAVORITES = 171"},
	"VK_BROWSER_SEARCH": {"scope": "lua","prefix": "VK_BROWSER_SEARCH (170)","body": ["VK_BROWSER_SEARCH"],"description": "VK_BROWSER_SEARCH = 170"},
	"VK_DIVIDE": {"scope": "lua","prefix": "VK_DIVIDE (111)","body": ["VK_DIVIDE"],"description": "VK_DIVIDE = 111"},
	"VK_NUMPAD2": {"scope": "lua","prefix": "VK_NUMPAD2 (98)","body": ["VK_NUMPAD2"],"description": "VK_NUMPAD2 = 98"},
	"VK_MENU": {"scope": "lua","prefix": "VK_MENU (18)","body": ["VK_MENU"],"description": "VK_MENU = 18"},
	"VK_F15": {"scope": "lua","prefix": "VK_F15 (126)","body": ["VK_F15"],"description": "VK_F15 = 126"},
	"VK_SLEEP": {"scope": "lua","prefix": "VK_SLEEP (95)","body": ["VK_SLEEP"],"description": "VK_SLEEP = 95"},
	"VK_BROWSER_BACK": {"scope": "lua","prefix": "VK_BROWSER_BACK (166)","body": ["VK_BROWSER_BACK"],"description": "VK_BROWSER_BACK = 166"},
	"VK_RMENU": {"scope": "lua","prefix": "VK_RMENU (165)","body": ["VK_RMENU"],"description": "VK_RMENU = 165"},
	"VK_LCONTROL": {"scope": "lua","prefix": "VK_LCONTROL (162)","body": ["VK_LCONTROL"],"description": "VK_LCONTROL = 162"},
	"VK_LSHIFT": {"scope": "lua","prefix": "VK_LSHIFT (160)","body": ["VK_LSHIFT"],"description": "VK_LSHIFT = 160"},
	"VK_OEM_FJ_MASSHOU": {"scope": "lua","prefix": "VK_OEM_FJ_MASSHOU (147)","body": ["VK_OEM_FJ_MASSHOU"],"description": "VK_OEM_FJ_MASSHOU = 147"},
	"VK_Z": {"scope": "lua","prefix": "VK_Z (90)","body": ["VK_Z"],"description": "VK_Z = 90"},
	"VK_SCROLL": {"scope": "lua","prefix": "VK_SCROLL (145)","body": ["VK_SCROLL"],"description": "VK_SCROLL = 145"},
	"VK_HOME": {"scope": "lua","prefix": "VK_HOME (36)","body": ["VK_HOME"],"description": "VK_HOME = 36"},
	"VK_MODECHANGE": {"scope": "lua","prefix": "VK_MODECHANGE (31)","body": ["VK_MODECHANGE"],"description": "VK_MODECHANGE = 31"},
	"VK_X": {"scope": "lua","prefix": "VK_X (88)","body": ["VK_X"],"description": "VK_X = 88"},
	"VK_T": {"scope": "lua","prefix": "VK_T (84)","body": ["VK_T"],"description": "VK_T = 84"},
	"VK_NONCONVERT": {"scope": "lua","prefix": "VK_NONCONVERT (29)","body": ["VK_NONCONVERT"],"description": "VK_NONCONVERT = 29"},
	"VK_F12": {"scope": "lua","prefix": "VK_F12 (123)","body": ["VK_F12"],"description": "VK_F12 = 123"},
	"VK_ADD": {"scope": "lua","prefix": "VK_ADD (107)","body": ["VK_ADD"],"description": "VK_ADD = 107"},
	"VK_RWIN": {"scope": "lua","prefix": "VK_RWIN (92)","body": ["VK_RWIN"],"description": "VK_RWIN = 92"},
	"VK_C": {"scope": "lua","prefix": "VK_C (67)","body": ["VK_C"],"description": "VK_C = 67"},
	"VK_F": {"scope": "lua","prefix": "VK_F (70)","body": ["VK_F"],"description": "VK_F = 70"},
	"VK_Q": {"scope": "lua","prefix": "VK_Q (81)","body": ["VK_Q"],"description": "VK_Q = 81"},
	"VK_F22": {"scope": "lua","prefix": "VK_F22 (133)","body": ["VK_F22"],"description": "VK_F22 = 133"},
	"VK_F21": {"scope": "lua","prefix": "VK_F21 (132)","body": ["VK_F21"],"description": "VK_F21 = 132"},
	"VK_I": {"scope": "lua","prefix": "VK_I (73)","body": ["VK_I"],"description": "VK_I = 73"},
	"VK_F20": {"scope": "lua","prefix": "VK_F20 (131)","body": ["VK_F20"],"description": "VK_F20 = 131"},
	"VK_RETURN": {"scope": "lua","prefix": "VK_RETURN (13)","body": ["VK_RETURN"],"description": "VK_RETURN = 13"},
	"VK_F19": {"scope": "lua","prefix": "VK_F19 (130)","body": ["VK_F19"],"description": "VK_F19 = 130"},
	"VK_XBUTTON1": {"scope": "lua","prefix": "VK_XBUTTON1 (5)","body": ["VK_XBUTTON1"],"description": "VK_XBUTTON1 = 5"},
	"VK_F16": {"scope": "lua","prefix": "VK_F16 (127)","body": ["VK_F16"],"description": "VK_F16 = 127"},
	"VK_F13": {"scope": "lua","prefix": "VK_F13 (124)","body": ["VK_F13"],"description": "VK_F13 = 124"},
	"VK_CONTROL": {"scope": "lua","prefix": "VK_CONTROL (17)","body": ["VK_CONTROL"],"description": "VK_CONTROL = 17"},
	"VK_F6": {"scope": "lua","prefix": "VK_F6 (117)","body": ["VK_F6"],"description": "VK_F6 = 117"},
	"VK_SEPARATOR": {"scope": "lua","prefix": "VK_SEPARATOR (108)","body": ["VK_SEPARATOR"],"description": "VK_SEPARATOR = 108"},
	"VK_F24": {"scope": "lua","prefix": "VK_F24 (135)","body": ["VK_F24"],"description": "VK_F24 = 135"},
	"VK_DECIMAL": {"scope": "lua","prefix": "VK_DECIMAL (110)","body": ["VK_DECIMAL"],"description": "VK_DECIMAL = 110"},
	"VK_F2": {"scope": "lua","prefix": "VK_F2 (113)","body": ["VK_F2"],"description": "VK_F2 = 113"},
	"VK_NUMPAD6": {"scope": "lua","prefix": "VK_NUMPAD6 (102)","body": ["VK_NUMPAD6"],"description": "VK_NUMPAD6 = 102"},
	"VK_NUMPAD3": {"scope": "lua","prefix": "VK_NUMPAD3 (99)","body": ["VK_NUMPAD3"],"description": "VK_NUMPAD3 = 99"},
	"VK_B": {"scope": "lua","prefix": "VK_B (66)","body": ["VK_B"],"description": "VK_B = 66"},
	"VK_TAB": {"scope": "lua","prefix": "VK_TAB (9)","body": ["VK_TAB"],"description": "VK_TAB = 9"},
	"VK_BROWSER_REFRESH": {"scope": "lua","prefix": "VK_BROWSER_REFRESH (168)","body": ["VK_BROWSER_REFRESH"],"description": "VK_BROWSER_REFRESH = 168"},
	"VK_NUMPAD1": {"scope": "lua","prefix": "VK_NUMPAD1 (97)","body": ["VK_NUMPAD1"],"description": "VK_NUMPAD1 = 97"},
	"VK_BROWSER_FORWARD": {"scope": "lua","prefix": "VK_BROWSER_FORWARD (167)","body": ["VK_BROWSER_FORWARD"],"description": "VK_BROWSER_FORWARD = 167"},
	"VK_LWIN": {"scope": "lua","prefix": "VK_LWIN (91)","body": ["VK_LWIN"],"description": "VK_LWIN = 91"},
	"VK_LEFT": {"scope": "lua","prefix": "VK_LEFT (37)","body": ["VK_LEFT"],"description": "VK_LEFT = 37"},
	"VK_NUMLOCK": {"scope": "lua","prefix": "VK_NUMLOCK (144)","body": ["VK_NUMLOCK"],"description": "VK_NUMLOCK = 144"},
	"VK_W": {"scope": "lua","prefix": "VK_W (87)","body": ["VK_W"],"description": "VK_W = 87"},
	"VK_P": {"scope": "lua","prefix": "VK_P (80)","body": ["VK_P"],"description": "VK_P = 80"},
	"VK_OEM_MINUS": {"scope": "lua","prefix": "VK_OEM_MINUS (189)","body": ["VK_OEM_MINUS"],"description": "VK_OEM_MINUS = 189"},
	"VK_L": {"scope": "lua","prefix": "VK_L (76)","body": ["VK_L"],"description": "VK_L = 76"},
	"VK_H": {"scope": "lua","prefix": "VK_H (72)","body": ["VK_H"],"description": "VK_H = 72"},
	"VK_E": {"scope": "lua","prefix": "VK_E (69)","body": ["VK_E"],"description": "VK_E = 69"},
	"VK_FINAL": {"scope": "lua","prefix": "VK_FINAL (24)","body": ["VK_FINAL"],"description": "VK_FINAL = 24"},
	"VK_4": {"scope": "lua","prefix": "VK_4 (52)","body": ["VK_4"],"description": "VK_4 = 52"},
	"VK_EXECUTE": {"scope": "lua","prefix": "VK_EXECUTE (43)","body": ["VK_EXECUTE"],"description": "VK_EXECUTE = 43"},
	"VK_F1": {"scope": "lua","prefix": "VK_F1 (112)","body": ["VK_F1"],"description": "VK_F1 = 112"},
	"VK_INSERT": {"scope": "lua","prefix": "VK_INSERT (45)","body": ["VK_INSERT"],"description": "VK_INSERT = 45"},
	"VK_UP": {"scope": "lua","prefix": "VK_UP (38)","body": ["VK_UP"],"description": "VK_UP = 38"},


	"PACKET_NO_FREE_INCOMING_CONNECTIONS": {"scope": "lua","prefix": "PACKET_NO_FREE_INCOMING_CONNECTIONS (31)","body": ["31"],"description": "PACKET_NO_FREE_INCOMING_CONNECTIONS = 31"},
	"RPC_SCRSETVEHICLEPARAMSFORPLAYER": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEPARAMSFORPLAYER (161)","body": ["161"],"description": "RPC_SCRSETVEHICLEPARAMSFORPLAYER = 161"},
	"RPC_SCRSETPLAYERFACINGANGLE": {"scope": "lua","prefix": "RPC_SCRSETPLAYERFACINGANGLE (19)","body": ["19"],"description": "RPC_SCRSETPLAYERFACINGANGLE = 19"},
	"RPC_SCRWORLDPLAYERREMOVE": {"scope": "lua","prefix": "RPC_SCRWORLDPLAYERREMOVE (163)","body": ["163"],"description": "RPC_SCRWORLDPLAYERREMOVE = 163"},
	"RPC_SCRGIVEPLAYERMONEY": {"scope": "lua","prefix": "RPC_SCRGIVEPLAYERMONEY (18)","body": ["18"],"description": "RPC_SCRGIVEPLAYERMONEY = 18"},
	"RPC_SCRREMOVEBUILDINGFORPLAYER": {"scope": "lua","prefix": "RPC_SCRREMOVEBUILDINGFORPLAYER (43)","body": ["43"],"description": "RPC_SCRREMOVEBUILDINGFORPLAYER = 43"},
	"RPC_SCRPUTPLAYERINVEHICLE": {"scope": "lua","prefix": "RPC_SCRPUTPLAYERINVEHICLE (70)","body": ["70"],"description": "RPC_SCRPUTPLAYERINVEHICLE = 70"},
	"PACKET_REQUEST_STATIC_DATA": {"scope": "lua","prefix": "PACKET_REQUEST_STATIC_DATA (10)","body": ["10"],"description": "PACKET_REQUEST_STATIC_DATA = 10"},
	"RPC_NPCJOIN": {"scope": "lua","prefix": "RPC_NPCJOIN (54)","body": ["54"],"description": "RPC_NPCJOIN = 54"},
	"RPC_SCRSETPLAYERSKILLLEVEL": {"scope": "lua","prefix": "RPC_SCRSETPLAYERSKILLLEVEL (34)","body": ["34"],"description": "RPC_SCRSETPLAYERSKILLLEVEL = 34"},
	"PACKET_ADVERTISE_SYSTEM": {"scope": "lua","prefix": "PACKET_ADVERTISE_SYSTEM (56)","body": ["56"],"description": "PACKET_ADVERTISE_SYSTEM = 56"},
	"RPC_SCRSETCAMERABEHINDPLAYER": {"scope": "lua","prefix": "RPC_SCRSETCAMERABEHINDPLAYER (162)","body": ["162"],"description": "RPC_SCRSETCAMERABEHINDPLAYER = 162"},
	"PACKET_TIMESTAMP": {"scope": "lua","prefix": "PACKET_TIMESTAMP (40)","body": ["40"],"description": "PACKET_TIMESTAMP = 40"},
	"RPC_SCRWORLDPLAYERADD": {"scope": "lua","prefix": "RPC_SCRWORLDPLAYERADD (32)","body": ["32"],"description": "RPC_SCRWORLDPLAYERADD = 32"},
	"RPC_SCRPLAYAUDIOSTREAM": {"scope": "lua","prefix": "RPC_SCRPLAYAUDIOSTREAM (41)","body": ["41"],"description": "RPC_SCRPLAYAUDIOSTREAM = 41"},
	"RPC_SCRUPDATE3DTEXTLABEL": {"scope": "lua","prefix": "RPC_SCRUPDATE3DTEXTLABEL (58)","body": ["58"],"description": "RPC_SCRUPDATE3DTEXTLABEL = 58"},
	"PACKET_CONNECTION_BANNED": {"scope": "lua","prefix": "PACKET_CONNECTION_BANNED (36)","body": ["36"],"description": "PACKET_CONNECTION_BANNED = 36"},
	"PACKET_MODIFIED_PACKET": {"scope": "lua","prefix": "PACKET_MODIFIED_PACKET (38)","body": ["38"],"description": "PACKET_MODIFIED_PACKET = 38"},
	"PACKET_MARKERS_SYNC": {"scope": "lua","prefix": "PACKET_MARKERS_SYNC (208)","body": ["208"],"description": "PACKET_MARKERS_SYNC = 208"},
	"RPC_EDITATTACHEDOBJECT": {"scope": "lua","prefix": "RPC_EDITATTACHEDOBJECT (116)","body": ["116"],"description": "RPC_EDITATTACHEDOBJECT = 116"},
	"RPC_SCRSHOWTEXTDRAW": {"scope": "lua","prefix": "RPC_SCRSHOWTEXTDRAW (134)","body": ["134"],"description": "RPC_SCRSHOWTEXTDRAW = 134"},
	"RPC_SCRSETPLAYERTIME": {"scope": "lua","prefix": "RPC_SCRSETPLAYERTIME (29)","body": ["29"],"description": "RPC_SCRSETPLAYERTIME = 29"},
	"PACKET_DETECT_LOST_CONNECTIONS": {"scope": "lua","prefix": "PACKET_DETECT_LOST_CONNECTIONS (23)","body": ["23"],"description": "PACKET_DETECT_LOST_CONNECTIONS = 23"},
	"PACKET_INVALID_PASSWORD": {"scope": "lua","prefix": "PACKET_INVALID_PASSWORD (37)","body": ["37"],"description": "PACKET_INVALID_PASSWORD = 37"},
	"RPC_SETINTERIORID": {"scope": "lua","prefix": "RPC_SETINTERIORID (118)","body": ["118"],"description": "RPC_SETINTERIORID = 118"},
	"RPC_SCRDESTROYOBJECT": {"scope": "lua","prefix": "RPC_SCRDESTROYOBJECT (47)","body": ["47"],"description": "RPC_SCRDESTROYOBJECT = 47"},
	"RPC_SCRSETPLAYERWANTEDLEVEL": {"scope": "lua","prefix": "RPC_SCRSETPLAYERWANTEDLEVEL (133)","body": ["133"],"description": "RPC_SCRSETPLAYERWANTEDLEVEL = 133"},
	"RPC_REQUESTSPAWN": {"scope": "lua","prefix": "RPC_REQUESTSPAWN (129)","body": ["129"],"description": "RPC_REQUESTSPAWN = 129"},
	"RPC_SCRSETPLAYERATTACHEDOBJECT": {"scope": "lua","prefix": "RPC_SCRSETPLAYERATTACHEDOBJECT (113)","body": ["113"],"description": "RPC_SCRSETPLAYERATTACHEDOBJECT = 113"},
	"PACKET_BROADCAST_PINGS": {"scope": "lua","prefix": "PACKET_BROADCAST_PINGS (14)","body": ["14"],"description": "PACKET_BROADCAST_PINGS = 14"},
	"RPC_SCRGANGZONEFLASH": {"scope": "lua","prefix": "RPC_SCRGANGZONEFLASH (121)","body": ["121"],"description": "RPC_SCRGANGZONEFLASH = 121"},
	"RPC_SERVERCOMMAND": {"scope": "lua","prefix": "RPC_SERVERCOMMAND (50)","body": ["50"],"description": "RPC_SERVERCOMMAND = 50"},
	"RPC_SCRGAMEMODERESTART": {"scope": "lua","prefix": "RPC_SCRGAMEMODERESTART (40)","body": ["40"],"description": "RPC_SCRGAMEMODERESTART = 40"},
	"RPC_SCRSETPLAYERWORLDBOUNDS": {"scope": "lua","prefix": "RPC_SCRSETPLAYERWORLDBOUNDS (17)","body": ["17"],"description": "RPC_SCRSETPLAYERWORLDBOUNDS = 17"},
	"PACKET_CONNECTION_ATTEMPT_FAILED": {"scope": "lua","prefix": "PACKET_CONNECTION_ATTEMPT_FAILED (29)","body": ["29"],"description": "PACKET_CONNECTION_ATTEMPT_FAILED = 29"},
	"RPC_SCRCLEARANIMATIONS": {"scope": "lua","prefix": "RPC_SCRCLEARANIMATIONS (87)","body": ["87"],"description": "RPC_SCRCLEARANIMATIONS = 87"},
	"RPC_SCRCREATEOBJECT": {"scope": "lua","prefix": "RPC_SCRCREATEOBJECT (44)","body": ["44"],"description": "RPC_SCRCREATEOBJECT = 44"},
	"RPC_CLIENTJOIN": {"scope": "lua","prefix": "RPC_CLIENTJOIN (25)","body": ["25"],"description": "RPC_CLIENTJOIN = 25"},
	"RPC_SCRSETPLAYERTEAM": {"scope": "lua","prefix": "RPC_SCRSETPLAYERTEAM (69)","body": ["69"],"description": "RPC_SCRSETPLAYERTEAM = 69"},
	"RPC_SPAWN": {"scope": "lua","prefix": "RPC_SPAWN (52)","body": ["52"],"description": "RPC_SPAWN = 52"},
	"RPC_SCRSETPLAYERNAME": {"scope": "lua","prefix": "RPC_SCRSETPLAYERNAME (11)","body": ["11"],"description": "RPC_SCRSETPLAYERNAME = 11"},
	"RPC_SCRWORLDVEHICLEREMOVE": {"scope": "lua","prefix": "RPC_SCRWORLDVEHICLEREMOVE (165)","body": ["165"],"description": "RPC_SCRWORLDVEHICLEREMOVE = 165"},
	"RPC_SCRSHOWPLAYERNAMETAGFORPLAYER": {"scope": "lua","prefix": "RPC_SCRSHOWPLAYERNAMETAGFORPLAYER (80)","body": ["80"],"description": "RPC_SCRSHOWPLAYERNAMETAGFORPLAYER = 80"},
	"RPC_SCRWORLDPLAYERDEATH": {"scope": "lua","prefix": "RPC_SCRWORLDPLAYERDEATH (166)","body": ["166"],"description": "RPC_SCRWORLDPLAYERDEATH = 166"},
	"RPC_SCRSERVERQUIT": {"scope": "lua","prefix": "RPC_SCRSERVERQUIT (138)","body": ["138"],"description": "RPC_SCRSERVERQUIT = 138"},
	"RPC_MAPMARKER": {"scope": "lua","prefix": "RPC_MAPMARKER (119)","body": ["119"],"description": "RPC_MAPMARKER = 119"},
	"RPC_SCRSETPLAYERPOSFINDZ": {"scope": "lua","prefix": "RPC_SCRSETPLAYERPOSFINDZ (13)","body": ["13"],"description": "RPC_SCRSETPLAYERPOSFINDZ = 13"},
	"PACKET_BULLET_SYNC": {"scope": "lua","prefix": "PACKET_BULLET_SYNC (206)","body": ["206"],"description": "PACKET_BULLET_SYNC = 206"},
	"RPC_SCRPLAYERSPECTATEVEHICLE": {"scope": "lua","prefix": "RPC_SCRPLAYERSPECTATEVEHICLE (127)","body": ["127"],"description": "RPC_SCRPLAYERSPECTATEVEHICLE = 127"},
	"RPC_SCRSETPLAYERARMEDWEAPON": {"scope": "lua","prefix": "RPC_SCRSETPLAYERARMEDWEAPON (67)","body": ["67"],"description": "RPC_SCRSETPLAYERARMEDWEAPON = 67"},
	"RPC_SCRCREATEPICKUP": {"scope": "lua","prefix": "RPC_SCRCREATEPICKUP (95)","body": ["95"],"description": "RPC_SCRCREATEPICKUP = 95"},
	"PACKET_WEAPONS_UPDATE": {"scope": "lua","prefix": "PACKET_WEAPONS_UPDATE (204)","body": ["204"],"description": "PACKET_WEAPONS_UPDATE = 204"},
	"PACKET_REMOTE_STATIC_DATA": {"scope": "lua","prefix": "PACKET_REMOTE_STATIC_DATA (46)","body": ["46"],"description": "PACKET_REMOTE_STATIC_DATA = 46"},
	"RPC_SCRSETVEHICLEPARAMSEX": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEPARAMSEX (24)","body": ["24"],"description": "RPC_SCRSETVEHICLEPARAMSEX = 24"},
	"PACKET_DISCONNECTION_NOTIFICATION": {"scope": "lua","prefix": "PACKET_DISCONNECTION_NOTIFICATION (32)","body": ["32"],"description": "PACKET_DISCONNECTION_NOTIFICATION = 32"},
	"PACKET_SECURED_CONNECTION_RESPONSE": {"scope": "lua","prefix": "PACKET_SECURED_CONNECTION_RESPONSE (15)","body": ["15"],"description": "PACKET_SECURED_CONNECTION_RESPONSE = 15"},
	"GAMESTATE_DISCONNECTED": {"scope": "lua","prefix": "GAMESTATE_DISCONNECTED (5)","body": ["5"],"description": "GAMESTATE_DISCONNECTED = 5"},
	"RPC_SCRSETNUMBERPLATE": {"scope": "lua","prefix": "RPC_SCRSETNUMBERPLATE (123)","body": ["123"],"description": "RPC_SCRSETNUMBERPLATE = 123"},
	"RPC_SCRSETPLAYERDRUNKLEVEL": {"scope": "lua","prefix": "RPC_SCRSETPLAYERDRUNKLEVEL (35)","body": ["35"],"description": "RPC_SCRSETPLAYERDRUNKLEVEL = 35"},
	"RPC_SCRCREATE3DTEXTLABEL": {"scope": "lua","prefix": "RPC_SCRCREATE3DTEXTLABEL (36)","body": ["36"],"description": "RPC_SCRCREATE3DTEXTLABEL = 36"},
	"GAMESTATE_RESTARTING": {"scope": "lua","prefix": "GAMESTATE_RESTARTING (4)","body": ["4"],"description": "GAMESTATE_RESTARTING = 4"},
	"RPC_SCRSETPLAYERSPECIALACTION": {"scope": "lua","prefix": "RPC_SCRSETPLAYERSPECIALACTION (88)","body": ["88"],"description": "RPC_SCRSETPLAYERSPECIALACTION = 88"},
	"GAMESTATE_CONNECTED": {"scope": "lua","prefix": "GAMESTATE_CONNECTED (3)","body": ["3"],"description": "GAMESTATE_CONNECTED = 3"},
	"GAMESTATE_AWAIT_JOIN": {"scope": "lua","prefix": "GAMESTATE_AWAIT_JOIN (2)","body": ["2"],"description": "GAMESTATE_AWAIT_JOIN = 2"},
	"PACKET_AIM_SYNC": {"scope": "lua","prefix": "PACKET_AIM_SYNC (203)","body": ["203"],"description": "PACKET_AIM_SYNC = 203"},
	"RPC_SCRRESETPLAYERWEAPONS": {"scope": "lua","prefix": "RPC_SCRRESETPLAYERWEAPONS (21)","body": ["21"],"description": "RPC_SCRRESETPLAYERWEAPONS = 21"},
	"RPC_SCRCHATBUBBLE": {"scope": "lua","prefix": "RPC_SCRCHATBUBBLE (59)","body": ["59"],"description": "RPC_SCRCHATBUBBLE = 59"},
	"RPC_SCRINITGAME": {"scope": "lua","prefix": "RPC_SCRINITGAME (139)","body": ["139"],"description": "RPC_SCRINITGAME = 139"},
	"RPC_SCRPLAYERSPECTATEPLAYER": {"scope": "lua","prefix": "RPC_SCRPLAYERSPECTATEPLAYER (126)","body": ["126"],"description": "RPC_SCRPLAYERSPECTATEPLAYER = 126"},
	"RPC_SCRTEXTDRAWHIDEFORPLAYER": {"scope": "lua","prefix": "RPC_SCRTEXTDRAWHIDEFORPLAYER (135)","body": ["135"],"description": "RPC_SCRTEXTDRAWHIDEFORPLAYER = 135"},
	"GAMESTATE_NONE": {"scope": "lua","prefix": "GAMESTATE_NONE (0)","body": ["0"],"description": "GAMESTATE_NONE = 0"},
	"RPC_SCRDEATHMESSAGE": {"scope": "lua","prefix": "RPC_SCRDEATHMESSAGE (55)","body": ["55"],"description": "RPC_SCRDEATHMESSAGE = 55"},
	"PACKET_SPECTATOR_SYNC": {"scope": "lua","prefix": "PACKET_SPECTATOR_SYNC (212)","body": ["212"],"description": "PACKET_SPECTATOR_SYNC = 212"},
	"RPC_SCRTOGGLEPLAYERCONTROLLABLE": {"scope": "lua","prefix": "RPC_SCRTOGGLEPLAYERCONTROLLABLE (15)","body": ["15"],"description": "RPC_SCRTOGGLEPLAYERCONTROLLABLE = 15"},
	"RPC_SCRTEXTDRAWSETSTRING": {"scope": "lua","prefix": "RPC_SCRTEXTDRAWSETSTRING (105)","body": ["105"],"description": "RPC_SCRTEXTDRAWSETSTRING = 105"},
	"RPC_CLICKPLAYER": {"scope": "lua","prefix": "RPC_CLICKPLAYER (23)","body": ["23"],"description": "RPC_CLICKPLAYER = 23"},
	"RPC_SCRSOMEUPDATE": {"scope": "lua","prefix": "RPC_SCRSOMEUPDATE (60)","body": ["60"],"description": "RPC_SCRSOMEUPDATE = 60"},
	"PACKET_PASSENGER_SYNC": {"scope": "lua","prefix": "PACKET_PASSENGER_SYNC (211)","body": ["211"],"description": "PACKET_PASSENGER_SYNC = 211"},
	"RPC_SCRSETPLAYERHEALTH": {"scope": "lua","prefix": "RPC_SCRSETPLAYERHEALTH (14)","body": ["14"],"description": "RPC_SCRSETPLAYERHEALTH = 14"},
	"RPC_SCRSETPLAYERSHOPNAME": {"scope": "lua","prefix": "RPC_SCRSETPLAYERSHOPNAME (33)","body": ["33"],"description": "RPC_SCRSETPLAYERSHOPNAME = 33"},
	"PACKET_NEW_INCOMING_CONNECTION": {"scope": "lua","prefix": "PACKET_NEW_INCOMING_CONNECTION (30)","body": ["30"],"description": "PACKET_NEW_INCOMING_CONNECTION = 30"},
	"RPC_MENUQUIT": {"scope": "lua","prefix": "RPC_MENUQUIT (140)","body": ["140"],"description": "RPC_MENUQUIT = 140"},
	"PACKET_TRAILER_SYNC": {"scope": "lua","prefix": "PACKET_TRAILER_SYNC (210)","body": ["210"],"description": "PACKET_TRAILER_SYNC = 210"},
	"RPC_SCRIPTCASH": {"scope": "lua","prefix": "RPC_SCRIPTCASH (31)","body": ["31"],"description": "RPC_SCRIPTCASH = 31"},
	"RPC_SCRLINKVEHICLETOINTERIOR": {"scope": "lua","prefix": "RPC_SCRLINKVEHICLETOINTERIOR (65)","body": ["65"],"description": "RPC_SCRLINKVEHICLETOINTERIOR = 65"},
	"PACKET_PING_OPEN_CONNECTIONS": {"scope": "lua","prefix": "PACKET_PING_OPEN_CONNECTIONS (8)","body": ["8"],"description": "PACKET_PING_OPEN_CONNECTIONS = 8"},
	"RPC_SCRPLAYSOUND": {"scope": "lua","prefix": "RPC_SCRPLAYSOUND (16)","body": ["16"],"description": "RPC_SCRPLAYSOUND = 16"},
	"RPC_MENUSELECT": {"scope": "lua","prefix": "RPC_MENUSELECT (132)","body": ["132"],"description": "RPC_MENUSELECT = 132"},
	"PACKET_UNOCCUPIED_SYNC": {"scope": "lua","prefix": "PACKET_UNOCCUPIED_SYNC (209)","body": ["209"],"description": "PACKET_UNOCCUPIED_SYNC = 209"},
	"PACKET_PLAYER_SYNC": {"scope": "lua","prefix": "PACKET_PLAYER_SYNC (207)","body": ["207"],"description": "PACKET_PLAYER_SYNC = 207"},
	"PACKET_STATS_UPDATE": {"scope": "lua","prefix": "PACKET_STATS_UPDATE (205)","body": ["205"],"description": "PACKET_STATS_UPDATE = 205"},
	"PACKET_SECURED_CONNECTION_CONFIRMATION": {"scope": "lua","prefix": "PACKET_SECURED_CONNECTION_CONFIRMATION (16)","body": ["16"],"description": "PACKET_SECURED_CONNECTION_CONFIRMATION = 16"},
	"RPC_SCRSETPLAYERAMMO": {"scope": "lua","prefix": "RPC_SCRSETPLAYERAMMO (145)","body": ["145"],"description": "RPC_SCRSETPLAYERAMMO = 145"},
	"PACKET_RCON_RESPONCE": {"scope": "lua","prefix": "PACKET_RCON_RESPONCE (202)","body": ["202"],"description": "PACKET_RCON_RESPONCE = 202"},
	"PACKET_RCON_COMMAND": {"scope": "lua","prefix": "PACKET_RCON_COMMAND (201)","body": ["201"],"description": "PACKET_RCON_COMMAND = 201"},
	"RPC_EXITVEHICLE": {"scope": "lua","prefix": "RPC_EXITVEHICLE (154)","body": ["154"],"description": "RPC_EXITVEHICLE = 154"},
	"PACKET_AUTH_KEY": {"scope": "lua","prefix": "PACKET_AUTH_KEY (12)","body": ["12"],"description": "PACKET_AUTH_KEY = 12"},
	"RPC_SRVNETSTATS": {"scope": "lua","prefix": "RPC_SRVNETSTATS (102)","body": ["102"],"description": "RPC_SRVNETSTATS = 102"},
	"PACKET_REMOTE_EXISTING_CONNECTION": {"scope": "lua","prefix": "PACKET_REMOTE_EXISTING_CONNECTION (45)","body": ["45"],"description": "PACKET_REMOTE_EXISTING_CONNECTION = 45"},
	"PACKET_REMOTE_CONNECTION_LOST": {"scope": "lua","prefix": "PACKET_REMOTE_CONNECTION_LOST (43)","body": ["43"],"description": "PACKET_REMOTE_CONNECTION_LOST = 43"},
	"RPC_SCRSTOPAUDIOSTREAM": {"scope": "lua","prefix": "RPC_SCRSTOPAUDIOSTREAM (42)","body": ["42"],"description": "RPC_SCRSTOPAUDIOSTREAM = 42"},
	"RPC_PICKEDUPPICKUP": {"scope": "lua","prefix": "RPC_PICKEDUPPICKUP (131)","body": ["131"],"description": "RPC_PICKEDUPPICKUP = 131"},
	"PACKET_REMOTE_NEW_INCOMING_CONNECTION": {"scope": "lua","prefix": "PACKET_REMOTE_NEW_INCOMING_CONNECTION (44)","body": ["44"],"description": "PACKET_REMOTE_NEW_INCOMING_CONNECTION = 44"},
	"PACKET_REMOTE_DISCONNECTION_NOTIFICATION": {"scope": "lua","prefix": "PACKET_REMOTE_DISCONNECTION_NOTIFICATION (42)","body": ["42"],"description": "PACKET_REMOTE_DISCONNECTION_NOTIFICATION = 42"},
	"PACKET_RECEIVED_STATIC_DATA": {"scope": "lua","prefix": "PACKET_RECEIVED_STATIC_DATA (41)","body": ["41"],"description": "PACKET_RECEIVED_STATIC_DATA = 41"},
	"RPC_CLICKTEXTDRAW": {"scope": "lua","prefix": "RPC_CLICKTEXTDRAW (83)","body": ["83"],"description": "RPC_CLICKTEXTDRAW = 83"},
	"PACKET_INITIALIZE_ENCRYPTION": {"scope": "lua","prefix": "PACKET_INITIALIZE_ENCRYPTION (35)","body": ["35"],"description": "PACKET_INITIALIZE_ENCRYPTION = 35"},
	"RPC_SCRINTERPOLATECAMERA": {"scope": "lua","prefix": "RPC_SCRINTERPOLATECAMERA (82)","body": ["82"],"description": "RPC_SCRINTERPOLATECAMERA = 82"},
	"RPC_SCRSERVERJOIN": {"scope": "lua","prefix": "RPC_SCRSERVERJOIN (137)","body": ["137"],"description": "RPC_SCRSERVERJOIN = 137"},
	"RPC_CHAT": {"scope": "lua","prefix": "RPC_CHAT (101)","body": ["101"],"description": "RPC_CHAT = 101"},
	"PACKET_CONNECTION_REQUEST_ACCEPTED": {"scope": "lua","prefix": "PACKET_CONNECTION_REQUEST_ACCEPTED (34)","body": ["34"],"description": "PACKET_CONNECTION_REQUEST_ACCEPTED = 34"},
	"PACKET_CONNECTION_LOST": {"scope": "lua","prefix": "PACKET_CONNECTION_LOST (33)","body": ["33"],"description": "PACKET_CONNECTION_LOST = 33"},
	"RPC_SCRSTOPOBJECT": {"scope": "lua","prefix": "RPC_SCRSTOPOBJECT (122)","body": ["122"],"description": "RPC_SCRSTOPOBJECT = 122"},
	"RPC_DEATH": {"scope": "lua","prefix": "RPC_DEATH (53)","body": ["53"],"description": "RPC_DEATH = 53"},
	"RPC_SCRSETOBJECTROT": {"scope": "lua","prefix": "RPC_SCRSETOBJECTROT (46)","body": ["46"],"description": "RPC_SCRSETOBJECTROT = 46"},
	"PACKET_RSA_PUBLIC_KEY_MISMATCH": {"scope": "lua","prefix": "PACKET_RSA_PUBLIC_KEY_MISMATCH (28)","body": ["28"],"description": "PACKET_RSA_PUBLIC_KEY_MISMATCH = 28"},
	"RPC_SCRFORCECLASSSELECTION": {"scope": "lua","prefix": "RPC_SCRFORCECLASSSELECTION (74)","body": ["74"],"description": "RPC_SCRFORCECLASSSELECTION = 74"},
	"RPC_SCRSETPLAYERCAMERAPOS": {"scope": "lua","prefix": "RPC_SCRSETPLAYERCAMERAPOS (157)","body": ["157"],"description": "RPC_SCRSETPLAYERCAMERAPOS = 157"},
	"PACKET_RPC_REPLY": {"scope": "lua","prefix": "PACKET_RPC_REPLY (21)","body": ["21"],"description": "PACKET_RPC_REPLY = 21"},
	"RPC_SCRDISABLERACECHECKPOINT": {"scope": "lua","prefix": "RPC_SCRDISABLERACECHECKPOINT (39)","body": ["39"],"description": "RPC_SCRDISABLERACECHECKPOINT = 39"},
	"RPC_SCRTOGGLECLOCK": {"scope": "lua","prefix": "RPC_SCRTOGGLECLOCK (30)","body": ["30"],"description": "RPC_SCRTOGGLECLOCK = 30"},
	"RPC_GIVETAKEDAMAGE": {"scope": "lua","prefix": "RPC_GIVETAKEDAMAGE (115)","body": ["115"],"description": "RPC_GIVETAKEDAMAGE = 115"},
	"RPC_SCRATTACHTRAILERTOVEHICLE": {"scope": "lua","prefix": "RPC_SCRATTACHTRAILERTOVEHICLE (148)","body": ["148"],"description": "RPC_SCRATTACHTRAILERTOVEHICLE = 148"},
	"RPC_WEAPONPICKUPDESTROY": {"scope": "lua","prefix": "RPC_WEAPONPICKUPDESTROY (97)","body": ["97"],"description": "RPC_WEAPONPICKUPDESTROY = 97"},
	"PACKET_OPEN_CONNECTION_REQUEST": {"scope": "lua","prefix": "PACKET_OPEN_CONNECTION_REQUEST (24)","body": ["24"],"description": "PACKET_OPEN_CONNECTION_REQUEST = 24"},
	"PACKET_RPC": {"scope": "lua","prefix": "PACKET_RPC (20)","body": ["20"],"description": "PACKET_RPC = 20"},
	"RPC_SCRSETPLAYERINTERIOR": {"scope": "lua","prefix": "RPC_SCRSETPLAYERINTERIOR (156)","body": ["156"],"description": "RPC_SCRSETPLAYERINTERIOR = 156"},
	"PACKET_SET_RANDOM_NUMBER_SEED": {"scope": "lua","prefix": "PACKET_SET_RANDOM_NUMBER_SEED (19)","body": ["19"],"description": "PACKET_SET_RANDOM_NUMBER_SEED = 19"},
	"PACKET_RPC_MAPPING": {"scope": "lua","prefix": "PACKET_RPC_MAPPING (17)","body": ["17"],"description": "PACKET_RPC_MAPPING = 17"},
	"RPC_SCRDISPLAYGAMETEXT": {"scope": "lua","prefix": "RPC_SCRDISPLAYGAMETEXT (73)","body": ["73"],"description": "RPC_SCRDISPLAYGAMETEXT = 73"},
	"PACKET_VEHICLE_SYNC": {"scope": "lua","prefix": "PACKET_VEHICLE_SYNC (200)","body": ["200"],"description": "PACKET_VEHICLE_SYNC = 200"},
	"RPC_SCRREMOVEPLAYERFROMVEHICLE": {"scope": "lua","prefix": "RPC_SCRREMOVEPLAYERFROMVEHICLE (71)","body": ["71"],"description": "RPC_SCRREMOVEPLAYERFROMVEHICLE = 71"},
	"RPC_CLIENTCHECK": {"scope": "lua","prefix": "RPC_CLIENTCHECK (103)","body": ["103"],"description": "RPC_CLIENTCHECK = 103"},
	"PACKET_CONNECTION_REQUEST": {"scope": "lua","prefix": "PACKET_CONNECTION_REQUEST (11)","body": ["11"],"description": "PACKET_CONNECTION_REQUEST = 11"},
	"RPC_SCRSETPLAYERARMOUR": {"scope": "lua","prefix": "RPC_SCRSETPLAYERARMOUR (66)","body": ["66"],"description": "RPC_SCRSETPLAYERARMOUR = 66"},
	"RPC_SCRATTACHCAMERATOOBJECT": {"scope": "lua","prefix": "RPC_SCRATTACHCAMERATOOBJECT (81)","body": ["81"],"description": "RPC_SCRATTACHCAMERATOOBJECT = 81"},
	"PACKET_CONNECTED_PONG": {"scope": "lua","prefix": "PACKET_CONNECTED_PONG (9)","body": ["9"],"description": "PACKET_CONNECTED_PONG = 9"},
	"PACKET_PING": {"scope": "lua","prefix": "PACKET_PING (7)","body": ["7"],"description": "PACKET_PING = 7"},
	"PACKET_INTERNAL_PING": {"scope": "lua","prefix": "PACKET_INTERNAL_PING (6)","body": ["6"],"description": "PACKET_INTERNAL_PING = 6"},
	"RPC_SCRWORLDVEHICLEADD": {"scope": "lua","prefix": "RPC_SCRWORLDVEHICLEADD (164)","body": ["164"],"description": "RPC_SCRWORLDVEHICLEADD = 164"},
	"RPC_SCRSETVEHICLEZANGLE": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEZANGLE (160)","body": ["160"],"description": "RPC_SCRSETVEHICLEZANGLE = 160"},
	"RPC_SCRENABLESTUNTBONUSFORPLAYER": {"scope": "lua","prefix": "RPC_SCRENABLESTUNTBONUSFORPLAYER (104)","body": ["104"],"description": "RPC_SCRENABLESTUNTBONUSFORPLAYER = 104"},
	"RPC_SCRSETPLAYERCAMERALOOKAT": {"scope": "lua","prefix": "RPC_SCRSETPLAYERCAMERALOOKAT (158)","body": ["158"],"description": "RPC_SCRSETPLAYERCAMERALOOKAT = 158"},
	"RPC_SCRGANGZONESTOPFLASH": {"scope": "lua","prefix": "RPC_SCRGANGZONESTOPFLASH (85)","body": ["85"],"description": "RPC_SCRGANGZONESTOPFLASH = 85"},
	"RPC_ENTERVEHICLE": {"scope": "lua","prefix": "RPC_ENTERVEHICLE (26)","body": ["26"],"description": "RPC_ENTERVEHICLE = 26"},
	"RPC_SCRCANCELEDIT": {"scope": "lua","prefix": "RPC_SCRCANCELEDIT (28)","body": ["28"],"description": "RPC_SCRCANCELEDIT = 28"},
	"RPC_SCRSETPLAYERSKIN": {"scope": "lua","prefix": "RPC_SCRSETPLAYERSKIN (153)","body": ["153"],"description": "RPC_SCRSETPLAYERSKIN = 153"},
	"RPC_SCRGANGZONEDESTROY": {"scope": "lua","prefix": "RPC_SCRGANGZONEDESTROY (120)","body": ["120"],"description": "RPC_SCRGANGZONEDESTROY = 120"},
	"RPC_ENTEREDITOBJECT": {"scope": "lua","prefix": "RPC_ENTEREDITOBJECT (27)","body": ["27"],"description": "RPC_ENTEREDITOBJECT = 27"},
	"RPC_SCRSETPLAYERFIGHTINGSTYLE": {"scope": "lua","prefix": "RPC_SCRSETPLAYERFIGHTINGSTYLE (89)","body": ["89"],"description": "RPC_SCRSETPLAYERFIGHTINGSTYLE = 89"},
	"RPC_SCRDETACHTRAILERFROMVEHICLE": {"scope": "lua","prefix": "RPC_SCRDETACHTRAILERFROMVEHICLE (149)","body": ["149"],"description": "RPC_SCRDETACHTRAILERFROMVEHICLE = 149"},
	"RPC_SCRSHOWMENU": {"scope": "lua","prefix": "RPC_SCRSHOWMENU (77)","body": ["77"],"description": "RPC_SCRSHOWMENU = 77"},
	"RPC_SCRDESTROYPICKUP": {"scope": "lua","prefix": "RPC_SCRDESTROYPICKUP (63)","body": ["63"],"description": "RPC_SCRDESTROYPICKUP = 63"},
	"RPC_SCRSETPLAYERMAPICON": {"scope": "lua","prefix": "RPC_SCRSETPLAYERMAPICON (56)","body": ["56"],"description": "RPC_SCRSETPLAYERMAPICON = 56"},
	"RPC_SCRCREATEEXPLOSION": {"scope": "lua","prefix": "RPC_SCRCREATEEXPLOSION (79)","body": ["79"],"description": "RPC_SCRCREATEEXPLOSION = 79"},
	"PACKET_OPEN_CONNECTION_REPLY": {"scope": "lua","prefix": "PACKET_OPEN_CONNECTION_REPLY (25)","body": ["25"],"description": "PACKET_OPEN_CONNECTION_REPLY = 25"},
	"RPC_SCRSETVEHICLEHEALTH": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEHEALTH (147)","body": ["147"],"description": "RPC_SCRSETVEHICLEHEALTH = 147"},
	"RPC_SCRSETGRAVITY": {"scope": "lua","prefix": "RPC_SCRSETGRAVITY (146)","body": ["146"],"description": "RPC_SCRSETGRAVITY = 146"},
	"RPC_SCRREMOVEPLAYERMAPICON": {"scope": "lua","prefix": "RPC_SCRREMOVEPLAYERMAPICON (144)","body": ["144"],"description": "RPC_SCRREMOVEPLAYERMAPICON = 144"},
	"GAMESTATE_WAIT_CONNECT": {"scope": "lua","prefix": "GAMESTATE_WAIT_CONNECT (1)","body": ["1"],"description": "GAMESTATE_WAIT_CONNECT = 1"},
	"RPC_SCRDISABLECHECKPOINT": {"scope": "lua","prefix": "RPC_SCRDISABLECHECKPOINT (37)","body": ["37"],"description": "RPC_SCRDISABLECHECKPOINT = 37"},
	"PACKET_PONG": {"scope": "lua","prefix": "PACKET_PONG (39)","body": ["39"],"description": "PACKET_PONG = 39"},
	"RPC_SCRPLAYCRIMEREPORT": {"scope": "lua","prefix": "RPC_SCRPLAYCRIMEREPORT (112)","body": ["112"],"description": "RPC_SCRPLAYCRIMEREPORT = 112"},
	"RPC_SCRGANGZONECREATE": {"scope": "lua","prefix": "RPC_SCRGANGZONECREATE (108)","body": ["108"],"description": "RPC_SCRGANGZONECREATE = 108"},
	"RPC_SCRSETPLAYERCOLOR": {"scope": "lua","prefix": "RPC_SCRSETPLAYERCOLOR (72)","body": ["72"],"description": "RPC_SCRSETPLAYERCOLOR = 72"},
	"RPC_SCRSETCHECKPOINT": {"scope": "lua","prefix": "RPC_SCRSETCHECKPOINT (107)","body": ["107"],"description": "RPC_SCRSETCHECKPOINT = 107"},
	"RPC_SCRAPPLYANIMATION": {"scope": "lua","prefix": "RPC_SCRAPPLYANIMATION (86)","body": ["86"],"description": "RPC_SCRAPPLYANIMATION = 86"},
	"RPC_SCRSETVEHICLEPOS": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEPOS (159)","body": ["159"],"description": "RPC_SCRSETVEHICLEPOS = 159"},
	"RPC_SCRSETVEHICLEVELOCITY": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEVELOCITY (91)","body": ["91"],"description": "RPC_SCRSETVEHICLEVELOCITY = 91"},
	"RPC_SCRMOVEOBJECT": {"scope": "lua","prefix": "RPC_SCRMOVEOBJECT (99)","body": ["99"],"description": "RPC_SCRMOVEOBJECT = 99"},
	"RPC_UPDATESCORESPINGSIPS": {"scope": "lua","prefix": "RPC_UPDATESCORESPINGSIPS (155)","body": ["155"],"description": "RPC_UPDATESCORESPINGSIPS = 155"},
	"RPC_SCRSETWORLDTIME": {"scope": "lua","prefix": "RPC_SCRSETWORLDTIME (94)","body": ["94"],"description": "RPC_SCRSETWORLDTIME = 94"},
	"RPC_SCRSHOWDIALOG": {"scope": "lua","prefix": "RPC_SCRSHOWDIALOG (61)","body": ["61"],"description": "RPC_SCRSHOWDIALOG = 61"},
	"RPC_SCRRESETPLAYERMONEY": {"scope": "lua","prefix": "RPC_SCRRESETPLAYERMONEY (20)","body": ["20"],"description": "RPC_SCRRESETPLAYERMONEY = 20"},
	"RPC_SCRCLIENTMESSAGE": {"scope": "lua","prefix": "RPC_SCRCLIENTMESSAGE (93)","body": ["93"],"description": "RPC_SCRCLIENTMESSAGE = 93"},
	"RPC_SCRSETPLAYERVELOCITY": {"scope": "lua","prefix": "RPC_SCRSETPLAYERVELOCITY (90)","body": ["90"],"description": "RPC_SCRSETPLAYERVELOCITY = 90"},
	"RPC_SCRSETOBJECTMATERIAL": {"scope": "lua","prefix": "RPC_SCRSETOBJECTMATERIAL (84)","body": ["84"],"description": "RPC_SCRSETOBJECTMATERIAL = 84"},
	"RPC_SCRHIDEMENU": {"scope": "lua","prefix": "RPC_SCRHIDEMENU (78)","body": ["78"],"description": "RPC_SCRHIDEMENU = 78"},
	"RPC_SCRSETWEATHER": {"scope": "lua","prefix": "RPC_SCRSETWEATHER (152)","body": ["152"],"description": "RPC_SCRSETWEATHER = 152"},
	"RPC_SCRINITMENU": {"scope": "lua","prefix": "RPC_SCRINITMENU (76)","body": ["76"],"description": "RPC_SCRINITMENU = 76"},
	"RPC_SCRATTACHOBJECTTOPLAYER": {"scope": "lua","prefix": "RPC_SCRATTACHOBJECTTOPLAYER (75)","body": ["75"],"description": "RPC_SCRATTACHOBJECTTOPLAYER = 75"},
	"RPC_REQUESTCLASS": {"scope": "lua","prefix": "RPC_REQUESTCLASS (128)","body": ["128"],"description": "RPC_REQUESTCLASS = 128"},
	"RPC_SCRTOGGLEPLAYERSPECTATING": {"scope": "lua","prefix": "RPC_SCRTOGGLEPLAYERSPECTATING (124)","body": ["124"],"description": "RPC_SCRTOGGLEPLAYERSPECTATING = 124"},
	"RPC_SCRREMOVEVEHICLECOMPONENT": {"scope": "lua","prefix": "RPC_SCRREMOVEVEHICLECOMPONENT (57)","body": ["57"],"description": "RPC_SCRREMOVEVEHICLECOMPONENT = 57"},
	"RPC_SCRSETRACECHECKPOINT": {"scope": "lua","prefix": "RPC_SCRSETRACECHECKPOINT (38)","body": ["38"],"description": "RPC_SCRSETRACECHECKPOINT = 38"},
	"RPC_SCRSETOBJECTPOS": {"scope": "lua","prefix": "RPC_SCRSETOBJECTPOS (45)","body": ["45"],"description": "RPC_SCRSETOBJECTPOS = 45"},
	"RPC_SCMEVENT": {"scope": "lua","prefix": "RPC_SCMEVENT (96)","body": ["96"],"description": "RPC_SCMEVENT = 96"},
	"RPC_EDITOBJECT": {"scope": "lua","prefix": "RPC_EDITOBJECT (117)","body": ["117"],"description": "RPC_EDITOBJECT = 117"},
	"PACKET_CONNECTION_COOKIE": {"scope": "lua","prefix": "PACKET_CONNECTION_COOKIE (26)","body": ["26"],"description": "PACKET_CONNECTION_COOKIE = 26"},
	"RPC_SCRGIVEPLAYERWEAPON": {"scope": "lua","prefix": "RPC_SCRGIVEPLAYERWEAPON (22)","body": ["22"],"description": "RPC_SCRGIVEPLAYERWEAPON = 22"},
	"RPC_SCRSETPLAYERPOS": {"scope": "lua","prefix": "RPC_SCRSETPLAYERPOS (12)","body": ["12"],"description": "RPC_SCRSETPLAYERPOS = 12"},
	"RPC_DAMAGEVEHICLE": {"scope": "lua","prefix": "RPC_DAMAGEVEHICLE (106)","body": ["106"],"description": "RPC_DAMAGEVEHICLE = 106"},
	"RPC_VEHICLEDESTROYED": {"scope": "lua","prefix": "RPC_VEHICLEDESTROYED (136)","body": ["136"],"description": "RPC_VEHICLEDESTROYED = 136"},
	"RPC_SCRSETSPAWNINFO": {"scope": "lua","prefix": "RPC_SCRSETSPAWNINFO (68)","body": ["68"],"description": "RPC_SCRSETSPAWNINFO = 68"},
	"RPC_DIALOGRESPONSE": {"scope": "lua","prefix": "RPC_DIALOGRESPONSE (62)","body": ["62"],"description": "RPC_DIALOGRESPONSE = 62"},
	"DIALOG_STYLE_LIST": {"scope": "lua","prefix": "DIALOG_STYLE_LIST (2)","body": ["2"],"description": "DIALOG_STYLE_LIST = 2"},
	"DIALOG_STYLE_TABLIST": {"scope": "lua","prefix": "DIALOG_STYLE_TABLIST (4)","body": ["4"],"description": "DIALOG_STYLE_TABLIST = 4"},
	"DIALOG_STYLE_MSGBOX": {"scope": "lua","prefix": "DIALOG_STYLE_MSGBOX (0)","body": ["0"],"description": "DIALOG_STYLE_MSGBOX = 0"},
	"DIALOG_STYLE_PASSWORD": {"scope": "lua","prefix": "DIALOG_STYLE_PASSWORD (3)","body": ["3"],"description": "DIALOG_STYLE_PASSWORD = 3"},
	"DIALOG_STYLE_INPUT": {"scope": "lua","prefix": "DIALOG_STYLE_INPUT (1)","body": ["1"],"description": "DIALOG_STYLE_INPUT = 1"},
	"DIALOG_STYLE_TABLIST_HEADERS": {"scope": "lua","prefix": "DIALOG_STYLE_TABLIST_HEADERS (5)","body": ["5"],"description": "DIALOG_STYLE_TABLIST_HEADERS = 5"},	

	"onD3DDeviceLost": {
		"scope": "lua",
		"prefix": "onD3DDeviceLost",
		"body": [
			"function onD3DDeviceLost()",
			"\t$0",
			"end"
		],
		"description": "onD3DDeviceLost"
	},
	
	"onD3DDeviceReset": {
		"scope": "lua",
		"prefix": "onD3DDeviceReset",
		"body": [
			"function onD3DDeviceReset()",
			"\t$0",
			"end"
		],
		"description": "onD3DDeviceReset"
	},
	
	"onD3DPresent": {
		"scope": "lua",
		"prefix": "onD3DPresent",
		"body": [
			"function onD3DPresent()",
			"\t$0",
			"end"
		],
		"description": "onD3DPresent"
	},

	"→︎ Зарегестрировать чат-команду": {
		"scope": "lua",
		"prefix": "sampRegisterChatCommand || Зарегестрировать чат-команду",
		"body": [
			"sampRegisterChatCommand('$0', function(arg)",
    		"    $1",
    		"end)"
		],
		"description": "Зарегестрировать чат-команду"
	},

	
	"Функция main": {
		"scope": "lua",
		"prefix": "/main",
		"body": [
			"function main()",
			"    while not isSampAvailable() do wait(0) end",
			"\t\t$0",
			"    while true do",
			"        wait(0)",
			"\t\t$1",
			"    end",
			"end"
		],
		"description": "Создает функцию main"
	},
	
	"lib.requests": {
		"scope": "lua",
		"prefix": "lib.requests",
		"body": ["local requests = require('requests')"],
		"description": "lib.requests"
	},
	"lib.mimgui": {
		"scope": "lua",
		"prefix": "lib.mimgui;",
		"body": ["local imgui = require('mimgui')"],
		"description": "lib.mimgui"
	},
	"lib.memory": {
		"scope": "lua",
		"prefix": "lib.memory",
		"body": ["local memory = require('memory')"],
		"description": "lib.memory"
	},
	"lib.ffi": {
		"scope": "lua",
		"prefix": "lib.ffi",
		"body": ["local ffi = require('ffi')"],
		"description": "lib.ffi"
	},
	"ffi.string": {
		"scope": "lua",
		"prefix": "ffi.string",
		"body": ["ffi.string"],
		"description": "ffi.string"
	},
	"ffi.sizeof": {
		"scope": "lua",
		"prefix": "ffi.sizeof",
		"body": ["ffi.sizeof"],
		"description": "ffi.sizeof"
	},
	"for line": {
		"scope": "lua",
		"prefix": "for line",
		"body": [
		"for line in ${0:text}:gmatch('[^\\n]+') do",
		"    ",
		"end"
		],
		"description": "for line"
	},

	"addEventHandler || Добавить обработчик событий": {
		"scope": "lua",
		"prefix": "addEventHandler",
		"body": [
			"addEventHandler('${0:EventName}', function(${1:arg})",
			"    $0",
			"end)"
		],
		"description": "Добавить обработчик событий"
	},
	"Функция для работы с JSON": {
		"scope": "lua",
		"prefix": "/json",
		"body": [
			"function json(filePath)",
			"    local class, filePath = {}, getWorkingDirectory()..'\\config\\'..(filePath:find('(.+).json') and filePath or filePath..'.json')",
			"    if not doesDirectoryExist(getWorkingDirectory()..'\\config') then createDirectory(getWorkingDirectory()..'\\config') end",
			"    function class:Save(tbl)",
			"        if tbl then",
			"            local F = io.open(filePath, 'w')",
			"            F:write(encodeJson(tbl) or {})",
			"            F:close()",
			"            return true, 'ok'",
			"        end",
			"        return false, 'table = nil'",
			"    end",
			"    function class:Load(defaultTable)",
			"        if not doesFileExist(filePath) then class:Save(defaultTable or {}) end",
			"        local F = io.open(filePath, 'r+')",
			"        local TABLE = decodeJson(F:read() or {})",
			"        F:close()",
			"        for def_k, def_v in next, defaultTable do if TABLE[def_k] == nil then TABLE[def_k] = def_v end end",
			"        return TABLE",
			"    end",
			"    return class",
			"end"
		],
		"description": "Функция для работы с JSON"
	},

	"onExitScript || выполняется в скрипте перед его нормальным завершением": {
		"scope": "lua",
		"prefix": "onExitScript",
		"body": [
			"function onExitScript(quitGame)",
			"    $0",
			"end"
		],
		"description": "выполняется в скрипте перед его нормальным завершением"
	},
	"onScriptMessage || вызывается когда любой скрипт добавляет новое сообщение в лог": {
		"scope": "lua",
		"prefix": "onScriptMessage",
		"body": [
			"function onScriptMessage(msg, scr) ",
			"    $0",
			"end"
		],
		"description": "вызывается когда любой скрипт добавляет новое сообщение в лог"
	},
	"onSystemMessage || вызывается когда MoonLoader добавляет новое сообщение в лог": {
		"scope": "lua",
		"prefix": "onSystemMessage",
		"body": [
			"function onSystemMessage(msg, type, scr) ",
			"    $0",
			"end"
		],
		"description": "вызывается когда MoonLoader добавляет новое сообщение в лог"
	},
	"onQuitGame || выполняется перед выходом из игры": {
		"scope": "lua",
		"prefix": "onQuitGame",
		"body": [
			"function onQuitGame() ",
			"    $0",
			"end"
		],
		"description": "выполняется перед выходом из игры"
	},
	"onSystemInitialized || выполняется после загрузки всех скриптов, но перед входом в основной цикл": {
		"scope": "lua",
		"prefix": "onSystemInitialized",
		"body": [
			"function onSystemInitialized() ",
			"    $0",
			"end"
		],
		"description": "выполняется после загрузки всех скриптов, но перед входом в основной цикл"
	},
	"onScriptLoad || выполняется при загрузке нового скрипта": {
		"scope": "lua",
		"prefix": "onScriptLoad",
		"body": [
			"function onScriptLoad(scr) ",
			"    $0",
			"end"
		],
		"description": "выполняется при загрузке нового скрипта"
	},
	"onScriptTerminate || вызывается перед выгрузкой любого скрипта. выполняется раньше, чем 'onExitScript'": {
		"scope": "lua",
		"prefix": "onScriptTerminate",
		"body": [
			"function onScriptTerminate(scr, quitGame) ",
			"    $0",
			"end"
		],
		"description": "вызывается перед выгрузкой любого скрипта. выполняется раньше, чем 'onExitScript'"
	},
	"onReceiveRpc || получение RPC": {
		"scope": "lua",
		"prefix": "onReceiveRpc",
		"body": [
			"function onReceiveRpc(id, bs) ",
			"    $0",
			"end"
		],
		"description": "получение RPC"
	},
	"onReceivePacket || получение пакета": {
		"scope": "lua",
		"prefix": "onReceivePacket",
		"body": [
			"function onReceivePacket(id, bs) ",
			"    $0",
			"end"
		],
		"description": "получение пакета"
	},
	"onSendRpc || отправка RPC": {
		"scope": "lua",
		"prefix": "onSendRpc",
		"body": [
			"function onSendRpc(id, bs, priority, reliability, orderingChannel, shiftTs) ",
			"    $0",
			"end"
		],
		"description": "отправка RPC"
	},
	"onSendPacket || отправка пакета": {
		"scope": "lua",
		"prefix": "onSendPacket",
		"body": [
			"function onSendPacket(id, bs, priority, reliability, orderingChannel) ",
			"    $0",
			"end"
		],
		"description": "отправка пакета"
	},
	
	"imgui.OutlineText || (custom) текст с обводкой": {
		"scope": "lua",
		"prefix": "imgui.OutlineText",
		"body": [
			"function imgui.OutlineText(text, outlineSize, textColor, outlineColor)",
			"    local outlineSize = outlineSize or 1",
			"    local c = imgui.GetCursorPos()",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x - outlineSize, c.y)) -- left",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x + outlineSize, c.y)) -- right",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x, c.y - outlineSize)) -- bottom",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x, c.y + outlineSize)) -- upper",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x - outlineSize, c.y + outlineSize)) -- upper-left",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x + outlineSize, c.y + outlineSize)) -- upper-right",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x - outlineSize, c.y - outlineSize)) -- bottom-left",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x + outlineSize, c.y - outlineSize)) -- bottom-right",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(c)",
			"    imgui.TextColored(textColor or imgui.ImVec4(1, 1, 1, 1), text)",
			"end"
		],
		"description": "текст с обводкой"
	},

	"Шаблон mimgui окна": {
	    "scope": "lua",
	    "prefix": "/mimgui || Шаблон mimgui окна",
	    "body": [
	        "local imgui = require 'mimgui'",
	        "local encoding = require 'encoding'",
	        "encoding.default = 'CP1251'",
	        "u8 = encoding.UTF8",
	        "",
	        "local renderWindow = imgui.new.bool(true)",
	        "",
	        "imgui.OnInitialize(function()",
	        "    imgui.GetIO().IniFilename = nil",
	        "end)",
	        "",
	        "local newFrame = imgui.OnFrame(",
	        "    function() return renderWindow[0] end,",
	        "    function(player)",
	        "        local resX, resY = getScreenResolution()",
	        "        local sizeX, sizeY = 300, 300",
	        "        imgui.SetNextWindowPos(imgui.ImVec2(resX / 2, resY / 2), imgui.Cond.FirstUseEver, imgui.ImVec2(0.5, 0.5))",
	        "        imgui.SetNextWindowSize(imgui.ImVec2(sizeX, sizeY), imgui.Cond.FirstUseEver)",
	        "        if imgui.Begin('Main Window', renderWindow) then",
	        "            $0     ",
	        "            imgui.End()",
	        "        end",
	        "    end",
	        ")",
	        "",
	        "function main()",
	        "    while not isSampAvailable() do wait(0) end",
	        "    sampRegisterChatCommand('mimgui', function()",
	        "        renderWindow[0] = not renderWindow[0]",
	        "    end)",
	        "    wait(-1)",
	        "end"
	    ],
	    "description": "Шаблон mimgui окна"
	},
	"Заготовка inicfg": {
	    "scope": "lua",
	    "prefix": "/inicfg || Заготовка inicfg",
	    "body": [
	        "local inicfg = require 'inicfg'",
	        "local directIni = '${0:filename}.ini'",
	        "local ini = inicfg.load(inicfg.load({",
	        "    main = {",
	        "        enabled = true",
	        "    },",
	        "}, directIni))",
	        "inicfg.save(ini, directIni)",
	        "",
	        "local SaveCfg = function()",
	        "    ini.main.enabled = false",
	        "    inicfg.save(ini, directIni)",
	        "end"
	    ],
	    "description": "Заготовка inicfg"
	},
	"Добавить сообщение в чат": {
	    "scope": "lua",
	    "prefix": "Добавить сообщение в чат",
	    "body": [
			"sampAddChatMessage(${0:text}, -1)"
		],
	    "description": "Добавить сообщение в чат"
	},
	"imgui.CenterText function": {
	    "scope": "lua",
	    "prefix": "/imgui.CenterText",
	    "body": [
	        "function imgui.CenterText(text)",
	        "    imgui.SetCursorPosX(imgui.GetWindowSize().x / 2 - imgui.CalcTextSize(text).x / 2)",
	        "    imgui.Text(text)",
	        "end"
	    ],
	    "description": "imgui.CenterText function"
	},
	"ARGB functions": {
	    "scope": "lua",
	    "prefix": "/argb",
	    "body": [
	        "function join_argb(a, r, g, b)",
	        "    local argb = b  -- b",
	        "    argb = bit.bor(argb, bit.lshift(g, 8))  -- g",
	        "    argb = bit.bor(argb, bit.lshift(r, 16)) -- r",
	        "    argb = bit.bor(argb, bit.lshift(a, 24)) -- a",
	        "    return argb",
	        "end",
	        "",
	        "function explode_argb(argb)",
	        "    local a = bit.band(bit.rshift(argb, 24), 0xFF)",
	        "    local r = bit.band(bit.rshift(argb, 16), 0xFF)",
	        "    local g = bit.band(bit.rshift(argb, 8), 0xFF)",
	        "    local b = bit.band(argb, 0xFF)",
	        "    return a, r, g, b",
	        "end",
	        "",
	        "function argb_to_rgba(argb)",
	        "    local a, r, g, b = explode_argb(argb)",
	        "    return join_argb(r, g, b, a)",
	        "end"
	    ],
	    "description": "ARGB functions"
	},


	"lib.moonloader": {
		"scope": "lua",
		"prefix": "require('lib.moonloader')",
		"body": ["require('lib.moonloader')"],
		"description": "require('lib.moonloader')"
	},
	"PLAYER_PED || Хендл вашего персонажа": {
		"scope": "lua",
		"prefix": "PLAYER_PED || Хендл вашего персонажа",
		"body": ["PLAYER_PED"],
		"description": "Хендл вашего персонажа"
	},
	"myid() || Айди вашего персонажа": {
		"scope": "lua",
		"prefix": "myid() || Айди вашего персонажа",
		"body": ["select(2, sampGetPlayerIdByCharHandle(PLAYER_PED))"],
		"description": "Айди вашего персонажа"
	},


	"имя скрипта, заданное функцией 'script_name'. Если имя не задано используется название файла": {
		"scope": "lua",
		"prefix": "thisScript().name | имя скрипта, заданное функцией 'script_name'. Если имя не задано используется название файла",
		"body": [
			"thisScript().name"
		],
		"description": "thisScript().name\n\nимя скрипта, заданное функцией 'script_name'. Если имя не задано используется название файла"
	},
	"описание скрипта, указанное функцией 'script_description'. Пустая строка, если не указано": {
		"scope": "lua",
		"prefix": "thisScript().description | описание скрипта, указанное функцией 'script_description'. Пустая строка, если не указано",
		"body": [
			"thisScript().description"
		],
		"description": "thisScript().description\n\nописание скрипта, указанное функцией 'script_description'. Пустая строка, если не указано"
	},
	"числовая версия скрипта. 0, если не указано": {
		"scope": "lua",
		"prefix": "thisScript().version_num | числовая версия скрипта. 0, если не указано",
		"body": [
			"thisScript().version_num"
		],
		"description": "thisScript().version_num\n\nчисловая версия скрипта. 0, если не указано"
	},
	"текстовая версия скрипта. Будет использована числовая версия, если не задано": {
		"scope": "lua",
		"prefix": "thisScript().version | текстовая версия скрипта. Будет использована числовая версия, если не задано",
		"body": [
			"thisScript().version"
		],
		"description": "thisScript().version\n\nтекстовая версия скрипта. Будет использована числовая версия, если не задано"
	},
	"список авторов скрипта. Пустой, если не указаны": {
		"scope": "lua",
		"prefix": "thisScript().authors | список авторов скрипта. Пустой, если не указаны",
		"body": [
			"thisScript().authors"
		],
		"description": "thisScript().authors\n\nсписок авторов скрипта. Пустой, если не указаны"
	},
	"список зависимостей скрипта. Пустой, если не указаны": {
		"scope": "lua",
		"prefix": "thisScript().dependencies | список зависимостей скрипта. Пустой, если не указаны",
		"body": [
			"thisScript().dependencies"
		],
		"description": "thisScript().dependencies\n\nсписок зависимостей скрипта. Пустой, если не указаны"
	},
	"полный путь к файлу скрипта": {
		"scope": "lua",
		"prefix": "thisScript().path | полный путь к файлу скрипта",
		"body": [
			"thisScript().path"
		],
		"description": "thisScript().path\n\nполный путь к файлу скрипта"
	},
	"название файла скрипта, включая расширение": {
		"scope": "lua",
		"prefix": "thisScript().filename | название файла скрипта, включая расширение",
		"body": [
			"thisScript().filename"
		],
		"description": "thisScript().filename\n\nназвание файла скрипта, включая расширение"
	},
	"полный путь директории, из который был загружен скрипт": {
		"scope": "lua",
		"prefix": "thisScript().directory | полный путь директории, из который был загружен скрипт",
		"body": [
			"thisScript().directory"
		],
		"description": "thisScript().directory\n\nполный путь директории, из который был загружен скрипт"
	},
	"статус активности потока (приостановлен/активен)": {
		"scope": "lua",
		"prefix": "thisScript().frozen | статус активности потока (приостановлен/активен)",
		"body": [
			"thisScript().frozen"
		],
		"description": "thisScript().frozen\n\nстатус активности потока (приостановлен/активен)"
	},
	"статус существования потока. Есть случаи, когда поток уже завершён, а lua-объект скрипта ещё существует. Свойство dead проверяет объект скрипта на валидность": {
		"scope": "lua",
		"prefix": "thisScript().dead | статус существования потока. Есть случаи, когда поток уже завершён, а lua-объект скрипта ещё существует. Свойство dead проверяет объект скрипта на валидность",
		"body": [
			"thisScript().dead"
		],
		"description": "thisScript().dead\n\nстатус существования потока. Есть случаи, когда поток уже завершён, а lua-объект скрипта ещё существует. Свойство dead проверяет объект скрипта на валидность"
	},
	"экспортируемые скриптом значения. Можно получить и функцией import": {
		"scope": "lua",
		"prefix": "thisScript().exports | экспортируемые скриптом значения. Можно получить и функцией import",
		"body": [
			"thisScript().exports"
		],
		"description": "thisScript().exports\n\nэкспортируемые скриптом значения. Можно получить и функцией import"
	},
	"уникальный идентификатор скрипта": {
		"scope": "lua",
		"prefix": "thisScript().id | уникальный идентификатор скрипта",
		"body": [
			"thisScript().id"
		],
		"description": "thisScript().id\n\nуникальный идентификатор скрипта"
	},
	"web-адрес скрипта": {
		"scope": "lua",
		"prefix": "thisScript().url | web-адрес скрипта",
		"body": [
			"thisScript().url"
		],
		"description": "thisScript().url\n\nweb-адрес скрипта"
	},
	"список свойств, заданных директивой script_properties": {
		"scope": "lua",
		"prefix": "thisScript().properties | список свойств, заданных директивой script_properties",
		"body": [
			"thisScript().properties"
		],
		"description": "thisScript().properties\n\nсписок свойств, заданных директивой script_properties"
	},
	"приостанавливает поток скрипта": {
		"scope": "lua",
		"prefix": "thisScript():pause() | приостанавливает поток скрипта",
		"body": [
			"thisScript():pause()"
		],
		"description": "thisScript():pause()\n\nприостанавливает поток скрипта"
	},
	"снимает остановленный поток с паузы": {
		"scope": "lua",
		"prefix": "thisScript():resume() | снимает остановленный поток с паузы",
		"body": [
			"thisScript():resume()"
		],
		"description": "thisScript():resume()\n\nснимает остановленный поток с паузы"
	},
	"выгружает скрипт": {
		"scope": "lua",
		"prefix": "thisScript():unload() | выгружает скрипт",
		"body": [
			"thisScript():unload()"
		],
		"description": "thisScript():unload()\n\nвыгружает скрипт"
	},
	"перезагружает скрипт": {
		"scope": "lua",
		"prefix": "thisScript():reload() | перезагружает скрипт",
		"body": [
			"thisScript():reload()"
		],
		"description": "thisScript():reload()\n\nперезагружает скрипт"
	},













    
    "makePlayerFireProof": {
        "description": "makePlayerFireProof",
        "body": [
            "makePlayerFireProof(${0:Player player, bool fireproof})"
        ],
        "prefix": "makePlayerFireProof",
        "scope": "lua"
    },
    "controlMovableVehiclePart": {
        "description": "controlMovableVehiclePart",
        "body": [
            "controlMovableVehiclePart(${0:Vehicle car, float angle})"
        ],
        "prefix": "controlMovableVehiclePart",
        "scope": "lua"
    },
    "raknetNewBitStream": {
        "description": "raknetNewBitStream",
        "body": [
            "raknetNewBitStream()"
        ],
        "prefix": "raknetNewBitStream",
        "scope": "lua"
    },
    "loadAndLaunchMissionInternal": {
        "description": "loadAndLaunchMissionInternal",
        "body": [
            "loadAndLaunchMissionInternal(${0:int mission})"
        ],
        "prefix": "loadAndLaunchMissionInternal",
        "scope": "lua"
    },
    "setCarEscortCarRight": {
        "description": "setCarEscortCarRight",
        "body": [
            "setCarEscortCarRight(${0:Vehicle car, Vehicle followCar})"
        ],
        "prefix": "setCarEscortCarRight",
        "scope": "lua"
    },
    "switchWidescreen": {
        "description": "switchWidescreen",
        "body": [
            "switchWidescreen(${0:bool enable})"
        ],
        "prefix": "switchWidescreen",
        "scope": "lua"
    },
    "takeRemoteControlOfCar": {
        "description": "takeRemoteControlOfCar",
        "body": [
            "takeRemoteControlOfCar(${0:Player player, Vehicle car})"
        ],
        "prefix": "takeRemoteControlOfCar",
        "scope": "lua"
    },
    "improveCarByCheating": {
        "description": "improveCarByCheating",
        "body": [
            "improveCarByCheating(${0:Vehicle car, bool affectedByCheats})"
        ],
        "prefix": "improveCarByCheating",
        "scope": "lua"
    },
    "taskCarDriveWander": {
        "description": "taskCarDriveWander",
        "body": [
            "taskCarDriveWander(${0:Ped ped, Vehicle hijackCar, float searchRadius, int trafficBehavior})"
        ],
        "prefix": "taskCarDriveWander",
        "scope": "lua"
    },
    "planeFlyInDirection": {
        "description": "planeFlyInDirection",
        "body": [
            "planeFlyInDirection(${0:int plane, float direction, float altitudemin, float altitudemax})"
        ],
        "prefix": "planeFlyInDirection",
        "scope": "lua"
    },
    "isCharInAnyTrain": {
        "description": "isCharInAnyTrain",
        "body": [
            "isCharInAnyTrain(${0:Ped ped})"
        ],
        "prefix": "isCharInAnyTrain",
        "scope": "lua"
    },
    "taskTurnCharToFaceChar": {
        "description": "taskTurnCharToFaceChar",
        "body": [
            "taskTurnCharToFaceChar(${0:Ped ped, int rotateTo})"
        ],
        "prefix": "taskTurnCharToFaceChar",
        "scope": "lua"
    },
    "dxutListboxDeleteItem": {
        "description": "dxutListboxDeleteItem",
        "body": [
            "dxutListboxDeleteItem(${0:DxutDialog dialog, int id, int element})"
        ],
        "prefix": "dxutListboxDeleteItem",
        "scope": "lua"
    },
    "clearOnscreenTimer": {
        "description": "clearOnscreenTimer",
        "body": [
            "clearOnscreenTimer(${0:VarId var})"
        ],
        "prefix": "clearOnscreenTimer",
        "scope": "lua"
    },
    "startKillFrenzy": {
        "description": "startKillFrenzy",
        "body": [
            "startKillFrenzy(${0:GxtString gxtString, int weapon, int timeLimit, int targets, Model targetModels1, Model targetModels2, Model targetModels3, Model targetModels4, bool completedText})"
        ],
        "prefix": "startKillFrenzy",
        "scope": "lua"
    },
    "setSearchlightClipIfColliding": {
        "description": "setSearchlightClipIfColliding",
        "body": [
            "setSearchlightClipIfColliding(${0:Searchlight searchlight, bool flag})"
        ],
        "prefix": "setSearchlightClipIfColliding",
        "scope": "lua"
    },
    "sampGetPickupHandleBySampId": {
        "description": "sampGetPickupHandleBySampId",
        "body": [
            "sampGetPickupHandleBySampId(${0:int id})"
        ],
        "prefix": "sampGetPickupHandleBySampId",
        "scope": "lua"
    },
    "clearRelationship": {
        "description": "clearRelationship",
        "body": [
            "clearRelationship(${0:int acquaintance, int pedtype, int toPedtype})"
        ],
        "prefix": "clearRelationship",
        "scope": "lua"
    },
    "playerLeftCrane": {
        "description": "playerLeftCrane",
        "body": [
            "playerLeftCrane()"
        ],
        "prefix": "playerLeftCrane",
        "scope": "lua"
    },
    "hasCharBeenDamagedByCar": {
        "description": "hasCharBeenDamagedByCar",
        "body": [
            "hasCharBeenDamagedByCar(${0:Ped ped, Vehicle byCar})"
        ],
        "prefix": "hasCharBeenDamagedByCar",
        "scope": "lua"
    },
    "isNightVisionActive": {
        "description": "isNightVisionActive",
        "body": [
            "isNightVisionActive()"
        ],
        "prefix": "isNightVisionActive",
        "scope": "lua"
    },
    "isGangWarFightingGoingOn": {
        "description": "isGangWarFightingGoingOn",
        "body": [
            "isGangWarFightingGoingOn()"
        ],
        "prefix": "isGangWarFightingGoingOn",
        "scope": "lua"
    },
    "setArea51SamSite": {
        "description": "setArea51SamSite",
        "body": [
            "setArea51SamSite(${0:bool enable})"
        ],
        "prefix": "setArea51SamSite",
        "scope": "lua"
    },
    "setMessageFormatting": {
        "description": "setMessageFormatting",
        "body": [
            "setMessageFormatting(${0:bool priority, int leftmargin, int maxwidth})"
        ],
        "prefix": "setMessageFormatting",
        "scope": "lua"
    },
    "setLoadCollisionForCarFlag": {
        "description": "setLoadCollisionForCarFlag",
        "body": [
            "setLoadCollisionForCarFlag(${0:Vehicle car, bool enable})"
        ],
        "prefix": "setLoadCollisionForCarFlag",
        "scope": "lua"
    },
    "createFxSystemOnCar": {
        "description": "createFxSystemOnCar",
        "body": [
            "createFxSystemOnCar(${0:string particle, Vehicle car, float offsetX, float offsetY, float offsetZ, int type})"
        ],
        "prefix": "createFxSystemOnCar",
        "scope": "lua"
    },
    "drawRect": {
        "description": "drawRect",
        "body": [
            "drawRect(${0:float positionX, float positionY, float width, float height, int r, int g, int b, int a})"
        ],
        "prefix": "drawRect",
        "scope": "lua"
    },
    "setUpSkip": {
        "description": "setUpSkip",
        "body": [
            "setUpSkip(${0:float posX, float posY, float posZ, float angle})"
        ],
        "prefix": "setUpSkip",
        "scope": "lua"
    },
    "isCharStoppedInAngledAreaInCar2d": {
        "description": "isCharStoppedInAngledAreaInCar2d",
        "body": [
            "isCharStoppedInAngledAreaInCar2d(${0:Ped ped, float x1, float y1, float x2, float y2, float height, bool flag})"
        ],
        "prefix": "isCharStoppedInAngledAreaInCar2d",
        "scope": "lua"
    },
    "downloadUrlToFile": {
        "description": "downloadUrlToFile",
        "body": [
            "downloadUrlToFile(${0:string url, string file, function statusCallback})"
        ],
        "prefix": "downloadUrlToFile",
        "scope": "lua"
    },
    "isTrailerAttachedToCab": {
        "description": "isTrailerAttachedToCab",
        "body": [
            "isTrailerAttachedToCab(${0:Vehicle trailer, Vehicle car})"
        ],
        "prefix": "isTrailerAttachedToCab",
        "scope": "lua"
    },
    "boatGotoCoords": {
        "description": "boatGotoCoords",
        "body": [
            "boatGotoCoords(${0:Vehicle boat, float toX, float toY, float toZ})"
        ],
        "prefix": "boatGotoCoords",
        "scope": "lua"
    },
    "setCarVisible": {
        "description": "setCarVisible",
        "body": [
            "setCarVisible(${0:Vehicle car, bool visible})"
        ],
        "prefix": "setCarVisible",
        "scope": "lua"
    },
    "printWith3Numbers": {
        "description": "printWith3Numbers",
        "body": [
            "printWith3Numbers(${0:GxtString gxtString, int numbers1, int numbers2, int numbers3, int time, int flag})"
        ],
        "prefix": "printWith3Numbers",
        "scope": "lua"
    },
    "addStuckCarCheckWithWarp": {
        "description": "addStuckCarCheckWithWarp",
        "body": [
            "addStuckCarCheckWithWarp(${0:Vehicle car, float checkDistance, int time, bool stuck, bool flipped, bool warp, int path})"
        ],
        "prefix": "addStuckCarCheckWithWarp",
        "scope": "lua"
    },
    "startCharFacialTalk": {
        "description": "startCharFacialTalk",
        "body": [
            "startCharFacialTalk(${0:Ped ped, int time})"
        ],
        "prefix": "startCharFacialTalk",
        "scope": "lua"
    },
    "policeHeliChaseEntity": {
        "description": "policeHeliChaseEntity",
        "body": [
            "policeHeliChaseEntity(${0:Vehicle heli, Ped ped, Vehicle car, float radius})"
        ],
        "prefix": "policeHeliChaseEntity",
        "scope": "lua"
    },
    "setHeliReachedTargetDistance": {
        "description": "setHeliReachedTargetDistance",
        "body": [
            "setHeliReachedTargetDistance(${0:Vehicle heli, int dist})"
        ],
        "prefix": "setHeliReachedTargetDistance",
        "scope": "lua"
    },
    "planeStartsInAir": {
        "description": "planeStartsInAir",
        "body": [
            "planeStartsInAir(${0:int hydra})"
        ],
        "prefix": "planeStartsInAir",
        "scope": "lua"
    },
    "allocateStreamedScriptToRandomPed": {
        "description": "allocateStreamedScriptToRandomPed",
        "body": [
            "allocateStreamedScriptToRandomPed(${0:int externalScript, Model actorModel, int priority})"
        ],
        "prefix": "allocateStreamedScriptToRandomPed",
        "scope": "lua"
    },
    "isMessageBeingDisplayed": {
        "description": "isMessageBeingDisplayed",
        "body": [
            "isMessageBeingDisplayed()"
        ],
        "prefix": "isMessageBeingDisplayed",
        "scope": "lua"
    },
    "readKillFrenzyStatus": {
        "description": "readKillFrenzyStatus",
        "body": [
            "readKillFrenzyStatus()"
        ],
        "prefix": "readKillFrenzyStatus",
        "scope": "lua"
    },
    "setCharBulletproofVest": {
        "description": "setCharBulletproofVest",
        "body": [
            "setCharBulletproofVest(${0:Ped ped, bool enable})"
        ],
        "prefix": "setCharBulletproofVest",
        "scope": "lua"
    },
    "clearCharRelationship": {
        "description": "clearCharRelationship",
        "body": [
            "clearCharRelationship(${0:Ped ped, int acquaintance, int pedtype})"
        ],
        "prefix": "clearCharRelationship",
        "scope": "lua"
    },
    "isCharStoppedInAreaOnFoot3d": {
        "description": "isCharStoppedInAreaOnFoot3d",
        "body": [
            "isCharStoppedInAreaOnFoot3d(${0:Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere})"
        ],
        "prefix": "isCharStoppedInAreaOnFoot3d",
        "scope": "lua"
    },
    "loadSpecialModel": {
        "description": "loadSpecialModel",
        "body": [
            "loadSpecialModel(${0:Model modelId, GxtString gxtString})"
        ],
        "prefix": "loadSpecialModel",
        "scope": "lua"
    },
    "locateCharInCarChar2d": {
        "description": "locateCharInCarChar2d",
        "body": [
            "locateCharInCarChar2d(${0:Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCharInCarChar2d",
        "scope": "lua"
    },
    "locateCharOnFootObject3d": {
        "description": "locateCharOnFootObject3d",
        "body": [
            "locateCharOnFootObject3d(${0:Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateCharOnFootObject3d",
        "scope": "lua"
    },
    "addHospitalRestart": {
        "description": "addHospitalRestart",
        "body": [
            "addHospitalRestart(${0:float atX, float atY, float atZ, float angle, int townNumber})"
        ],
        "prefix": "addHospitalRestart",
        "scope": "lua"
    },
    "deactivateGarage": {
        "description": "deactivateGarage",
        "body": [
            "deactivateGarage(${0:GxtString garage})"
        ],
        "prefix": "deactivateGarage",
        "scope": "lua"
    },
    "getNumberOfInstancesOfStreamedScript": {
        "description": "getNumberOfInstancesOfStreamedScript",
        "body": [
            "getNumberOfInstancesOfStreamedScript(${0:int externalScript})"
        ],
        "prefix": "getNumberOfInstancesOfStreamedScript",
        "scope": "lua"
    },
    "makePlayerGangDisappear": {
        "description": "makePlayerGangDisappear",
        "body": [
            "makePlayerGangDisappear()"
        ],
        "prefix": "makePlayerGangDisappear",
        "scope": "lua"
    },
    "stopFxSystem": {
        "description": "stopFxSystem",
        "body": [
            "stopFxSystem(${0:Particle particle})"
        ],
        "prefix": "stopFxSystem",
        "scope": "lua"
    },
    "clearOnscreenCounter": {
        "description": "clearOnscreenCounter",
        "body": [
            "clearOnscreenCounter(${0:VarId var})"
        ],
        "prefix": "clearOnscreenCounter",
        "scope": "lua"
    },
    "allowFixedCameraCollision": {
        "description": "allowFixedCameraCollision",
        "body": [
            "allowFixedCameraCollision(${0:bool allow})"
        ],
        "prefix": "allowFixedCameraCollision",
        "scope": "lua"
    },
    "doFade": {
        "description": "doFade",
        "body": [
            "doFade(${0:bool in, int time})"
        ],
        "prefix": "doFade",
        "scope": "lua"
    },
    "isCarWaitingForWorldCollision": {
        "description": "isCarWaitingForWorldCollision",
        "body": [
            "isCarWaitingForWorldCollision(${0:Vehicle car})"
        ],
        "prefix": "isCarWaitingForWorldCollision",
        "scope": "lua"
    },
    "setCarForwardSpeed": {
        "description": "setCarForwardSpeed",
        "body": [
            "setCarForwardSpeed(${0:Vehicle car, float speed})"
        ],
        "prefix": "setCarForwardSpeed",
        "scope": "lua"
    },
    "activatePimpCheat": {
        "description": "activatePimpCheat",
        "body": [
            "activatePimpCheat(${0:bool enable})"
        ],
        "prefix": "activatePimpCheat",
        "scope": "lua"
    },
    "taskSitDown": {
        "description": "taskSitDown",
        "body": [
            "taskSitDown(${0:Ped ped, int timeMS})"
        ],
        "prefix": "taskSitDown",
        "scope": "lua"
    },
    "isSkipCutsceneButtonPressed": {
        "description": "isSkipCutsceneButtonPressed",
        "body": [
            "isSkipCutsceneButtonPressed()"
        ],
        "prefix": "isSkipCutsceneButtonPressed",
        "scope": "lua"
    },
    "setUsesCollisionOfClosestObjectOfType": {
        "description": "setUsesCollisionOfClosestObjectOfType",
        "body": [
            "setUsesCollisionOfClosestObjectOfType(${0:float X, float Y, float Z, float radius, Model modelId, bool collisionDetection})"
        ],
        "prefix": "setUsesCollisionOfClosestObjectOfType",
        "scope": "lua"
    },
    "isCharInAngledAreaOnFoot3d": {
        "description": "isCharInAngledAreaOnFoot3d",
        "body": [
            "isCharInAngledAreaOnFoot3d(${0:Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere})"
        ],
        "prefix": "isCharInAngledAreaOnFoot3d",
        "scope": "lua"
    },
    "taskDrivePointRouteAdvanced": {
        "description": "taskDrivePointRouteAdvanced",
        "body": [
            "taskDrivePointRouteAdvanced(${0:Ped ped, Vehicle car, float speed, int flag1, int flag2, int flag3})"
        ],
        "prefix": "taskDrivePointRouteAdvanced",
        "scope": "lua"
    },
    "setTimerBeepCountdownTime": {
        "description": "setTimerBeepCountdownTime",
        "body": [
            "setTimerBeepCountdownTime(${0:VarId timer, int reach})"
        ],
        "prefix": "setTimerBeepCountdownTime",
        "scope": "lua"
    },
    "wasCutsceneSkipped": {
        "description": "wasCutsceneSkipped",
        "body": [
            "wasCutsceneSkipped()"
        ],
        "prefix": "wasCutsceneSkipped",
        "scope": "lua"
    },
    "isCharStoppedInArea2d": {
        "description": "isCharStoppedInArea2d",
        "body": [
            "isCharStoppedInArea2d(${0:Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
        ],
        "prefix": "isCharStoppedInArea2d",
        "scope": "lua"
    },
    "customPlateDesignForNextCar": {
        "description": "customPlateDesignForNextCar",
        "body": [
            "customPlateDesignForNextCar(${0:Model modelNumplate, int townTexture})"
        ],
        "prefix": "customPlateDesignForNextCar",
        "scope": "lua"
    },
    "isCharStoppedInAreaInCar3d": {
        "description": "isCharStoppedInAreaInCar3d",
        "body": [
            "isCharStoppedInAreaInCar3d(${0:Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere})"
        ],
        "prefix": "isCharStoppedInAreaInCar3d",
        "scope": "lua"
    },
    "fixCarDoor": {
        "description": "fixCarDoor",
        "body": [
            "fixCarDoor(${0:Vehicle car, int door})"
        ],
        "prefix": "fixCarDoor",
        "scope": "lua"
    },
    "shutPlayerUp": {
        "description": "shutPlayerUp",
        "body": [
            "shutPlayerUp(${0:Player player, bool shut})"
        ],
        "prefix": "shutPlayerUp",
        "scope": "lua"
    },
    "createRandomCharAsDriver": {
        "description": "createRandomCharAsDriver",
        "body": [
            "createRandomCharAsDriver(${0:Vehicle car})"
        ],
        "prefix": "createRandomCharAsDriver",
        "scope": "lua"
    },
    "detachTrailerFromCab": {
        "description": "detachTrailerFromCab",
        "body": [
            "detachTrailerFromCab(${0:Vehicle trailer, Vehicle cab})"
        ],
        "prefix": "detachTrailerFromCab",
        "scope": "lua"
    },
    "startSettingUpConversation": {
        "description": "startSettingUpConversation",
        "body": [
            "startSettingUpConversation(${0:Ped ped})"
        ],
        "prefix": "startSettingUpConversation",
        "scope": "lua"
    },
    "loadSpecialCharacter": {
        "description": "loadSpecialCharacter",
        "body": [
            "loadSpecialCharacter(${0:GxtString gxtString, int id})"
        ],
        "prefix": "loadSpecialCharacter",
        "scope": "lua"
    },
    "deleteSearchlight": {
        "description": "deleteSearchlight",
        "body": [
            "deleteSearchlight(${0:Searchlight searchlight})"
        ],
        "prefix": "deleteSearchlight",
        "scope": "lua"
    },
    "declareMissionFlag": {
        "description": "declareMissionFlag",
        "body": [
            "declareMissionFlag(${0:VarId flag})"
        ],
        "prefix": "declareMissionFlag",
        "scope": "lua"
    },
    "getPriceOfItem": {
        "description": "getPriceOfItem",
        "body": [
            "getPriceOfItem(${0:int item})"
        ],
        "prefix": "getPriceOfItem",
        "scope": "lua"
    },
    "removeAllScriptFires": {
        "description": "removeAllScriptFires",
        "body": [
            "removeAllScriptFires()"
        ],
        "prefix": "removeAllScriptFires",
        "scope": "lua"
    },
    "clearAllCharRelationships": {
        "description": "clearAllCharRelationships",
        "body": [
            "clearAllCharRelationships(${0:Ped ped, int acquaintance})"
        ],
        "prefix": "clearAllCharRelationships",
        "scope": "lua"
    },
    "switchAudioZone": {
        "description": "switchAudioZone",
        "body": [
            "switchAudioZone(${0:GxtString zone, bool enableSound})"
        ],
        "prefix": "switchAudioZone",
        "scope": "lua"
    },
    "taskGreetPartner": {
        "description": "taskGreetPartner",
        "body": [
            "taskGreetPartner(${0:Ped ped, Ped ped2, float unk1, int unk2})"
        ],
        "prefix": "taskGreetPartner",
        "scope": "lua"
    },
    "setCameraPositionUnfixed": {
        "description": "setCameraPositionUnfixed",
        "body": [
            "setCameraPositionUnfixed(${0:float xAngle, float zAngle})"
        ],
        "prefix": "setCameraPositionUnfixed",
        "scope": "lua"
    },
    "getPcMouseMovement": {
        "description": "getPcMouseMovement",
        "body": [
            "getPcMouseMovement()"
        ],
        "prefix": "getPcMouseMovement",
        "scope": "lua"
    },
    "taskClimb": {
        "description": "taskClimb",
        "body": [
            "taskClimb(${0:Ped ped, bool climb})"
        ],
        "prefix": "taskClimb",
        "scope": "lua"
    },
    "removeVehicleMod": {
        "description": "removeVehicleMod",
        "body": [
            "removeVehicleMod(${0:Vehicle car, int componentId})"
        ],
        "prefix": "removeVehicleMod",
        "scope": "lua"
    },
    "taskSmartFleeChar": {
        "description": "taskSmartFleeChar",
        "body": [
            "taskSmartFleeChar(${0:Ped ped, Ped fromActor, float originRadius, int timelimit})"
        ],
        "prefix": "taskSmartFleeChar",
        "scope": "lua"
    },
    "setGroupFollowStatus": {
        "description": "setGroupFollowStatus",
        "body": [
            "setGroupFollowStatus(${0:int group, bool status})"
        ],
        "prefix": "setGroupFollowStatus",
        "scope": "lua"
    },
    "isCharStoppedInAngledAreaInCar3d": {
        "description": "isCharStoppedInAngledAreaInCar3d",
        "body": [
            "isCharStoppedInAngledAreaInCar3d(${0:Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag})"
        ],
        "prefix": "isCharStoppedInAngledAreaInCar3d",
        "scope": "lua"
    },
    "getDistanceBetweenCoords2d": {
        "description": "getDistanceBetweenCoords2d",
        "body": [
            "getDistanceBetweenCoords2d(${0:float x1, float y1, float x2, float y2})"
        ],
        "prefix": "getDistanceBetweenCoords2d",
        "scope": "lua"
    },
    "setOnscreenCounterFlashWhenFirstDisplayed": {
        "description": "setOnscreenCounterFlashWhenFirstDisplayed",
        "body": [
            "setOnscreenCounterFlashWhenFirstDisplayed(${0:VarId text, bool flashing})"
        ],
        "prefix": "setOnscreenCounterFlashWhenFirstDisplayed",
        "scope": "lua"
    },
    "isCharStoppedInAngledAreaOnFoot2d": {
        "description": "isCharStoppedInAngledAreaOnFoot2d",
        "body": [
            "isCharStoppedInAngledAreaOnFoot2d(${0:Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere})"
        ],
        "prefix": "isCharStoppedInAngledAreaOnFoot2d",
        "scope": "lua"
    },
    "setCharKeepTask": {
        "description": "setCharKeepTask",
        "body": [
            "setCharKeepTask(${0:Ped ped, bool keepTasks})"
        ],
        "prefix": "setCharKeepTask",
        "scope": "lua"
    },
    "locateCharOnFoot3d": {
        "description": "locateCharOnFoot3d",
        "body": [
            "locateCharOnFoot3d(${0:Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateCharOnFoot3d",
        "scope": "lua"
    },
    "hasLanguageChanged": {
        "description": "hasLanguageChanged",
        "body": [
            "hasLanguageChanged()"
        ],
        "prefix": "hasLanguageChanged",
        "scope": "lua"
    },
    "overrideNextRestart": {
        "description": "overrideNextRestart",
        "body": [
            "overrideNextRestart(${0:float atX, float atY, float atZ, float angle})"
        ],
        "prefix": "overrideNextRestart",
        "scope": "lua"
    },
    "hasCharSpottedCharInFront": {
        "description": "hasCharSpottedCharInFront",
        "body": [
            "hasCharSpottedCharInFront(${0:Ped ped, Ped ped2})"
        ],
        "prefix": "hasCharSpottedCharInFront",
        "scope": "lua"
    },
    "registerIntStat": {
        "description": "registerIntStat",
        "body": [
            "registerIntStat(${0:int stat, int int})"
        ],
        "prefix": "registerIntStat",
        "scope": "lua"
    },
    "customPlateForNextCar": {
        "description": "customPlateForNextCar",
        "body": [
            "customPlateForNextCar(${0:Model modelId, string numberplate})"
        ],
        "prefix": "customPlateForNextCar",
        "scope": "lua"
    },
    "restoreClothesState": {
        "description": "restoreClothesState",
        "body": [
            "restoreClothesState()"
        ],
        "prefix": "restoreClothesState",
        "scope": "lua"
    },
    "setCarCanGoAgainstTraffic": {
        "description": "setCarCanGoAgainstTraffic",
        "body": [
            "setCarCanGoAgainstTraffic(${0:Vehicle car, bool can})"
        ],
        "prefix": "setCarCanGoAgainstTraffic",
        "scope": "lua"
    },
    "taskEveryoneLeaveCar": {
        "description": "taskEveryoneLeaveCar",
        "body": [
            "taskEveryoneLeaveCar(${0:Vehicle car})"
        ],
        "prefix": "taskEveryoneLeaveCar",
        "scope": "lua"
    },
    "setDisableMilitaryZones": {
        "description": "setDisableMilitaryZones",
        "body": [
            "setDisableMilitaryZones(${0:bool disable})"
        ],
        "prefix": "setDisableMilitaryZones",
        "scope": "lua"
    },
    "isFlameInAngledArea3d": {
        "description": "isFlameInAngledArea3d",
        "body": [
            "isFlameInAngledArea3d(${0:float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere})"
        ],
        "prefix": "isFlameInAngledArea3d",
        "scope": "lua"
    },
    "unpausePlaybackRecordedCar": {
        "description": "unpausePlaybackRecordedCar",
        "body": [
            "unpausePlaybackRecordedCar(${0:Vehicle car})"
        ],
        "prefix": "unpausePlaybackRecordedCar",
        "scope": "lua"
    },
    "requestCarRecording": {
        "description": "requestCarRecording",
        "body": [
            "requestCarRecording(${0:int path})"
        ],
        "prefix": "requestCarRecording",
        "scope": "lua"
    },
    "setCarEscortCarRear": {
        "description": "setCarEscortCarRear",
        "body": [
            "setCarEscortCarRear(${0:Vehicle car, Vehicle followCar})"
        ],
        "prefix": "setCarEscortCarRear",
        "scope": "lua"
    },
    "activateSaveMenu": {
        "description": "activateSaveMenu",
        "body": [
            "activateSaveMenu()"
        ],
        "prefix": "activateSaveMenu",
        "scope": "lua"
    },
    "setFollowNodeThresholdDistance": {
        "description": "setFollowNodeThresholdDistance",
        "body": [
            "setFollowNodeThresholdDistance(${0:Ped ped, float dist})"
        ],
        "prefix": "setFollowNodeThresholdDistance",
        "scope": "lua"
    },
    "setObjectVelocity": {
        "description": "setObjectVelocity",
        "body": [
            "setObjectVelocity(${0:Object object, float velocityInDirectionX, float velocityInDirectionY, float velocityInDirectionZ})"
        ],
        "prefix": "setObjectVelocity",
        "scope": "lua"
    },
    "taskKillCharOnFootWhileDucking": {
        "description": "taskKillCharOnFootWhileDucking",
        "body": [
            "taskKillCharOnFootWhileDucking(${0:Ped ped, int weapon, int flags, int time, int chance})"
        ],
        "prefix": "taskKillCharOnFootWhileDucking",
        "scope": "lua"
    },
    "setPlaneThrottle": {
        "description": "setPlaneThrottle",
        "body": [
            "setPlaneThrottle(${0:int plane, float throttle})"
        ],
        "prefix": "setPlaneThrottle",
        "scope": "lua"
    },
    "isCharStoppedInArea3d": {
        "description": "isCharStoppedInArea3d",
        "body": [
            "isCharStoppedInArea3d(${0:Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere})"
        ],
        "prefix": "isCharStoppedInArea3d",
        "scope": "lua"
    },
    "setRailtrackResistanceMult": {
        "description": "setRailtrackResistanceMult",
        "body": [
            "setRailtrackResistanceMult(${0:float tracksFriction})"
        ],
        "prefix": "setRailtrackResistanceMult",
        "scope": "lua"
    },
    "setCarStatus": {
        "description": "setCarStatus",
        "body": [
            "setCarStatus(${0:Vehicle car, int action})"
        ],
        "prefix": "setCarStatus",
        "scope": "lua"
    },
    "listenToPlayerGroupCommands": {
        "description": "listenToPlayerGroupCommands",
        "body": [
            "listenToPlayerGroupCommands(${0:Ped ped, bool listen})"
        ],
        "prefix": "listenToPlayerGroupCommands",
        "scope": "lua"
    },
    "allowPauseInWidescreen": {
        "description": "allowPauseInWidescreen",
        "body": [
            "allowPauseInWidescreen(${0:bool enable})"
        ],
        "prefix": "allowPauseInWidescreen",
        "scope": "lua"
    },
    "getObjectVelocity": {
        "description": "getObjectVelocity",
        "body": [
            "getObjectVelocity(${0:Object object})"
        ],
        "prefix": "getObjectVelocity",
        "scope": "lua"
    },
    "taskPlayAnimSecondary": {
        "description": "taskPlayAnimSecondary",
        "body": [
            "taskPlayAnimSecondary(${0:Ped ped, string animation, string IFP, float framedelta, bool loopA, bool lockX, bool lockY, bool lockF, int time})"
        ],
        "prefix": "taskPlayAnimSecondary",
        "scope": "lua"
    },
    "getAvailableVehicleMod": {
        "description": "getAvailableVehicleMod",
        "body": [
            "getAvailableVehicleMod(${0:Vehicle car, int poolIndex})"
        ],
        "prefix": "getAvailableVehicleMod",
        "scope": "lua"
    },
    "createCharAtAttractor": {
        "description": "createCharAtAttractor",
        "body": [
            "createCharAtAttractor(${0:int pedtype, Model modelId, int ASOrigin, int task})"
        ],
        "prefix": "createCharAtAttractor",
        "scope": "lua"
    },
    "setNamedEntryExitFlag": {
        "description": "setNamedEntryExitFlag",
        "body": [
            "setNamedEntryExitFlag(${0:GxtString interior, int bitmask, bool flag})"
        ],
        "prefix": "setNamedEntryExitFlag",
        "scope": "lua"
    },
    "finishSettingUpConversationNoSubtitles": {
        "description": "finishSettingUpConversationNoSubtitles",
        "body": [
            "finishSettingUpConversationNoSubtitles()"
        ],
        "prefix": "finishSettingUpConversationNoSubtitles",
        "scope": "lua"
    },
    "attachCharToObject": {
        "description": "attachCharToObject",
        "body": [
            "attachCharToObject(${0:Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int orientation, float angle, int lockWeapon})"
        ],
        "prefix": "attachCharToObject",
        "scope": "lua"
    },
    "pointSearchlightAtCoord": {
        "description": "pointSearchlightAtCoord",
        "body": [
            "pointSearchlightAtCoord(${0:Searchlight searchlight, float toX, float toY, float toZ, float speed})"
        ],
        "prefix": "pointSearchlightAtCoord",
        "scope": "lua"
    },
    "setCharSuffersCriticalHits": {
        "description": "setCharSuffersCriticalHits",
        "body": [
            "setCharSuffersCriticalHits(${0:Ped ped, bool enable})"
        ],
        "prefix": "setCharSuffersCriticalHits",
        "scope": "lua"
    },
    "setCharRotation": {
        "description": "setCharRotation",
        "body": [
            "setCharRotation(${0:Ped ped, float vecX, float vecY, float vecZ})"
        ],
        "prefix": "setCharRotation",
        "scope": "lua"
    },
    "heliFollowEntity": {
        "description": "heliFollowEntity",
        "body": [
            "heliFollowEntity(${0:Vehicle heli, Ped ped, Vehicle car, float radius})"
        ],
        "prefix": "heliFollowEntity",
        "scope": "lua"
    },
    "memory.tostring": {
        "description": "memory.tostring",
        "body": [
            "memory.tostring(${0:uint address, [uint size], [bool unprotect=false]})"
        ],
        "prefix": "memory.tostring",
        "scope": "lua"
    },
    "taskEnterCarAsPassenger": {
        "description": "taskEnterCarAsPassenger",
        "body": [
            "taskEnterCarAsPassenger(${0:Ped ped, Vehicle car, int time, int passengerSeat})"
        ],
        "prefix": "taskEnterCarAsPassenger",
        "scope": "lua"
    },
    "hasPickupBeenCollected": {
        "description": "hasPickupBeenCollected",
        "body": [
            "hasPickupBeenCollected(${0:Pickup pickup})"
        ],
        "prefix": "hasPickupBeenCollected",
        "scope": "lua"
    },
    "setCharGetOutUpsideDownCar": {
        "description": "setCharGetOutUpsideDownCar",
        "body": [
            "setCharGetOutUpsideDownCar(${0:Ped ped, bool canGetOut})"
        ],
        "prefix": "setCharGetOutUpsideDownCar",
        "scope": "lua"
    },
    "setPlayerGroupToFollowNever": {
        "description": "setPlayerGroupToFollowNever",
        "body": [
            "setPlayerGroupToFollowNever(${0:Player player, bool neverFollow})"
        ],
        "prefix": "setPlayerGroupToFollowNever",
        "scope": "lua"
    },
    "taskKindaStayInSamePlace": {
        "description": "taskKindaStayInSamePlace",
        "body": [
            "taskKindaStayInSamePlace(${0:Ped ped, bool stay})"
        ],
        "prefix": "taskKindaStayInSamePlace",
        "scope": "lua"
    },
    "setCreateRandomCops": {
        "description": "setCreateRandomCops",
        "body": [
            "setCreateRandomCops(${0:bool enable})"
        ],
        "prefix": "setCreateRandomCops",
        "scope": "lua"
    },
    "disableHeliAudio": {
        "description": "disableHeliAudio",
        "body": [
            "disableHeliAudio(${0:Vehicle helicopter, bool disable})"
        ],
        "prefix": "disableHeliAudio",
        "scope": "lua"
    },
    "removeIpl": {
        "description": "removeIpl",
        "body": [
            "removeIpl(${0:string group})"
        ],
        "prefix": "removeIpl",
        "scope": "lua"
    },
    "isCopVehicleInArea3dNoSave": {
        "description": "isCopVehicleInArea3dNoSave",
        "body": [
            "isCopVehicleInArea3dNoSave(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "isCopVehicleInArea3dNoSave",
        "scope": "lua"
    },
    "isCharInSearchlight": {
        "description": "isCharInSearchlight",
        "body": [
            "isCharInSearchlight(${0:Searchlight searchlight, Ped ped})"
        ],
        "prefix": "isCharInSearchlight",
        "scope": "lua"
    },
    "setProgressTotal": {
        "description": "setProgressTotal",
        "body": [
            "setProgressTotal(${0:int maxProgress})"
        ],
        "prefix": "setProgressTotal",
        "scope": "lua"
    },
    "getOffsetFromObjectInWorldCoords": {
        "description": "getOffsetFromObjectInWorldCoords",
        "body": [
            "getOffsetFromObjectInWorldCoords(${0:Object object, float offsetX, float offsetY, float offsetZ})"
        ],
        "prefix": "getOffsetFromObjectInWorldCoords",
        "scope": "lua"
    },
    "unloadSpecialCharacter": {
        "description": "unloadSpecialCharacter",
        "body": [
            "unloadSpecialCharacter(${0:int id})"
        ],
        "prefix": "unloadSpecialCharacter",
        "scope": "lua"
    },
    "linkObjectToInterior": {
        "description": "linkObjectToInterior",
        "body": [
            "linkObjectToInterior(${0:Object object, int interior})"
        ],
        "prefix": "linkObjectToInterior",
        "scope": "lua"
    },
    "setCharOnlyDamagedByPlayer": {
        "description": "setCharOnlyDamagedByPlayer",
        "body": [
            "setCharOnlyDamagedByPlayer(${0:Ped ped, bool enabled})"
        ],
        "prefix": "setCharOnlyDamagedByPlayer",
        "scope": "lua"
    },
    "changeGarageType": {
        "description": "changeGarageType",
        "body": [
            "changeGarageType(${0:GxtString garage, int type})"
        ],
        "prefix": "changeGarageType",
        "scope": "lua"
    },
    "pauseScmThread": {
        "description": "pauseScmThread",
        "body": [
            "pauseScmThread(${0:uint thread})"
        ],
        "prefix": "pauseScmThread",
        "scope": "lua"
    },
    "dxutAddListbox": {
        "description": "dxutAddListbox",
        "body": [
            "dxutAddListbox(${0:DxutDialog dialog, int id, int posX, int posY, int sizeX, int sizeY})"
        ],
        "prefix": "dxutAddListbox",
        "scope": "lua"
    },
    "attachObjectToCar": {
        "description": "attachObjectToCar",
        "body": [
            "attachObjectToCar(${0:Object object, Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ})"
        ],
        "prefix": "attachObjectToCar",
        "scope": "lua"
    },
    "suppressCarModel": {
        "description": "suppressCarModel",
        "body": [
            "suppressCarModel(${0:Model modelId})"
        ],
        "prefix": "suppressCarModel",
        "scope": "lua"
    },
    "setExtraHospitalRestartPoint": {
        "description": "setExtraHospitalRestartPoint",
        "body": [
            "setExtraHospitalRestartPoint(${0:float X, float Y, float Z, float radius, float angle})"
        ],
        "prefix": "setExtraHospitalRestartPoint",
        "scope": "lua"
    },
    "locateCharInCarObject3d": {
        "description": "locateCharInCarObject3d",
        "body": [
            "locateCharInCarObject3d(${0:Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateCharInCarObject3d",
        "scope": "lua"
    },
    "getPositionOfEntryExitCharUsed": {
        "description": "getPositionOfEntryExitCharUsed",
        "body": [
            "getPositionOfEntryExitCharUsed(${0:Ped ped})"
        ],
        "prefix": "getPositionOfEntryExitCharUsed",
        "scope": "lua"
    },
    "taskDiveFromAttachmentAndGetUp": {
        "description": "taskDiveFromAttachmentAndGetUp",
        "body": [
            "taskDiveFromAttachmentAndGetUp(${0:Ped ped, int timeMS})"
        ],
        "prefix": "taskDiveFromAttachmentAndGetUp",
        "scope": "lua"
    },
    "setCarEngineBroken": {
        "description": "setCarEngineBroken",
        "body": [
            "setCarEngineBroken(${0:Vehicle car, bool broken})"
        ],
        "prefix": "setCarEngineBroken",
        "scope": "lua"
    },
    "setTextProportional": {
        "description": "setTextProportional",
        "body": [
            "setTextProportional(${0:bool proportional})"
        ],
        "prefix": "setTextProportional",
        "scope": "lua"
    },
    "getObjectSpeed": {
        "description": "getObjectSpeed",
        "body": [
            "getObjectSpeed(${0:Object object})"
        ],
        "prefix": "getObjectSpeed",
        "scope": "lua"
    },
    "playerMadeProgress": {
        "description": "playerMadeProgress",
        "body": [
            "playerMadeProgress(${0:int progress})"
        ],
        "prefix": "playerMadeProgress",
        "scope": "lua"
    },
    "setCharStayInCarWhenJacked": {
        "description": "setCharStayInCarWhenJacked",
        "body": [
            "setCharStayInCarWhenJacked(${0:Ped ped, bool stay})"
        ],
        "prefix": "setCharStayInCarWhenJacked",
        "scope": "lua"
    },
    "taskFleePoint": {
        "description": "taskFleePoint",
        "body": [
            "taskFleePoint(${0:Ped ped, float fromX, float fromY, float fromZ, float awayRadius, int timelimit})"
        ],
        "prefix": "taskFleePoint",
        "scope": "lua"
    },
    "dontRemoveChar": {
        "description": "dontRemoveChar",
        "body": [
            "dontRemoveChar(${0:Ped ped})"
        ],
        "prefix": "dontRemoveChar",
        "scope": "lua"
    },
    "addSetPiece": {
        "description": "addSetPiece",
        "body": [
            "addSetPiece(${0:int type, float rectX1, float rectY1, float rectX2, float rectY2, float spawnAX, float spawnAY, float headedTowards1X, float headedTowards1Y, float spawnBX, float spawnBY, float headedTowards2X, float headedTowards2Y})"
        ],
        "prefix": "addSetPiece",
        "scope": "lua"
    },
    "setJamesCarOnPathToPlayer": {
        "description": "setJamesCarOnPathToPlayer",
        "body": [
            "setJamesCarOnPathToPlayer(${0:int int1})"
        ],
        "prefix": "setJamesCarOnPathToPlayer",
        "scope": "lua"
    },
    "taskLeaveCarAndFlee": {
        "description": "taskLeaveCarAndFlee",
        "body": [
            "taskLeaveCarAndFlee(${0:Ped ped, Vehicle car, float X, float Y, float Z})"
        ],
        "prefix": "taskLeaveCarAndFlee",
        "scope": "lua"
    },
    "convertMetresToFeet": {
        "description": "convertMetresToFeet",
        "body": [
            "convertMetresToFeet(${0:float meters})"
        ],
        "prefix": "convertMetresToFeet",
        "scope": "lua"
    },
    "taskGoStraightToCoord": {
        "description": "taskGoStraightToCoord",
        "body": [
            "taskGoStraightToCoord(${0:Ped ped, float toX, float toY, float toZ, int mode, int time})"
        ],
        "prefix": "taskGoStraightToCoord",
        "scope": "lua"
    },
    "removePriceModifier": {
        "description": "removePriceModifier",
        "body": [
            "removePriceModifier(${0:int item})"
        ],
        "prefix": "removePriceModifier",
        "scope": "lua"
    },
    "attachCarToCar": {
        "description": "attachCarToCar",
        "body": [
            "attachCarToCar(${0:Vehicle car, int toCar, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ})"
        ],
        "prefix": "attachCarToCar",
        "scope": "lua"
    },
    "taskAimGunAtChar": {
        "description": "taskAimGunAtChar",
        "body": [
            "taskAimGunAtChar(${0:Ped ped, int aimAt, int timeMS})"
        ],
        "prefix": "taskAimGunAtChar",
        "scope": "lua"
    },
    "attachSearchlightToSearchlightObject": {
        "description": "attachSearchlightToSearchlightObject",
        "body": [
            "attachSearchlightToSearchlightObject(${0:Searchlight searchlight, int tower, int housing, int bulb, float offsetX, float offsetY, float offsetZ})"
        ],
        "prefix": "attachSearchlightToSearchlightObject",
        "scope": "lua"
    },
    "setHeliStabiliser": {
        "description": "setHeliStabiliser",
        "body": [
            "setHeliStabiliser(${0:Vehicle heli, bool limiter})"
        ],
        "prefix": "setHeliStabiliser",
        "scope": "lua"
    },
    "loadShop": {
        "description": "loadShop",
        "body": [
            "loadShop(${0:GxtString shopping})"
        ],
        "prefix": "loadShop",
        "scope": "lua"
    },
    "isPlayerPerformingStoppie": {
        "description": "isPlayerPerformingStoppie",
        "body": [
            "isPlayerPerformingStoppie(${0:Player player})"
        ],
        "prefix": "isPlayerPerformingStoppie",
        "scope": "lua"
    },
    "isVehicleTouchingObject": {
        "description": "isVehicleTouchingObject",
        "body": [
            "isVehicleTouchingObject(${0:Vehicle car, Object object})"
        ],
        "prefix": "isVehicleTouchingObject",
        "scope": "lua"
    },
    "setDarknessEffect": {
        "description": "setDarknessEffect",
        "body": [
            "setDarknessEffect(${0:bool enable, int value})"
        ],
        "prefix": "setDarknessEffect",
        "scope": "lua"
    },
    "dxutSetFocusOnControl": {
        "description": "dxutSetFocusOnControl",
        "body": [
            "dxutSetFocusOnControl(${0:DxutDialog dialog, int id})"
        ],
        "prefix": "dxutSetFocusOnControl",
        "scope": "lua"
    },
    "getRandomCarOfTypeInAngledAreaNoSave": {
        "description": "getRandomCarOfTypeInAngledAreaNoSave",
        "body": [
            "getRandomCarOfTypeInAngledAreaNoSave(${0:float x1, float y1, float x2, float y2, float angle, int int6})"
        ],
        "prefix": "getRandomCarOfTypeInAngledAreaNoSave",
        "scope": "lua"
    },
    "getPercentageTaggedInArea": {
        "description": "getPercentageTaggedInArea",
        "body": [
            "getPercentageTaggedInArea(${0:float x1, float y1, float x2, float y2})"
        ],
        "prefix": "getPercentageTaggedInArea",
        "scope": "lua"
    },
    "isPointObscuredByAMissionEntity": {
        "description": "isPointObscuredByAMissionEntity",
        "body": [
            "isPointObscuredByAMissionEntity(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "isPointObscuredByAMissionEntity",
        "scope": "lua"
    },
    "getNumOfModelsKilledByPlayer": {
        "description": "getNumOfModelsKilledByPlayer",
        "body": [
            "getNumOfModelsKilledByPlayer(${0:Player player, Model modelId})"
        ],
        "prefix": "getNumOfModelsKilledByPlayer",
        "scope": "lua"
    },
    "getPedType": {
        "description": "getPedType",
        "body": [
            "getPedType(${0:Ped ped})"
        ],
        "prefix": "getPedType",
        "scope": "lua"
    },
    "clearCharDecisionMakerEventResponse": {
        "description": "clearCharDecisionMakerEventResponse",
        "body": [
            "clearCharDecisionMakerEventResponse(${0:int maker, int event})"
        ],
        "prefix": "clearCharDecisionMakerEventResponse",
        "scope": "lua"
    },
    "getOffsetFromCarInWorldCoords": {
        "description": "getOffsetFromCarInWorldCoords",
        "body": [
            "getOffsetFromCarInWorldCoords(${0:Vehicle car, float offsetX, float offsetY, float offsetZ})"
        ],
        "prefix": "getOffsetFromCarInWorldCoords",
        "scope": "lua"
    },
    "locateCharInCar2d": {
        "description": "locateCharInCar2d",
        "body": [
            "locateCharInCar2d(${0:Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCharInCar2d",
        "scope": "lua"
    },
    "attachCharToBike": {
        "description": "attachCharToBike",
        "body": [
            "attachCharToBike(${0:Ped ped, Vehicle car, float offsetX, float offsetY, float offsetZ, int position, float shootingAngle1, float shootingAngle2, int weapon})"
        ],
        "prefix": "attachCharToBike",
        "scope": "lua"
    },
    "isCharInTaxi": {
        "description": "isCharInTaxi",
        "body": [
            "isCharInTaxi(${0:Ped ped})"
        ],
        "prefix": "isCharInTaxi",
        "scope": "lua"
    },
    "attachCameraToVehicleLookAtChar": {
        "description": "attachCameraToVehicleLookAtChar",
        "body": [
            "attachCameraToVehicleLookAtChar(${0:Vehicle car, float offsetX, float offsetY, float offsetZ, Ped ped, float tilt, int switchstyle})"
        ],
        "prefix": "attachCameraToVehicleLookAtChar",
        "scope": "lua"
    },
    "carGotoCoordinatesAccurate": {
        "description": "carGotoCoordinatesAccurate",
        "body": [
            "carGotoCoordinatesAccurate(${0:Vehicle car, float toX, float toY, float toZ})"
        ],
        "prefix": "carGotoCoordinatesAccurate",
        "scope": "lua"
    },
    "isPlayerInPositionForConversation": {
        "description": "isPlayerInPositionForConversation",
        "body": [
            "isPlayerInPositionForConversation(${0:Ped ped})"
        ],
        "prefix": "isPlayerInPositionForConversation",
        "scope": "lua"
    },
    "switchArrestPenalties": {
        "description": "switchArrestPenalties",
        "body": [
            "switchArrestPenalties(${0:bool lose})"
        ],
        "prefix": "switchArrestPenalties",
        "scope": "lua"
    },
    "createCheckpoint": {
        "description": "createCheckpoint",
        "body": [
            "createCheckpoint(${0:int type, float atX, float atY, float atZ, float pointX, float pointY, float pointZ, float radius})"
        ],
        "prefix": "createCheckpoint",
        "scope": "lua"
    },
    "setTextCentre": {
        "description": "setTextCentre",
        "body": [
            "setTextCentre(${0:bool centered})"
        ],
        "prefix": "setTextCentre",
        "scope": "lua"
    },
    "setMinigameInProgress": {
        "description": "setMinigameInProgress",
        "body": [
            "setMinigameInProgress(${0:bool enable})"
        ],
        "prefix": "setMinigameInProgress",
        "scope": "lua"
    },
    "buyItem": {
        "description": "buyItem",
        "body": [
            "buyItem(${0:int item})"
        ],
        "prefix": "buyItem",
        "scope": "lua"
    },
    "getScriptTaskStatus": {
        "description": "getScriptTaskStatus",
        "body": [
            "getScriptTaskStatus(${0:Ped ped, int task})"
        ],
        "prefix": "getScriptTaskStatus",
        "scope": "lua"
    },
    "addPedtypeAsAttractorUser": {
        "description": "addPedtypeAsAttractorUser",
        "body": [
            "addPedtypeAsAttractorUser(${0:int ASOrigin, int pedtype})"
        ],
        "prefix": "addPedtypeAsAttractorUser",
        "scope": "lua"
    },
    "setObjectProofs": {
        "description": "setObjectProofs",
        "body": [
            "setObjectProofs(${0:Object object, bool BP, bool FP, bool EP, bool CP, bool MP})"
        ],
        "prefix": "setObjectProofs",
        "scope": "lua"
    },
    "taskCharArrestChar": {
        "description": "taskCharArrestChar",
        "body": [
            "taskCharArrestChar(${0:Ped ped, int bustActor})"
        ],
        "prefix": "taskCharArrestChar",
        "scope": "lua"
    },
    "setCarStayInFastLane": {
        "description": "setCarStayInFastLane",
        "body": [
            "setCarStayInFastLane(${0:Vehicle car, bool flag})"
        ],
        "prefix": "setCarStayInFastLane",
        "scope": "lua"
    },
    "getZoneGangStrength": {
        "description": "getZoneGangStrength",
        "body": [
            "getZoneGangStrength(${0:GxtString zone, int gang})"
        ],
        "prefix": "getZoneGangStrength",
        "scope": "lua"
    },
    "resetVehicleCameraTweak": {
        "description": "resetVehicleCameraTweak",
        "body": [
            "resetVehicleCameraTweak()"
        ],
        "prefix": "resetVehicleCameraTweak",
        "scope": "lua"
    },
    "grabEntityOnWinch": {
        "description": "grabEntityOnWinch",
        "body": [
            "grabEntityOnWinch(${0:Vehicle heli})"
        ],
        "prefix": "grabEntityOnWinch",
        "scope": "lua"
    },
    "setFixedCameraPosition": {
        "description": "setFixedCameraPosition",
        "body": [
            "setFixedCameraPosition(${0:float positionX, float positionY, float positionZ, float rotationX, float rotationY, float rotationZ})"
        ],
        "prefix": "setFixedCameraPosition",
        "scope": "lua"
    },
    "setAnimGroupForChar": {
        "description": "setAnimGroupForChar",
        "body": [
            "setAnimGroupForChar(${0:Ped ped, string style})"
        ],
        "prefix": "setAnimGroupForChar",
        "scope": "lua"
    },
    "sampGetSampInfoPtr": {
        "description": "sampGetSampInfoPtr",
        "body": [
            "sampGetSampInfoPtr()"
        ],
        "prefix": "sampGetSampInfoPtr",
        "scope": "lua"
    },
    "getBeatProximity": {
        "description": "getBeatProximity",
        "body": [
            "getBeatProximity(${0:int track})"
        ],
        "prefix": "getBeatProximity",
        "scope": "lua"
    },
    "markObjectAsNoLongerNeeded": {
        "description": "markObjectAsNoLongerNeeded",
        "body": [
            "markObjectAsNoLongerNeeded(${0:Object object})"
        ],
        "prefix": "markObjectAsNoLongerNeeded",
        "scope": "lua"
    },
    "areMeasurementsInMetres": {
        "description": "areMeasurementsInMetres",
        "body": [
            "areMeasurementsInMetres()"
        ],
        "prefix": "areMeasurementsInMetres",
        "scope": "lua"
    },
    "giveNonPlayerCarNitro": {
        "description": "giveNonPlayerCarNitro",
        "body": [
            "giveNonPlayerCarNitro(${0:Vehicle car})"
        ],
        "prefix": "giveNonPlayerCarNitro",
        "scope": "lua"
    },
    "switchRandomTrains": {
        "description": "switchRandomTrains",
        "body": [
            "switchRandomTrains(${0:bool enable})"
        ],
        "prefix": "switchRandomTrains",
        "scope": "lua"
    },
    "sortOutObjectCollisionWithCar": {
        "description": "sortOutObjectCollisionWithCar",
        "body": [
            "sortOutObjectCollisionWithCar(${0:Object object, Vehicle car})"
        ],
        "prefix": "sortOutObjectCollisionWithCar",
        "scope": "lua"
    },
    "isClosestObjectOfTypeSmashedOrDamaged": {
        "description": "isClosestObjectOfTypeSmashedOrDamaged",
        "body": [
            "isClosestObjectOfTypeSmashedOrDamaged(${0:Model object, float atX, float atY, float atZ, float radius, bool smashed, bool damaged})"
        ],
        "prefix": "isClosestObjectOfTypeSmashedOrDamaged",
        "scope": "lua"
    },
    "attachObjectToObject": {
        "description": "attachObjectToObject",
        "body": [
            "attachObjectToObject(${0:Object object, int toObject, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ})"
        ],
        "prefix": "attachObjectToObject",
        "scope": "lua"
    },
    "dxutListboxInsertItem": {
        "description": "dxutListboxInsertItem",
        "body": [
            "dxutListboxInsertItem(${0:DxutDialog dialog, int id, zstring element, uint data, int after})"
        ],
        "prefix": "dxutListboxInsertItem",
        "scope": "lua"
    },
    "addBigGunFlash": {
        "description": "addBigGunFlash",
        "body": [
            "addBigGunFlash(${0:float fromX, float fromY, float fromZ, float toX, float toY, float toZ})"
        ],
        "prefix": "addBigGunFlash",
        "scope": "lua"
    },
    "sampStorePlayerPassengerData": {
        "description": "sampStorePlayerPassengerData",
        "body": [
            "sampStorePlayerPassengerData(${0:int id, uint dstBuffer})"
        ],
        "prefix": "sampStorePlayerPassengerData",
        "scope": "lua"
    },
    "removeTextureDictionary": {
        "description": "removeTextureDictionary",
        "body": [
            "removeTextureDictionary()"
        ],
        "prefix": "removeTextureDictionary",
        "scope": "lua"
    },
    "hasObjectBeenPhotographed": {
        "description": "hasObjectBeenPhotographed",
        "body": [
            "hasObjectBeenPhotographed(${0:Object object})"
        ],
        "prefix": "hasObjectBeenPhotographed",
        "scope": "lua"
    },
    "dontSuppressCarModel": {
        "description": "dontSuppressCarModel",
        "body": [
            "dontSuppressCarModel(${0:Model modelId})"
        ],
        "prefix": "dontSuppressCarModel",
        "scope": "lua"
    },
    "taskFleeCharAnyMeans": {
        "description": "taskFleeCharAnyMeans",
        "body": [
            "taskFleeCharAnyMeans(${0:Ped ped, int fleeFrom, float runDistance, int time, bool changeCourse, int unkTime1, int unkTime2, float awayRadius})"
        ],
        "prefix": "taskFleeCharAnyMeans",
        "scope": "lua"
    },
    "isGangWarGoingOn": {
        "description": "isGangWarGoingOn",
        "body": [
            "isGangWarGoingOn()"
        ],
        "prefix": "isGangWarGoingOn",
        "scope": "lua"
    },
    "loadPathNodesInArea": {
        "description": "loadPathNodesInArea",
        "body": [
            "loadPathNodesInArea(${0:float x1, float y1, float x2, float y2})"
        ],
        "prefix": "loadPathNodesInArea",
        "scope": "lua"
    },
    "isCharInAreaInCar2d": {
        "description": "isCharInAreaInCar2d",
        "body": [
            "isCharInAreaInCar2d(${0:Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
        ],
        "prefix": "isCharInAreaInCar2d",
        "scope": "lua"
    },
    "isCharTouchingVehicle": {
        "description": "isCharTouchingVehicle",
        "body": [
            "isCharTouchingVehicle(${0:Ped ped, Vehicle car})"
        ],
        "prefix": "isCharTouchingVehicle",
        "scope": "lua"
    },
    "setVehicleToFadeIn": {
        "description": "setVehicleToFadeIn",
        "body": [
            "setVehicleToFadeIn(${0:Vehicle car, int flag})"
        ],
        "prefix": "setVehicleToFadeIn",
        "scope": "lua"
    },
    "clearWantedLevelInGarage": {
        "description": "clearWantedLevelInGarage",
        "body": [
            "clearWantedLevelInGarage()"
        ],
        "prefix": "clearWantedLevelInGarage",
        "scope": "lua"
    },
    "doesBlipExist": {
        "description": "doesBlipExist",
        "body": [
            "doesBlipExist(${0:Marker marker})"
        ],
        "prefix": "doesBlipExist",
        "scope": "lua"
    },
    "removeCharFromCarMaintainPosition": {
        "description": "removeCharFromCarMaintainPosition",
        "body": [
            "removeCharFromCarMaintainPosition(${0:Ped ped, Vehicle car})"
        ],
        "prefix": "removeCharFromCarMaintainPosition",
        "scope": "lua"
    },
    "clearObjectPath": {
        "description": "clearObjectPath",
        "body": [
            "clearObjectPath(${0:int int1})"
        ],
        "prefix": "clearObjectPath",
        "scope": "lua"
    },
    "printWith2NumbersBig": {
        "description": "printWith2NumbersBig",
        "body": [
            "printWith2NumbersBig(${0:GxtString gxtString, int numbers1, int numbers2, int time, int style})"
        ],
        "prefix": "printWith2NumbersBig",
        "scope": "lua"
    },
    "setPlayerWeaponsScrollable": {
        "description": "setPlayerWeaponsScrollable",
        "body": [
            "setPlayerWeaponsScrollable(${0:Player player, bool scrollable})"
        ],
        "prefix": "setPlayerWeaponsScrollable",
        "scope": "lua"
    },
    "setMenuColumnOrientation": {
        "description": "setMenuColumnOrientation",
        "body": [
            "setMenuColumnOrientation(${0:int menu, int column, int alignment})"
        ],
        "prefix": "setMenuColumnOrientation",
        "scope": "lua"
    },
    "getRandomCharInSphereOnlyDrugsBuyers": {
        "description": "getRandomCharInSphereOnlyDrugsBuyers",
        "body": [
            "getRandomCharInSphereOnlyDrugsBuyers(${0:float X, float Y, float Z, float radius})"
        ],
        "prefix": "getRandomCharInSphereOnlyDrugsBuyers",
        "scope": "lua"
    },
    "setMenuColumn": {
        "description": "setMenuColumn",
        "body": [
            "setMenuColumn(${0:int menu, int column, GxtString header, GxtString data1, GxtString data2, GxtString data3, GxtString data4, GxtString data5, GxtString data6, GxtString data7, GxtString data8, GxtString data9, GxtString data10, GxtString data11, GxtString data12})"
        ],
        "prefix": "setMenuColumn",
        "scope": "lua"
    },
    "attachCameraToChar": {
        "description": "attachCameraToChar",
        "body": [
            "attachCameraToChar(${0:Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, float tilt, int switchstyle})"
        ],
        "prefix": "attachCameraToChar",
        "scope": "lua"
    },
    "setCarHeavy": {
        "description": "setCarHeavy",
        "body": [
            "setCarHeavy(${0:Vehicle car, bool heavy})"
        ],
        "prefix": "setCarHeavy",
        "scope": "lua"
    },
    "getSequenceProgressRecursive": {
        "description": "getSequenceProgressRecursive",
        "body": [
            "getSequenceProgressRecursive(${0:Ped ped})"
        ],
        "prefix": "getSequenceProgressRecursive",
        "scope": "lua"
    },
    "openSequenceTask": {
        "description": "openSequenceTask",
        "body": [
            "openSequenceTask()"
        ],
        "prefix": "openSequenceTask",
        "scope": "lua"
    },
    "hasGameJustReturnedFromFrontend": {
        "description": "hasGameJustReturnedFromFrontend",
        "body": [
            "hasGameJustReturnedFromFrontend()"
        ],
        "prefix": "hasGameJustReturnedFromFrontend",
        "scope": "lua"
    },
    "memory.getuint16": {
        "description": "memory.getuint16",
        "body": [
            "memory.getuint16(${0:uint address, [bool unprotect=false]})"
        ],
        "prefix": "memory.getuint16",
        "scope": "lua"
    },
    "reportMissionAudioEventAtPosition": {
        "description": "reportMissionAudioEventAtPosition",
        "body": [
            "reportMissionAudioEventAtPosition(${0:float atX, float atY, float atZ, int event})"
        ],
        "prefix": "reportMissionAudioEventAtPosition",
        "scope": "lua"
    },
    "registerHighestScore": {
        "description": "registerHighestScore",
        "body": [
            "registerHighestScore(${0:int int1, int int2})"
        ],
        "prefix": "registerHighestScore",
        "scope": "lua"
    },
    "setCharMoney": {
        "description": "setCharMoney",
        "body": [
            "setCharMoney(${0:Ped ped, int money})"
        ],
        "prefix": "setCharMoney",
        "scope": "lua"
    },
    "clearLoadedShop": {
        "description": "clearLoadedShop",
        "body": [
            "clearLoadedShop()"
        ],
        "prefix": "clearLoadedShop",
        "scope": "lua"
    },
    "setCharMaxHealth": {
        "description": "setCharMaxHealth",
        "body": [
            "setCharMaxHealth(${0:Ped ped, int health})"
        ],
        "prefix": "setCharMaxHealth",
        "scope": "lua"
    },
    "getRandomCopInArea": {
        "description": "getRandomCopInArea",
        "body": [
            "getRandomCopInArea(${0:float float1, float float2, float float3, float float4, bool int5, bool int6, bool int7, bool int8, bool int9})"
        ],
        "prefix": "getRandomCopInArea",
        "scope": "lua"
    },
    "taskDuck": {
        "description": "taskDuck",
        "body": [
            "taskDuck(${0:Ped ped, int timeMS})"
        ],
        "prefix": "taskDuck",
        "scope": "lua"
    },
    "turnCarToFaceCoord": {
        "description": "turnCarToFaceCoord",
        "body": [
            "turnCarToFaceCoord(${0:Vehicle car, float coordX, float coordY})"
        ],
        "prefix": "turnCarToFaceCoord",
        "scope": "lua"
    },
    "detachCar": {
        "description": "detachCar",
        "body": [
            "detachCar(${0:Vehicle car, float X, float Y, float Z, bool collisionDetection})"
        ],
        "prefix": "detachCar",
        "scope": "lua"
    },
    "attachMissionAudioToCar": {
        "description": "attachMissionAudioToCar",
        "body": [
            "attachMissionAudioToCar(${0:int audioId, Vehicle car})"
        ],
        "prefix": "attachMissionAudioToCar",
        "scope": "lua"
    },
    "printWith6Numbers": {
        "description": "printWith6Numbers",
        "body": [
            "printWith6Numbers(${0:GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int numbers5, int numbers6, int time, int flag})"
        ],
        "prefix": "printWith6Numbers",
        "scope": "lua"
    },
    "dxutSetDialogBackgroundColor": {
        "description": "dxutSetDialogBackgroundColor",
        "body": [
            "dxutSetDialogBackgroundColor(${0:DxutDialog dialog, uint color})"
        ],
        "prefix": "dxutSetDialogBackgroundColor",
        "scope": "lua"
    },
    "taskSwimToCoord": {
        "description": "taskSwimToCoord",
        "body": [
            "taskSwimToCoord(${0:Ped ped, float toX, float toY, float toZ})"
        ],
        "prefix": "taskSwimToCoord",
        "scope": "lua"
    },
    "locateCharInCarCar2d": {
        "description": "locateCharInCarCar2d",
        "body": [
            "locateCharInCarCar2d(${0:Ped ped, Vehicle car, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCharInCarCar2d",
        "scope": "lua"
    },
    "switchSecurityCamera": {
        "description": "switchSecurityCamera",
        "body": [
            "switchSecurityCamera(${0:bool int1})"
        ],
        "prefix": "switchSecurityCamera",
        "scope": "lua"
    },
    "selectWeaponsForVehicle": {
        "description": "selectWeaponsForVehicle",
        "body": [
            "selectWeaponsForVehicle(${0:Vehicle car, bool gun})"
        ],
        "prefix": "selectWeaponsForVehicle",
        "scope": "lua"
    },
    "taskGoToCoordWhileAiming": {
        "description": "taskGoToCoordWhileAiming",
        "body": [
            "taskGoToCoordWhileAiming(${0:Ped ped, float toX, float toY, float toZ, int mode, float turnRadius, float stopRadius, Ped ped, float offsetX, float offsetY, float offsetZ})"
        ],
        "prefix": "taskGoToCoordWhileAiming",
        "scope": "lua"
    },
    "loadScene": {
        "description": "loadScene",
        "body": [
            "loadScene(${0:float atX, float atY, float atZ})"
        ],
        "prefix": "loadScene",
        "scope": "lua"
    },
    "cameraSetVectorTrack": {
        "description": "cameraSetVectorTrack",
        "body": [
            "cameraSetVectorTrack(${0:float pointX, float pointY, float pointZ, float transverseX, float transverseY, float transverseZ, int time, bool smooth})"
        ],
        "prefix": "cameraSetVectorTrack",
        "scope": "lua"
    },
    "isCarVisiblyDamaged": {
        "description": "isCarVisiblyDamaged",
        "body": [
            "isCarVisiblyDamaged(${0:Vehicle car})"
        ],
        "prefix": "isCarVisiblyDamaged",
        "scope": "lua"
    },
    "flushRoute": {
        "description": "flushRoute",
        "body": [
            "flushRoute()"
        ],
        "prefix": "flushRoute",
        "scope": "lua"
    },
    "isCarLowRider": {
        "description": "isCarLowRider",
        "body": [
            "isCarLowRider(${0:Vehicle car})"
        ],
        "prefix": "isCarLowRider",
        "scope": "lua"
    },
    "printHelpForeverWithNumber": {
        "description": "printHelpForeverWithNumber",
        "body": [
            "printHelpForeverWithNumber(${0:GxtString text, int number})"
        ],
        "prefix": "printHelpForeverWithNumber",
        "scope": "lua"
    },
    "pointSearchlightAtChar": {
        "description": "pointSearchlightAtChar",
        "body": [
            "pointSearchlightAtChar(${0:Searchlight searchlight, Ped ped, float speed})"
        ],
        "prefix": "pointSearchlightAtChar",
        "scope": "lua"
    },
    "setCarEngineOn": {
        "description": "setCarEngineOn",
        "body": [
            "setCarEngineOn(${0:Vehicle car, bool on})"
        ],
        "prefix": "setCarEngineOn",
        "scope": "lua"
    },
    "clearAllScriptFireFlags": {
        "description": "clearAllScriptFireFlags",
        "body": [
            "clearAllScriptFireFlags()"
        ],
        "prefix": "clearAllScriptFireFlags",
        "scope": "lua"
    },
    "setCutsceneAnim": {
        "description": "setCutsceneAnim",
        "body": [
            "setCutsceneAnim(${0:int cutscene, GxtString anim})"
        ],
        "prefix": "setCutsceneAnim",
        "scope": "lua"
    },
    "createFxSystem": {
        "description": "createFxSystem",
        "body": [
            "createFxSystem(${0:string particle, float pX, float pY, float pZ, int type})"
        ],
        "prefix": "createFxSystem",
        "scope": "lua"
    },
    "setEnableRcDetonateOnContact": {
        "description": "setEnableRcDetonateOnContact",
        "body": [
            "setEnableRcDetonateOnContact(${0:bool enable})"
        ],
        "prefix": "setEnableRcDetonateOnContact",
        "scope": "lua"
    },
    "setCinemaCamera": {
        "description": "setCinemaCamera",
        "body": [
            "setCinemaCamera(${0:bool lock})"
        ],
        "prefix": "setCinemaCamera",
        "scope": "lua"
    },
    "isCharInAngledArea2d": {
        "description": "isCharInAngledArea2d",
        "body": [
            "isCharInAngledArea2d(${0:Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere})"
        ],
        "prefix": "isCharInAngledArea2d",
        "scope": "lua"
    },
    "locateCharAnyMeans3d": {
        "description": "locateCharAnyMeans3d",
        "body": [
            "locateCharAnyMeans3d(${0:Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateCharAnyMeans3d",
        "scope": "lua"
    },
    "taskHandGesture": {
        "description": "taskHandGesture",
        "body": [
            "taskHandGesture(${0:Ped ped, Ped ped2})"
        ],
        "prefix": "taskHandGesture",
        "scope": "lua"
    },
    "explodeCarInCutscene": {
        "description": "explodeCarInCutscene",
        "body": [
            "explodeCarInCutscene(${0:Vehicle car})"
        ],
        "prefix": "explodeCarInCutscene",
        "scope": "lua"
    },
    "loadTextureDictionary": {
        "description": "loadTextureDictionary",
        "body": [
            "loadTextureDictionary(${0:zstring txd})"
        ],
        "prefix": "loadTextureDictionary",
        "scope": "lua"
    },
    "isCharDucking": {
        "description": "isCharDucking",
        "body": [
            "isCharDucking(${0:Ped ped})"
        ],
        "prefix": "isCharDucking",
        "scope": "lua"
    },
    "areSubtitlesSwitchedOn": {
        "description": "areSubtitlesSwitchedOn",
        "body": [
            "areSubtitlesSwitchedOn()"
        ],
        "prefix": "areSubtitlesSwitchedOn",
        "scope": "lua"
    },
    "loadSplashScreen": {
        "description": "loadSplashScreen",
        "body": [
            "loadSplashScreen(${0:GxtString gxtString})"
        ],
        "prefix": "loadSplashScreen",
        "scope": "lua"
    },
    "setPlayerGroupToFollowAlways": {
        "description": "setPlayerGroupToFollowAlways",
        "body": [
            "setPlayerGroupToFollowAlways(${0:Player player, bool followAlways})"
        ],
        "prefix": "setPlayerGroupToFollowAlways",
        "scope": "lua"
    },
    "isCharStoppedInAngledArea3d": {
        "description": "isCharStoppedInAngledArea3d",
        "body": [
            "isCharStoppedInAngledArea3d(${0:Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag})"
        ],
        "prefix": "isCharStoppedInAngledArea3d",
        "scope": "lua"
    },
    "dxutGetControlPos": {
        "description": "dxutGetControlPos",
        "body": [
            "dxutGetControlPos(${0:DxutDialog dialog, int id})"
        ],
        "prefix": "dxutGetControlPos",
        "scope": "lua"
    },
    "setPlayersCanBeInSeparateCars": {
        "description": "setPlayersCanBeInSeparateCars",
        "body": [
            "setPlayersCanBeInSeparateCars(${0:bool allow})"
        ],
        "prefix": "setPlayersCanBeInSeparateCars",
        "scope": "lua"
    },
    "isCarUpsidedown": {
        "description": "isCarUpsidedown",
        "body": [
            "isCarUpsidedown(${0:Vehicle car})"
        ],
        "prefix": "isCarUpsidedown",
        "scope": "lua"
    },
    "dxutControlIsVisible": {
        "description": "dxutControlIsVisible",
        "body": [
            "dxutControlIsVisible(${0:DxutDialog dialog, int id})"
        ],
        "prefix": "dxutControlIsVisible",
        "scope": "lua"
    },
    "attachObjectToChar": {
        "description": "attachObjectToChar",
        "body": [
            "attachObjectToChar(${0:Object object, Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ})"
        ],
        "prefix": "attachObjectToChar",
        "scope": "lua"
    },
    "resetHavocCausedByPlayer": {
        "description": "resetHavocCausedByPlayer",
        "body": [
            "resetHavocCausedByPlayer(${0:int int1})"
        ],
        "prefix": "resetHavocCausedByPlayer",
        "scope": "lua"
    },
    "getActiveCameraPointAt": {
        "description": "getActiveCameraPointAt",
        "body": [
            "getActiveCameraPointAt()"
        ],
        "prefix": "getActiveCameraPointAt",
        "scope": "lua"
    },
    "setGangWarsActive": {
        "description": "setGangWarsActive",
        "body": [
            "setGangWarsActive(${0:bool enable})"
        ],
        "prefix": "setGangWarsActive",
        "scope": "lua"
    },
    "taskFollowPointRoute": {
        "description": "taskFollowPointRoute",
        "body": [
            "taskFollowPointRoute(${0:Ped ped, int flags1, int flags2})"
        ],
        "prefix": "taskFollowPointRoute",
        "scope": "lua"
    },
    "startScriptFire": {
        "description": "startScriptFire",
        "body": [
            "startScriptFire(${0:float atX, float atY, float atZ, int propagation, int size})"
        ],
        "prefix": "startScriptFire",
        "scope": "lua"
    },
    "connectLods": {
        "description": "connectLods",
        "body": [
            "connectLods(${0:Object object, int lod})"
        ],
        "prefix": "connectLods",
        "scope": "lua"
    },
    "dxutSetDialogMinimized": {
        "description": "dxutSetDialogMinimized",
        "body": [
            "dxutSetDialogMinimized(${0:DxutDialog dialog, bool minimized})"
        ],
        "prefix": "dxutSetDialogMinimized",
        "scope": "lua"
    },
    "isCharInAngledAreaInCar2d": {
        "description": "isCharInAngledAreaInCar2d",
        "body": [
            "isCharInAngledAreaInCar2d(${0:Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere})"
        ],
        "prefix": "isCharInAngledAreaInCar2d",
        "scope": "lua"
    },
    "isPlayerTargettingAnything": {
        "description": "isPlayerTargettingAnything",
        "body": [
            "isPlayerTargettingAnything(${0:Player player})"
        ],
        "prefix": "isPlayerTargettingAnything",
        "scope": "lua"
    },
    "hasObjectOfTypeBeenSmashed": {
        "description": "hasObjectOfTypeBeenSmashed",
        "body": [
            "hasObjectOfTypeBeenSmashed(${0:float X, float Y, float Z, float radius, Model modelId})"
        ],
        "prefix": "hasObjectOfTypeBeenSmashed",
        "scope": "lua"
    },
    "setObjectCoordinatesAndVelocity": {
        "description": "setObjectCoordinatesAndVelocity",
        "body": [
            "setObjectCoordinatesAndVelocity(${0:Object object, float X, float Y, float Z})"
        ],
        "prefix": "setObjectCoordinatesAndVelocity",
        "scope": "lua"
    },
    "setCarRotationVelocity": {
        "description": "setCarRotationVelocity",
        "body": [
            "setCarRotationVelocity(${0:Vehicle car, float vecX, float vecY, float vecZ})"
        ],
        "prefix": "setCarRotationVelocity",
        "scope": "lua"
    },
    "taskSay": {
        "description": "taskSay",
        "body": [
            "taskSay(${0:Ped ped, int audio})"
        ],
        "prefix": "taskSay",
        "scope": "lua"
    },
    "cameraPersistTrack": {
        "description": "cameraPersistTrack",
        "body": [
            "cameraPersistTrack(${0:bool lock})"
        ],
        "prefix": "cameraPersistTrack",
        "scope": "lua"
    },
    "getWheelieStats": {
        "description": "getWheelieStats",
        "body": [
            "getWheelieStats(${0:Player player})"
        ],
        "prefix": "getWheelieStats",
        "scope": "lua"
    },
    "addSmokeParticle": {
        "description": "addSmokeParticle",
        "body": [
            "addSmokeParticle(${0:float atX, float atY, float atZ, float velocityX, float velocityY, float velocityZ, int r, int g, int b, int a, float size, float factor})"
        ],
        "prefix": "addSmokeParticle",
        "scope": "lua"
    },
    "setPlayerDisplayVitalStatsButton": {
        "description": "setPlayerDisplayVitalStatsButton",
        "body": [
            "setPlayerDisplayVitalStatsButton(${0:Player player, bool display})"
        ],
        "prefix": "setPlayerDisplayVitalStatsButton",
        "scope": "lua"
    },
    "switchEntryExit": {
        "description": "switchEntryExit",
        "body": [
            "switchEntryExit(${0:GxtString interior, bool access})"
        ],
        "prefix": "switchEntryExit",
        "scope": "lua"
    },
    "drawCrosshair": {
        "description": "drawCrosshair",
        "body": [
            "drawCrosshair(${0:bool draw})"
        ],
        "prefix": "drawCrosshair",
        "scope": "lua"
    },
    "lua_thread.create_suspended": {
        "description": "lua_thread.create_suspended",
        "body": [
            "lua_thread.create_suspended(${0:function func})"
        ],
        "prefix": "lua_thread.create_suspended",
        "scope": "lua"
    },
    "createCutsceneObject": {
        "description": "createCutsceneObject",
        "body": [
            "createCutsceneObject(${0:Model modelId})"
        ],
        "prefix": "createCutsceneObject",
        "scope": "lua"
    },
    "highlightMenuItem": {
        "description": "highlightMenuItem",
        "body": [
            "highlightMenuItem(${0:int panel, int row, bool highlight})"
        ],
        "prefix": "highlightMenuItem",
        "scope": "lua"
    },
    "hasTrainDerailed": {
        "description": "hasTrainDerailed",
        "body": [
            "hasTrainDerailed(${0:Vehicle train})"
        ],
        "prefix": "hasTrainDerailed",
        "scope": "lua"
    },
    "releaseTwoPlayerDistance": {
        "description": "releaseTwoPlayerDistance",
        "body": [
            "releaseTwoPlayerDistance()"
        ],
        "prefix": "releaseTwoPlayerDistance",
        "scope": "lua"
    },
    "markStreamedScriptAsNoLongerNeeded": {
        "description": "markStreamedScriptAsNoLongerNeeded",
        "body": [
            "markStreamedScriptAsNoLongerNeeded(${0:int externalScript})"
        ],
        "prefix": "markStreamedScriptAsNoLongerNeeded",
        "scope": "lua"
    },
    "isCharStoppedInAreaOnFoot2d": {
        "description": "isCharStoppedInAreaOnFoot2d",
        "body": [
            "isCharStoppedInAreaOnFoot2d(${0:Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
        ],
        "prefix": "isCharStoppedInAreaOnFoot2d",
        "scope": "lua"
    },
    "raknetDeleteBitStream": {
        "description": "raknetDeleteBitStream",
        "body": [
            "raknetDeleteBitStream(${0:Bitstream bs})"
        ],
        "prefix": "raknetDeleteBitStream",
        "scope": "lua"
    },
    "taskLeaveCar": {
        "description": "taskLeaveCar",
        "body": [
            "taskLeaveCar(${0:Ped ped, Vehicle car})"
        ],
        "prefix": "taskLeaveCar",
        "scope": "lua"
    },
    "planeFollowEntity": {
        "description": "planeFollowEntity",
        "body": [
            "planeFollowEntity(${0:int plane, Ped ped, Vehicle car, float radius})"
        ],
        "prefix": "planeFollowEntity",
        "scope": "lua"
    },
    "controlCarHydraulics": {
        "description": "controlCarHydraulics",
        "body": [
            "controlCarHydraulics(${0:Vehicle car, float f1, float f2, float f3, float f4})"
        ],
        "prefix": "controlCarHydraulics",
        "scope": "lua"
    },
    "taskToggleDuck": {
        "description": "taskToggleDuck",
        "body": [
            "taskToggleDuck(${0:Ped ped, bool crouch})"
        ],
        "prefix": "taskToggleDuck",
        "scope": "lua"
    },
    "drawShadow": {
        "description": "drawShadow",
        "body": [
            "drawShadow(${0:Particle particle, float atX, float atY, float atZ, float rotationFactor, float size, int intensity, int flags1, int flags2, int flags3})"
        ],
        "prefix": "drawShadow",
        "scope": "lua"
    },
    "setUpsidedownCarNotDamaged": {
        "description": "setUpsidedownCarNotDamaged",
        "body": [
            "setUpsidedownCarNotDamaged(${0:Vehicle car, bool disableFlippedExplosion})"
        ],
        "prefix": "setUpsidedownCarNotDamaged",
        "scope": "lua"
    },
    "setCharInterior": {
        "description": "setCharInterior",
        "body": [
            "setCharInterior(${0:Ped ped, int interior})"
        ],
        "prefix": "setCharInterior",
        "scope": "lua"
    },
    "setForceRandomCarModel": {
        "description": "setForceRandomCarModel",
        "body": [
            "setForceRandomCarModel(${0:Model modelId})"
        ],
        "prefix": "setForceRandomCarModel",
        "scope": "lua"
    },
    "setAircraftCarrierSamSite": {
        "description": "setAircraftCarrierSamSite",
        "body": [
            "setAircraftCarrierSamSite(${0:bool enable})"
        ],
        "prefix": "setAircraftCarrierSamSite",
        "scope": "lua"
    },
    "isAttachedPlayerHeadingAchieved": {
        "description": "isAttachedPlayerHeadingAchieved",
        "body": [
            "isAttachedPlayerHeadingAchieved(${0:Player player})"
        ],
        "prefix": "isAttachedPlayerHeadingAchieved",
        "scope": "lua"
    },
    "setCarCoordinatesNoOffset": {
        "description": "setCarCoordinatesNoOffset",
        "body": [
            "setCarCoordinatesNoOffset(${0:Vehicle car, float X, float Y, float Z})"
        ],
        "prefix": "setCarCoordinatesNoOffset",
        "scope": "lua"
    },
    "markMissionTrainsAsNoLongerNeeded": {
        "description": "markMissionTrainsAsNoLongerNeeded",
        "body": [
            "markMissionTrainsAsNoLongerNeeded()"
        ],
        "prefix": "markMissionTrainsAsNoLongerNeeded",
        "scope": "lua"
    },
    "freezeCharPositionAndDontLoadCollision": {
        "description": "freezeCharPositionAndDontLoadCollision",
        "body": [
            "freezeCharPositionAndDontLoadCollision(${0:Ped ped, bool keep})"
        ],
        "prefix": "freezeCharPositionAndDontLoadCollision",
        "scope": "lua"
    },
    "displayTextWithNumber": {
        "description": "displayTextWithNumber",
        "body": [
            "displayTextWithNumber(${0:float x, float y, GxtString gxtString, int number})"
        ],
        "prefix": "displayTextWithNumber",
        "scope": "lua"
    },
    "detachCharFromCar": {
        "description": "detachCharFromCar",
        "body": [
            "detachCharFromCar(${0:Ped ped})"
        ],
        "prefix": "detachCharFromCar",
        "scope": "lua"
    },
    "attachCameraToVehicle": {
        "description": "attachCameraToVehicle",
        "body": [
            "attachCameraToVehicle(${0:Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, float tilt, int switchstyle})"
        ],
        "prefix": "attachCameraToVehicle",
        "scope": "lua"
    },
    "increasePlayerMaxArmour": {
        "description": "increasePlayerMaxArmour",
        "body": [
            "increasePlayerMaxArmour(${0:Player player, int increase})"
        ],
        "prefix": "increasePlayerMaxArmour",
        "scope": "lua"
    },
    "isConversationAtNode": {
        "description": "isConversationAtNode",
        "body": [
            "isConversationAtNode(${0:Ped ped, GxtString gxtString})"
        ],
        "prefix": "isConversationAtNode",
        "scope": "lua"
    },
    "setCutsceneOffset": {
        "description": "setCutsceneOffset",
        "body": [
            "setCutsceneOffset(${0:float posX, float posY, float posZ})"
        ],
        "prefix": "setCutsceneOffset",
        "scope": "lua"
    },
    "memory.setint32": {
        "description": "memory.setint32",
        "body": [
            "memory.setint32(${0:uint address, int dword, [bool unprotect=false]})"
        ],
        "prefix": "memory.setint32",
        "scope": "lua"
    },
    "getCurrentPopulationZoneType": {
        "description": "getCurrentPopulationZoneType",
        "body": [
            "getCurrentPopulationZoneType()"
        ],
        "prefix": "getCurrentPopulationZoneType",
        "scope": "lua"
    },
    "setTextRightJustify": {
        "description": "setTextRightJustify",
        "body": [
            "setTextRightJustify(${0:bool alignRight})"
        ],
        "prefix": "setTextRightJustify",
        "scope": "lua"
    },
    "drawSphere": {
        "description": "drawSphere",
        "body": [
            "drawSphere(${0:float atX, float atY, float atZ, float radius})"
        ],
        "prefix": "drawSphere",
        "scope": "lua"
    },
    "moveSearchlightBetweenCoords": {
        "description": "moveSearchlightBetweenCoords",
        "body": [
            "moveSearchlightBetweenCoords(${0:Searchlight searchlight, float fromX, float fromY, float fromZ, float toX, float toY, float toZ, float speed})"
        ],
        "prefix": "moveSearchlightBetweenCoords",
        "scope": "lua"
    },
    "failCurrentMission": {
        "description": "failCurrentMission",
        "body": [
            "failCurrentMission()"
        ],
        "prefix": "failCurrentMission",
        "scope": "lua"
    },
    "isCharTouchingChar": {
        "description": "isCharTouchingChar",
        "body": [
            "isCharTouchingChar(${0:Ped ped, Ped ped2})"
        ],
        "prefix": "isCharTouchingChar",
        "scope": "lua"
    },
    "taskTired": {
        "description": "taskTired",
        "body": [
            "taskTired(${0:Ped ped, int timeMS})"
        ],
        "prefix": "taskTired",
        "scope": "lua"
    },
    "createMenu": {
        "description": "createMenu",
        "body": [
            "createMenu(${0:GxtString title, float posX, float posY, float width, int columns, bool interactive, bool background, int alignment})"
        ],
        "prefix": "createMenu",
        "scope": "lua"
    },
    "setGroupDefaultTaskAllocator": {
        "description": "setGroupDefaultTaskAllocator",
        "body": [
            "setGroupDefaultTaskAllocator(${0:int group, int command})"
        ],
        "prefix": "setGroupDefaultTaskAllocator",
        "scope": "lua"
    },
    "freezeCarPositionAndDontLoadCollision": {
        "description": "freezeCarPositionAndDontLoadCollision",
        "body": [
            "freezeCarPositionAndDontLoadCollision(${0:Vehicle car, bool keep})"
        ],
        "prefix": "freezeCarPositionAndDontLoadCollision",
        "scope": "lua"
    },
    "memory.getint8": {
        "description": "memory.getint8",
        "body": [
            "memory.getint8(${0:uint address, [bool unprotect=false]})"
        ],
        "prefix": "memory.getint8",
        "scope": "lua"
    },
    "removeDecisionMaker": {
        "description": "removeDecisionMaker",
        "body": [
            "removeDecisionMaker(${0:int maker})"
        ],
        "prefix": "removeDecisionMaker",
        "scope": "lua"
    },
    "drawOddjobTitleBeforeFade": {
        "description": "drawOddjobTitleBeforeFade",
        "body": [
            "drawOddjobTitleBeforeFade(${0:bool flag})"
        ],
        "prefix": "drawOddjobTitleBeforeFade",
        "scope": "lua"
    },
    "planeAttackPlayerUsingDogFight": {
        "description": "planeAttackPlayerUsingDogFight",
        "body": [
            "planeAttackPlayerUsingDogFight(${0:int hydra, Player player, float radius})"
        ],
        "prefix": "planeAttackPlayerUsingDogFight",
        "scope": "lua"
    },
    "registerFloatStat": {
        "description": "registerFloatStat",
        "body": [
            "registerFloatStat(${0:int stat, float value})"
        ],
        "prefix": "registerFloatStat",
        "scope": "lua"
    },
    "getNameOfInfoZone": {
        "description": "getNameOfInfoZone",
        "body": [
            "getNameOfInfoZone(${0:float atX, float atY, float atZ})"
        ],
        "prefix": "getNameOfInfoZone",
        "scope": "lua"
    },
    "printStringInStringNow": {
        "description": "printStringInStringNow",
        "body": [
            "printStringInStringNow(${0:GxtString gxtString, GxtString string, int time1, int time2})"
        ],
        "prefix": "printStringInStringNow",
        "scope": "lua"
    },
    "setHelpMessageBoxSize": {
        "description": "setHelpMessageBoxSize",
        "body": [
            "setHelpMessageBoxSize(${0:int width})"
        ],
        "prefix": "setHelpMessageBoxSize",
        "scope": "lua"
    },
    "isRelationshipSet": {
        "description": "isRelationshipSet",
        "body": [
            "isRelationshipSet(${0:int acquaintance, int ofActors, int toActors})"
        ],
        "prefix": "isRelationshipSet",
        "scope": "lua"
    },
    "memory.setint64": {
        "description": "memory.setint64",
        "body": [
            "memory.setint64(${0:uint address, double qword, [bool unprotect=false]})"
        ],
        "prefix": "memory.setint64",
        "scope": "lua"
    },
    "setCarFollowCar": {
        "description": "setCarFollowCar",
        "body": [
            "setCarFollowCar(${0:Vehicle car, int followCar, float radius})"
        ],
        "prefix": "setCarFollowCar",
        "scope": "lua"
    },
    "limitAngle": {
        "description": "limitAngle",
        "body": [
            "limitAngle(${0:float angle})"
        ],
        "prefix": "limitAngle",
        "scope": "lua"
    },
    "clearCarLastDamageEntity": {
        "description": "clearCarLastDamageEntity",
        "body": [
            "clearCarLastDamageEntity(${0:Vehicle car})"
        ],
        "prefix": "clearCarLastDamageEntity",
        "scope": "lua"
    },
    "registerBestPosition": {
        "description": "registerBestPosition",
        "body": [
            "registerBestPosition(${0:int stat, float float})"
        ],
        "prefix": "registerBestPosition",
        "scope": "lua"
    },
    "isCharInAngledAreaOnFoot2d": {
        "description": "isCharInAngledAreaOnFoot2d",
        "body": [
            "isCharInAngledAreaOnFoot2d(${0:Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere})"
        ],
        "prefix": "isCharInAngledAreaOnFoot2d",
        "scope": "lua"
    },
    "playerEnteredDockCrane": {
        "description": "playerEnteredDockCrane",
        "body": [
            "playerEnteredDockCrane()"
        ],
        "prefix": "playerEnteredDockCrane",
        "scope": "lua"
    },
    "performSequenceTask": {
        "description": "performSequenceTask",
        "body": [
            "performSequenceTask(${0:Ped ped, int task})"
        ],
        "prefix": "performSequenceTask",
        "scope": "lua"
    },
    "winchCanPickObjectUp": {
        "description": "winchCanPickObjectUp",
        "body": [
            "winchCanPickObjectUp(${0:Object object, bool enable})"
        ],
        "prefix": "winchCanPickObjectUp",
        "scope": "lua"
    },
    "taskKillCharOnFootTimed": {
        "description": "taskKillCharOnFootTimed",
        "body": [
            "taskKillCharOnFootTimed(${0:Ped ped, int attackActor, int time})"
        ],
        "prefix": "taskKillCharOnFootTimed",
        "scope": "lua"
    },
    "setObjectPathPosition": {
        "description": "setObjectPathPosition",
        "body": [
            "setObjectPathPosition(${0:int int1, float float2})"
        ],
        "prefix": "setObjectPathPosition",
        "scope": "lua"
    },
    "getCutsceneOffset": {
        "description": "getCutsceneOffset",
        "body": [
            "getCutsceneOffset()"
        ],
        "prefix": "getCutsceneOffset",
        "scope": "lua"
    },
    "setPlayerIsInStadium": {
        "description": "setPlayerIsInStadium",
        "body": [
            "setPlayerIsInStadium(${0:bool set})"
        ],
        "prefix": "setPlayerIsInStadium",
        "scope": "lua"
    },
    "setTagStatusInArea": {
        "description": "setTagStatusInArea",
        "body": [
            "setTagStatusInArea(${0:float x1, float y1, float x2, float y2, bool value})"
        ],
        "prefix": "setTagStatusInArea",
        "scope": "lua"
    },
    "setMissionTrainCoordinates": {
        "description": "setMissionTrainCoordinates",
        "body": [
            "setMissionTrainCoordinates(${0:Vehicle train, float X, float Y, float Z})"
        ],
        "prefix": "setMissionTrainCoordinates",
        "scope": "lua"
    },
    "doesCarHaveHydraulics": {
        "description": "doesCarHaveHydraulics",
        "body": [
            "doesCarHaveHydraulics(${0:Vehicle car})"
        ],
        "prefix": "doesCarHaveHydraulics",
        "scope": "lua"
    },
    "setTotalNumberOfMissions": {
        "description": "setTotalNumberOfMissions",
        "body": [
            "setTotalNumberOfMissions(${0:int totalMissions})"
        ],
        "prefix": "setTotalNumberOfMissions",
        "scope": "lua"
    },
    "cameraIsVectorMoveRunning": {
        "description": "cameraIsVectorMoveRunning",
        "body": [
            "cameraIsVectorMoveRunning()"
        ],
        "prefix": "cameraIsVectorMoveRunning",
        "scope": "lua"
    },
    "randomPassengerSay": {
        "description": "randomPassengerSay",
        "body": [
            "randomPassengerSay(${0:int passengers, int audioTable})"
        ],
        "prefix": "randomPassengerSay",
        "scope": "lua"
    },
    "setPhotoCameraEffect": {
        "description": "setPhotoCameraEffect",
        "body": [
            "setPhotoCameraEffect(${0:bool firstPersonView})"
        ],
        "prefix": "setPhotoCameraEffect",
        "scope": "lua"
    },
    "getScriptFireCoords": {
        "description": "getScriptFireCoords",
        "body": [
            "getScriptFireCoords(${0:int fire})"
        ],
        "prefix": "getScriptFireCoords",
        "scope": "lua"
    },
    "setVehicleAirResistanceMultiplier": {
        "description": "setVehicleAirResistanceMultiplier",
        "body": [
            "setVehicleAirResistanceMultiplier(${0:Vehicle car, float multiplier})"
        ],
        "prefix": "setVehicleAirResistanceMultiplier",
        "scope": "lua"
    },
    "locateCharAnyMeansObject3d": {
        "description": "locateCharAnyMeansObject3d",
        "body": [
            "locateCharAnyMeansObject3d(${0:Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateCharAnyMeansObject3d",
        "scope": "lua"
    },
    "setCharSayScript": {
        "description": "setCharSayScript",
        "body": [
            "setCharSayScript(${0:Ped ped, int sound, bool flags1, bool flags2, bool flags3})"
        ],
        "prefix": "setCharSayScript",
        "scope": "lua"
    },
    "cameraPersistFov": {
        "description": "cameraPersistFov",
        "body": [
            "cameraPersistFov(${0:bool lock})"
        ],
        "prefix": "cameraPersistFov",
        "scope": "lua"
    },
    "removeSphere": {
        "description": "removeSphere",
        "body": [
            "removeSphere(${0:int sphere})"
        ],
        "prefix": "removeSphere",
        "scope": "lua"
    },
    "loadSprite": {
        "description": "loadSprite",
        "body": [
            "loadSprite(${0:string name})"
        ],
        "prefix": "loadSprite",
        "scope": "lua"
    },
    "setBlipAsFriendly": {
        "description": "setBlipAsFriendly",
        "body": [
            "setBlipAsFriendly(${0:Marker marker, bool type})"
        ],
        "prefix": "setBlipAsFriendly",
        "scope": "lua"
    },
    "getPlayerMaxArmour": {
        "description": "getPlayerMaxArmour",
        "body": [
            "getPlayerMaxArmour(${0:Player player})"
        ],
        "prefix": "getPlayerMaxArmour",
        "scope": "lua"
    },
    "removeStuckCarCheck": {
        "description": "removeStuckCarCheck",
        "body": [
            "removeStuckCarCheck(${0:Vehicle car})"
        ],
        "prefix": "removeStuckCarCheck",
        "scope": "lua"
    },
    "popCarDoor": {
        "description": "popCarDoor",
        "body": [
            "popCarDoor(${0:Vehicle car, int door, bool visible})"
        ],
        "prefix": "popCarDoor",
        "scope": "lua"
    },
    "setGarageResprayFree": {
        "description": "setGarageResprayFree",
        "body": [
            "setGarageResprayFree(${0:GxtString garage, bool free})"
        ],
        "prefix": "setGarageResprayFree",
        "scope": "lua"
    },
    "setInteriorVisible": {
        "description": "setInteriorVisible",
        "body": [
            "setInteriorVisible(${0:int interior})"
        ],
        "prefix": "setInteriorVisible",
        "scope": "lua"
    },
    "getCarSpeedVector": {
        "description": "getCarSpeedVector",
        "body": [
            "getCarSpeedVector(${0:Vehicle car})"
        ],
        "prefix": "getCarSpeedVector",
        "scope": "lua"
    },
    "isCharInZone": {
        "description": "isCharInZone",
        "body": [
            "isCharInZone(${0:Ped ped, GxtString zoneName})"
        ],
        "prefix": "isCharInZone",
        "scope": "lua"
    },
    "getClosestCarNode": {
        "description": "getClosestCarNode",
        "body": [
            "getClosestCarNode(${0:float closestToX, float closestToY, float closestToZ})"
        ],
        "prefix": "getClosestCarNode",
        "scope": "lua"
    },
    "createUser3dMarker": {
        "description": "createUser3dMarker",
        "body": [
            "createUser3dMarker(${0:float atX, float atY, float atZ, int color})"
        ],
        "prefix": "createUser3dMarker",
        "scope": "lua"
    },
    "hasMissionAudioLoaded": {
        "description": "hasMissionAudioLoaded",
        "body": [
            "hasMissionAudioLoaded(${0:int id})"
        ],
        "prefix": "hasMissionAudioLoaded",
        "scope": "lua"
    },
    "setNoResprays": {
        "description": "setNoResprays",
        "body": [
            "setNoResprays(${0:bool enable})"
        ],
        "prefix": "setNoResprays",
        "scope": "lua"
    },
    "registerFastestTime": {
        "description": "registerFastestTime",
        "body": [
            "registerFastestTime(${0:int stat, int to})"
        ],
        "prefix": "registerFastestTime",
        "scope": "lua"
    },
    "openCarDoor": {
        "description": "openCarDoor",
        "body": [
            "openCarDoor(${0:Vehicle car, int door})"
        ],
        "prefix": "openCarDoor",
        "scope": "lua"
    },
    "taskHandsUp": {
        "description": "taskHandsUp",
        "body": [
            "taskHandsUp(${0:Ped ped, int timeMS})"
        ],
        "prefix": "taskHandsUp",
        "scope": "lua"
    },
    "sampGetVehiclePoolPtr": {
        "description": "sampGetVehiclePoolPtr",
        "body": [
            "sampGetVehiclePoolPtr()"
        ],
        "prefix": "sampGetVehiclePoolPtr",
        "scope": "lua"
    },
    "flushPatrolRoute": {
        "description": "flushPatrolRoute",
        "body": [
            "flushPatrolRoute()"
        ],
        "prefix": "flushPatrolRoute",
        "scope": "lua"
    },
    "hasCharBeenPhotographed": {
        "description": "hasCharBeenPhotographed",
        "body": [
            "hasCharBeenPhotographed(${0:Ped ped})"
        ],
        "prefix": "hasCharBeenPhotographed",
        "scope": "lua"
    },
    "hasCharBeenArrested": {
        "description": "hasCharBeenArrested",
        "body": [
            "hasCharBeenArrested(${0:Ped ped})"
        ],
        "prefix": "hasCharBeenArrested",
        "scope": "lua"
    },
    "setNextDesiredMoveState": {
        "description": "setNextDesiredMoveState",
        "body": [
            "setNextDesiredMoveState(${0:int speed})"
        ],
        "prefix": "setNextDesiredMoveState",
        "scope": "lua"
    },
    "isPlaybackGoingOnForCar": {
        "description": "isPlaybackGoingOnForCar",
        "body": [
            "isPlaybackGoingOnForCar(${0:Vehicle car})"
        ],
        "prefix": "isPlaybackGoingOnForCar",
        "scope": "lua"
    },
    "pointCameraAtCar": {
        "description": "pointCameraAtCar",
        "body": [
            "pointCameraAtCar(${0:Vehicle car, int mode, int switchstyle})"
        ],
        "prefix": "pointCameraAtCar",
        "scope": "lua"
    },
    "forceCarLights": {
        "description": "forceCarLights",
        "body": [
            "forceCarLights(${0:Vehicle car, int lights})"
        ],
        "prefix": "forceCarLights",
        "scope": "lua"
    },
    "getCarPitch": {
        "description": "getCarPitch",
        "body": [
            "getCarPitch(${0:Vehicle car})"
        ],
        "prefix": "getCarPitch",
        "scope": "lua"
    },
    "forceDeathRestart": {
        "description": "forceDeathRestart",
        "body": [
            "forceDeathRestart()"
        ],
        "prefix": "forceDeathRestart",
        "scope": "lua"
    },
    "launchCustomMission": {
        "description": "launchCustomMission",
        "body": [
            "launchCustomMission(${0:zstring filepath, table args})"
        ],
        "prefix": "launchCustomMission",
        "scope": "lua"
    },
    "isPlayerInRemoteMode": {
        "description": "isPlayerInRemoteMode",
        "body": [
            "isPlayerInRemoteMode(${0:Player player})"
        ],
        "prefix": "isPlayerInRemoteMode",
        "scope": "lua"
    },
    "getItemInShop": {
        "description": "getItemInShop",
        "body": [
            "getItemInShop(${0:int index})"
        ],
        "prefix": "getItemInShop",
        "scope": "lua"
    },
    "findNumberTagsTagged": {
        "description": "findNumberTagsTagged",
        "body": [
            "findNumberTagsTagged()"
        ],
        "prefix": "findNumberTagsTagged",
        "scope": "lua"
    },
    "drawSpriteWithRotation": {
        "description": "drawSpriteWithRotation",
        "body": [
            "drawSpriteWithRotation(${0:int texture, float x, float y, float scaleX, float scaleY, float angle, int r, int g, int b, int a})"
        ],
        "prefix": "drawSpriteWithRotation",
        "scope": "lua"
    },
    "displayNthOnscreenCounterWithString": {
        "description": "displayNthOnscreenCounterWithString",
        "body": [
            "displayNthOnscreenCounterWithString(${0:VarId text, int type, int line, GxtString gxtString})"
        ],
        "prefix": "displayNthOnscreenCounterWithString",
        "scope": "lua"
    },
    "switchPedRoadsBackToOriginal": {
        "description": "switchPedRoadsBackToOriginal",
        "body": [
            "switchPedRoadsBackToOriginal(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "switchPedRoadsBackToOriginal",
        "scope": "lua"
    },
    "setTextDrawBeforeFade": {
        "description": "setTextDrawBeforeFade",
        "body": [
            "setTextDrawBeforeFade(${0:bool int1})"
        ],
        "prefix": "setTextDrawBeforeFade",
        "scope": "lua"
    },
    "setHeliBladesFullSpeed": {
        "description": "setHeliBladesFullSpeed",
        "body": [
            "setHeliBladesFullSpeed(${0:Vehicle heli})"
        ],
        "prefix": "setHeliBladesFullSpeed",
        "scope": "lua"
    },
    "carGotoCoordinates": {
        "description": "carGotoCoordinates",
        "body": [
            "carGotoCoordinates(${0:Vehicle car, float driveToX, float driveToY, float driveToZ})"
        ],
        "prefix": "carGotoCoordinates",
        "scope": "lua"
    },
    "fireSingleBullet": {
        "description": "fireSingleBullet",
        "body": [
            "fireSingleBullet(${0:float fromX, float fromY, float fromZ, float targetX, float targetY, float targetZ, int energy})"
        ],
        "prefix": "fireSingleBullet",
        "scope": "lua"
    },
    "locateCharInCarCar3d": {
        "description": "locateCharInCarCar3d",
        "body": [
            "locateCharInCarCar3d(${0:Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag})"
        ],
        "prefix": "locateCharInCarCar3d",
        "scope": "lua"
    },
    "planeAttackPlayer": {
        "description": "planeAttackPlayer",
        "body": [
            "planeAttackPlayer(${0:int hydra, Vehicle car, float radius})"
        ],
        "prefix": "planeAttackPlayer",
        "scope": "lua"
    },
    "attachAnimsToModel": {
        "description": "attachAnimsToModel",
        "body": [
            "attachAnimsToModel(${0:Model modelId, GxtString externalScript})"
        ],
        "prefix": "attachAnimsToModel",
        "scope": "lua"
    },
    "hasCharSpottedChar": {
        "description": "hasCharSpottedChar",
        "body": [
            "hasCharSpottedChar(${0:Ped ped, Ped ped})"
        ],
        "prefix": "hasCharSpottedChar",
        "scope": "lua"
    },
    "setCharKindaStayInSamePlace": {
        "description": "setCharKindaStayInSamePlace",
        "body": [
            "setCharKindaStayInSamePlace(${0:Ped ped, bool stay})"
        ],
        "prefix": "setCharKindaStayInSamePlace",
        "scope": "lua"
    },
    "setGroupSeparationRange": {
        "description": "setGroupSeparationRange",
        "body": [
            "setGroupSeparationRange(${0:int group, float range})"
        ],
        "prefix": "setGroupSeparationRange",
        "scope": "lua"
    },
    "incrementIntStatNoMessage": {
        "description": "incrementIntStatNoMessage",
        "body": [
            "incrementIntStatNoMessage(${0:int stat, int value})"
        ],
        "prefix": "incrementIntStatNoMessage",
        "scope": "lua"
    },
    "setHeadingForAttachedPlayer": {
        "description": "setHeadingForAttachedPlayer",
        "body": [
            "setHeadingForAttachedPlayer(${0:Player player, float toAngle, float rotationSpeed})"
        ],
        "prefix": "setHeadingForAttachedPlayer",
        "scope": "lua"
    },
    "disablePlayerSprint": {
        "description": "disablePlayerSprint",
        "body": [
            "disablePlayerSprint(${0:Player player, bool mode})"
        ],
        "prefix": "disablePlayerSprint",
        "scope": "lua"
    },
    "isExplosionInArea": {
        "description": "isExplosionInArea",
        "body": [
            "isExplosionInArea(${0:int explosionType, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "isExplosionInArea",
        "scope": "lua"
    },
    "setGroupSequence": {
        "description": "setGroupSequence",
        "body": [
            "setGroupSequence(${0:int group, int Aspack})"
        ],
        "prefix": "setGroupSequence",
        "scope": "lua"
    },
    "removeOilPuddlesInArea": {
        "description": "removeOilPuddlesInArea",
        "body": [
            "removeOilPuddlesInArea(${0:float x1, float y1, float x2, float y2})"
        ],
        "prefix": "removeOilPuddlesInArea",
        "scope": "lua"
    },
    "skipInPlaybackRecordedCar": {
        "description": "skipInPlaybackRecordedCar",
        "body": [
            "skipInPlaybackRecordedCar(${0:Vehicle car, float path})"
        ],
        "prefix": "skipInPlaybackRecordedCar",
        "scope": "lua"
    },
    "giveRemoteControlledCarToPlayer": {
        "description": "giveRemoteControlledCarToPlayer",
        "body": [
            "giveRemoteControlledCarToPlayer(${0:Player player, float float2, float float3, float float4})"
        ],
        "prefix": "giveRemoteControlledCarToPlayer",
        "scope": "lua"
    },
    "limitTwoPlayerDistance": {
        "description": "limitTwoPlayerDistance",
        "body": [
            "limitTwoPlayerDistance(${0:float distance})"
        ],
        "prefix": "limitTwoPlayerDistance",
        "scope": "lua"
    },
    "getRandomCarOfTypeInArea": {
        "description": "getRandomCarOfTypeInArea",
        "body": [
            "getRandomCarOfTypeInArea(${0:float cornerAX, float cornerAY, float cornerBX, float cornerBY, Model modelId})"
        ],
        "prefix": "getRandomCarOfTypeInArea",
        "scope": "lua"
    },
    "makePlayerGangReappear": {
        "description": "makePlayerGangReappear",
        "body": [
            "makePlayerGangReappear()"
        ],
        "prefix": "makePlayerGangReappear",
        "scope": "lua"
    },
    "isGarageOpen": {
        "description": "isGarageOpen",
        "body": [
            "isGarageOpen(${0:GxtString garage})"
        ],
        "prefix": "isGarageOpen",
        "scope": "lua"
    },
    "setMusicDoesFade": {
        "description": "setMusicDoesFade",
        "body": [
            "setMusicDoesFade(${0:bool enable})"
        ],
        "prefix": "setMusicDoesFade",
        "scope": "lua"
    },
    "displayText": {
        "description": "displayText",
        "body": [
            "displayText(${0:float posX, float posY, GxtString gxtString})"
        ],
        "prefix": "displayText",
        "scope": "lua"
    },
    "isPlayerControlOn": {
        "description": "isPlayerControlOn",
        "body": [
            "isPlayerControlOn(${0:Player player})"
        ],
        "prefix": "isPlayerControlOn",
        "scope": "lua"
    },
    "deleteMissionTrains": {
        "description": "deleteMissionTrains",
        "body": [
            "deleteMissionTrains()"
        ],
        "prefix": "deleteMissionTrains",
        "scope": "lua"
    },
    "getUserOfClosestMapAttractor": {
        "description": "getUserOfClosestMapAttractor",
        "body": [
            "getUserOfClosestMapAttractor(${0:float sphereX, float sphereY, float sphereZ, float radius, Model modelId, string externalScriptNamed})"
        ],
        "prefix": "getUserOfClosestMapAttractor",
        "scope": "lua"
    },
    "attachCarToObject": {
        "description": "attachCarToObject",
        "body": [
            "attachCarToObject(${0:Vehicle car, Object object, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ})"
        ],
        "prefix": "attachCarToObject",
        "scope": "lua"
    },
    "setCharNeverLeavesGroup": {
        "description": "setCharNeverLeavesGroup",
        "body": [
            "setCharNeverLeavesGroup(${0:Ped ped, bool set})"
        ],
        "prefix": "setCharNeverLeavesGroup",
        "scope": "lua"
    },
    "switchDeathPenalties": {
        "description": "switchDeathPenalties",
        "body": [
            "switchDeathPenalties(${0:bool lose})"
        ],
        "prefix": "switchDeathPenalties",
        "scope": "lua"
    },
    "do2dRectanglesCollide": {
        "description": "do2dRectanglesCollide",
        "body": [
            "do2dRectanglesCollide(${0:float areaX, float areaY, float scaleX, float scaleY, float overlapareaX, float overlapareaY, float overlapscaleX, float overlapscaleY})"
        ],
        "prefix": "do2dRectanglesCollide",
        "scope": "lua"
    },
    "setCarCanBeDamaged": {
        "description": "setCarCanBeDamaged",
        "body": [
            "setCarCanBeDamaged(${0:Vehicle car, bool enable})"
        ],
        "prefix": "setCarCanBeDamaged",
        "scope": "lua"
    },
    "createCarGeneratorWithPlate": {
        "description": "createCarGeneratorWithPlate",
        "body": [
            "createCarGeneratorWithPlate(${0:float atX, float atY, float atZ, float angle, Model modelId, int color1, int color2, bool forceSpawn, int alarm, int doorLock, int minDelay, int maxDelay, string plate})"
        ],
        "prefix": "createCarGeneratorWithPlate",
        "scope": "lua"
    },
    "givePlayerClothes": {
        "description": "givePlayerClothes",
        "body": [
            "givePlayerClothes(${0:Player player, int texture, int model, int bodypart})"
        ],
        "prefix": "givePlayerClothes",
        "scope": "lua"
    },
    "setExtraColours": {
        "description": "setExtraColours",
        "body": [
            "setExtraColours(${0:int color, bool fade})"
        ],
        "prefix": "setExtraColours",
        "scope": "lua"
    },
    "startNewStreamedScript": {
        "description": "startNewStreamedScript",
        "body": [
            "startNewStreamedScript(${0:int externalScript, table args})"
        ],
        "prefix": "startNewStreamedScript",
        "scope": "lua"
    },
    "clearAreaOfChars": {
        "description": "clearAreaOfChars",
        "body": [
            "clearAreaOfChars(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "clearAreaOfChars",
        "scope": "lua"
    },
    "getRandomCharInAreaOffsetNoSave": {
        "description": "getRandomCharInAreaOffsetNoSave",
        "body": [
            "getRandomCharInAreaOffsetNoSave(${0:float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ})"
        ],
        "prefix": "getRandomCharInAreaOffsetNoSave",
        "scope": "lua"
    },
    "createSwatRope": {
        "description": "createSwatRope",
        "body": [
            "createSwatRope(${0:int pedtype, Model modelId, float X, float Y, float Z})"
        ],
        "prefix": "createSwatRope",
        "scope": "lua"
    },
    "taskGoToCoordWhileShooting": {
        "description": "taskGoToCoordWhileShooting",
        "body": [
            "taskGoToCoordWhileShooting(${0:Ped ped, float toX, float toY, float toZ, int mode, float turnRadius, float stopRadius, int lookAtActor})"
        ],
        "prefix": "taskGoToCoordWhileShooting",
        "scope": "lua"
    },
    "setGroupDecisionMaker": {
        "description": "setGroupDecisionMaker",
        "body": [
            "setGroupDecisionMaker(${0:int group, int maker})"
        ],
        "prefix": "setGroupDecisionMaker",
        "scope": "lua"
    },
    "memory.setdouble": {
        "description": "memory.setdouble",
        "body": [
            "memory.setdouble(${0:uint address, double value, [bool unprotect=false]})"
        ],
        "prefix": "memory.setdouble",
        "scope": "lua"
    },
    "taskGoToCoordAnyMeans": {
        "description": "taskGoToCoordAnyMeans",
        "body": [
            "taskGoToCoordAnyMeans(${0:Ped ped, float toX, float toY, float toZ, int mode, Vehicle useCar})"
        ],
        "prefix": "taskGoToCoordAnyMeans",
        "scope": "lua"
    },
    "switchAmbientPlanes": {
        "description": "switchAmbientPlanes",
        "body": [
            "switchAmbientPlanes(${0:bool enable})"
        ],
        "prefix": "switchAmbientPlanes",
        "scope": "lua"
    },
    "locateCharAnyMeansCar2d": {
        "description": "locateCharAnyMeansCar2d",
        "body": [
            "locateCharAnyMeansCar2d(${0:Ped ped, Vehicle car, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCharAnyMeansCar2d",
        "scope": "lua"
    },
    "taskAimGunAtCoord": {
        "description": "taskAimGunAtCoord",
        "body": [
            "taskAimGunAtCoord(${0:Ped ped, float atX, float atY, float atZ, int timeMS})"
        ],
        "prefix": "taskAimGunAtCoord",
        "scope": "lua"
    },
    "isGarageClosed": {
        "description": "isGarageClosed",
        "body": [
            "isGarageClosed(${0:GxtString garage})"
        ],
        "prefix": "isGarageClosed",
        "scope": "lua"
    },
    "isVehicleInSearchlight": {
        "description": "isVehicleInSearchlight",
        "body": [
            "isVehicleInSearchlight(${0:int int, Vehicle car})"
        ],
        "prefix": "isVehicleInSearchlight",
        "scope": "lua"
    },
    "switchRoadsOn": {
        "description": "switchRoadsOn",
        "body": [
            "switchRoadsOn(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "switchRoadsOn",
        "scope": "lua"
    },
    "memory.setfloat": {
        "description": "memory.setfloat",
        "body": [
            "memory.setfloat(${0:uint address, float value, [bool unprotect=false]})"
        ],
        "prefix": "memory.setfloat",
        "scope": "lua"
    },
    "giveVehiclePaintjob": {
        "description": "giveVehiclePaintjob",
        "body": [
            "giveVehiclePaintjob(${0:int set, int paintjob})"
        ],
        "prefix": "giveVehiclePaintjob",
        "scope": "lua"
    },
    "clearHeliOrientation": {
        "description": "clearHeliOrientation",
        "body": [
            "clearHeliOrientation(${0:Vehicle heli})"
        ],
        "prefix": "clearHeliOrientation",
        "scope": "lua"
    },
    "getPositionOfAnalogueSticks": {
        "description": "getPositionOfAnalogueSticks",
        "body": [
            "getPositionOfAnalogueSticks(${0:int joystick})"
        ],
        "prefix": "getPositionOfAnalogueSticks",
        "scope": "lua"
    },
    "getBeatTrackStatus": {
        "description": "getBeatTrackStatus",
        "body": [
            "getBeatTrackStatus()"
        ],
        "prefix": "getBeatTrackStatus",
        "scope": "lua"
    },
    "carGotoCoordinatesRacing": {
        "description": "carGotoCoordinatesRacing",
        "body": [
            "carGotoCoordinatesRacing(${0:Vehicle car, float toX, float toY, float toZ})"
        ],
        "prefix": "carGotoCoordinatesRacing",
        "scope": "lua"
    },
    "removeUpsidedownCarCheck": {
        "description": "removeUpsidedownCarCheck",
        "body": [
            "removeUpsidedownCarCheck(${0:Vehicle car})"
        ],
        "prefix": "removeUpsidedownCarCheck",
        "scope": "lua"
    },
    "createFxSystemOnObject": {
        "description": "createFxSystemOnObject",
        "body": [
            "createFxSystemOnObject(${0:string particle, Object object, float offsetX, float offsetY, float offsetZ, int type})"
        ],
        "prefix": "createFxSystemOnObject",
        "scope": "lua"
    },
    "taskLookAtChar": {
        "description": "taskLookAtChar",
        "body": [
            "taskLookAtChar(${0:Ped ped, int lookAt, int timeMS})"
        ],
        "prefix": "taskLookAtChar",
        "scope": "lua"
    },
    "addStuntJump": {
        "description": "addStuntJump",
        "body": [
            "addStuntJump(${0:float startX, float startY, float startZ, float radiusX, float radiusY, float radiusZ, float goalX, float goalY, float goalZ, float radius2X, float radius2Y, float radius2Z, float cameraX, float cameraY, float cameraZ, int reward})"
        ],
        "prefix": "addStuntJump",
        "scope": "lua"
    },
    "hasMissionAudioFinished": {
        "description": "hasMissionAudioFinished",
        "body": [
            "hasMissionAudioFinished(${0:int id})"
        ],
        "prefix": "hasMissionAudioFinished",
        "scope": "lua"
    },
    "isCarTouchingCar": {
        "description": "isCarTouchingCar",
        "body": [
            "isCarTouchingCar(${0:Vehicle car1, Vehicle car2})"
        ],
        "prefix": "isCarTouchingCar",
        "scope": "lua"
    },
    "heliLandAtCoords": {
        "description": "heliLandAtCoords",
        "body": [
            "heliLandAtCoords(${0:Vehicle heli, float X, float Y, float Z, float minaltitude, float maxaltitude})"
        ],
        "prefix": "heliLandAtCoords",
        "scope": "lua"
    },
    "setPlaybackSpeed": {
        "description": "setPlaybackSpeed",
        "body": [
            "setPlaybackSpeed(${0:Vehicle car, float speed})"
        ],
        "prefix": "setPlaybackSpeed",
        "scope": "lua"
    },
    "isCharGettingInToACar": {
        "description": "isCharGettingInToACar",
        "body": [
            "isCharGettingInToACar(${0:Ped ped})"
        ],
        "prefix": "isCharGettingInToACar",
        "scope": "lua"
    },
    "hasCarBeenDamagedByChar": {
        "description": "hasCarBeenDamagedByChar",
        "body": [
            "hasCarBeenDamagedByChar(${0:Vehicle car, Ped byActor})"
        ],
        "prefix": "hasCarBeenDamagedByChar",
        "scope": "lua"
    },
    "setObjectVisible": {
        "description": "setObjectVisible",
        "body": [
            "setObjectVisible(${0:Object object, bool visibility})"
        ],
        "prefix": "setObjectVisible",
        "scope": "lua"
    },
    "isCharInAreaOnFoot3d": {
        "description": "isCharInAreaOnFoot3d",
        "body": [
            "isCharInAreaOnFoot3d(${0:Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere})"
        ],
        "prefix": "isCharInAreaOnFoot3d",
        "scope": "lua"
    },
    "makePlayerSafe": {
        "description": "makePlayerSafe",
        "body": [
            "makePlayerSafe(${0:Player player})"
        ],
        "prefix": "makePlayerSafe",
        "scope": "lua"
    },
    "createSnapshotPickup": {
        "description": "createSnapshotPickup",
        "body": [
            "createSnapshotPickup(${0:float atX, float atY, float atZ})"
        ],
        "prefix": "createSnapshotPickup",
        "scope": "lua"
    },
    "getRopeHeightForObject": {
        "description": "getRopeHeightForObject",
        "body": [
            "getRopeHeightForObject(${0:int magnet})"
        ],
        "prefix": "getRopeHeightForObject",
        "scope": "lua"
    },
    "raknetSendBitStream": {
        "description": "raknetSendBitStream",
        "body": [
            "raknetSendBitStream(${0:Bitstream bs})"
        ],
        "prefix": "raknetSendBitStream",
        "scope": "lua"
    },
    "enableCraneControls": {
        "description": "enableCraneControls",
        "body": [
            "enableCraneControls(${0:bool UP, bool DOWN, bool RELEASE})"
        ],
        "prefix": "enableCraneControls",
        "scope": "lua"
    },
    "markVehicleModAsNoLongerNeeded": {
        "description": "markVehicleModAsNoLongerNeeded",
        "body": [
            "markVehicleModAsNoLongerNeeded(${0:Model component})"
        ],
        "prefix": "markVehicleModAsNoLongerNeeded",
        "scope": "lua"
    },
    "isBigVehicle": {
        "description": "isBigVehicle",
        "body": [
            "isBigVehicle(${0:Vehicle car})"
        ],
        "prefix": "isBigVehicle",
        "scope": "lua"
    },
    "removeUser3dMarker": {
        "description": "removeUser3dMarker",
        "body": [
            "removeUser3dMarker(${0:Marker marker})"
        ],
        "prefix": "removeUser3dMarker",
        "scope": "lua"
    },
    "clearGroupDecisionMakerEventResponse": {
        "description": "clearGroupDecisionMakerEventResponse",
        "body": [
            "clearGroupDecisionMakerEventResponse(${0:int maker, int event})"
        ],
        "prefix": "clearGroupDecisionMakerEventResponse",
        "scope": "lua"
    },
    "setUpSkipForVehicleFinishedByScript": {
        "description": "setUpSkipForVehicleFinishedByScript",
        "body": [
            "setUpSkipForVehicleFinishedByScript(${0:float posX, float posY, float posZ, float angle, Vehicle car})"
        ],
        "prefix": "setUpSkipForVehicleFinishedByScript",
        "scope": "lua"
    },
    "setPlayerPlayerTargetting": {
        "description": "setPlayerPlayerTargetting",
        "body": [
            "setPlayerPlayerTargetting(${0:bool can})"
        ],
        "prefix": "setPlayerPlayerTargetting",
        "scope": "lua"
    },
    "taskGotoCharOffset": {
        "description": "taskGotoCharOffset",
        "body": [
            "taskGotoCharOffset(${0:Ped ped, int toActor, int timelimit, float approachDistance, float approachAngle})"
        ],
        "prefix": "taskGotoCharOffset",
        "scope": "lua"
    },
    "setPetrolTankWeakpoint": {
        "description": "setPetrolTankWeakpoint",
        "body": [
            "setPetrolTankWeakpoint(${0:Vehicle car, bool enabled})"
        ],
        "prefix": "setPetrolTankWeakpoint",
        "scope": "lua"
    },
    "loadSceneInDirection": {
        "description": "loadSceneInDirection",
        "body": [
            "loadSceneInDirection(${0:float coordX, float coordY, float coordZ, float angle})"
        ],
        "prefix": "loadSceneInDirection",
        "scope": "lua"
    },
    "addSphere": {
        "description": "addSphere",
        "body": [
            "addSphere(${0:float atX, float atY, float atZ, float radius})"
        ],
        "prefix": "addSphere",
        "scope": "lua"
    },
    "cameraSetShakeSimulationSimple": {
        "description": "cameraSetShakeSimulationSimple",
        "body": [
            "cameraSetShakeSimulationSimple(${0:int type, float timelimit, float intensity})"
        ],
        "prefix": "cameraSetShakeSimulationSimple",
        "scope": "lua"
    },
    "isObjectInAngledArea2d": {
        "description": "isObjectInAngledArea2d",
        "body": [
            "isObjectInAngledArea2d(${0:Object object, float x1, float y1, float x2, float y2, float radius, bool sphere})"
        ],
        "prefix": "isObjectInAngledArea2d",
        "scope": "lua"
    },
    "sampSetSendrate": {
        "description": "sampSetSendrate",
        "body": [
            "sampSetSendrate(${0:int type, int rate})"
        ],
        "prefix": "sampSetSendrate",
        "scope": "lua"
    },
    "switchCopsOnBikes": {
        "description": "switchCopsOnBikes",
        "body": [
            "switchCopsOnBikes(${0:bool generate})"
        ],
        "prefix": "switchCopsOnBikes",
        "scope": "lua"
    },
    "hasVehicleModLoaded": {
        "description": "hasVehicleModLoaded",
        "body": [
            "hasVehicleModLoaded(${0:Model component})"
        ],
        "prefix": "hasVehicleModLoaded",
        "scope": "lua"
    },
    "setCharCoordinatesDontWarpGang": {
        "description": "setCharCoordinatesDontWarpGang",
        "body": [
            "setCharCoordinatesDontWarpGang(${0:Ped ped, float X, float Y, float Z})"
        ],
        "prefix": "setCharCoordinatesDontWarpGang",
        "scope": "lua"
    },
    "setCharCantBeDraggedOut": {
        "description": "setCharCantBeDraggedOut",
        "body": [
            "setCharCantBeDraggedOut(${0:Ped ped, bool locked})"
        ],
        "prefix": "setCharCantBeDraggedOut",
        "scope": "lua"
    },
    "taskCarMission": {
        "description": "taskCarMission",
        "body": [
            "taskCarMission(${0:Ped ped, Vehicle car, int targetCar, int order, float maxSpeed, int trafficFlag})"
        ],
        "prefix": "taskCarMission",
        "scope": "lua"
    },
    "addAttractor": {
        "description": "addAttractor",
        "body": [
            "addAttractor(${0:float originX, float originY, float originZ, float zAngle, float unknownAngle, int taskSequence})"
        ],
        "prefix": "addAttractor",
        "scope": "lua"
    },
    "sampfuncsRegisterConsoleCommand": {
        "description": "sampfuncsRegisterConsoleCommand",
        "body": [
            "sampfuncsRegisterConsoleCommand(${0:zstring cmd, function func})"
        ],
        "prefix": "sampfuncsRegisterConsoleCommand",
        "scope": "lua"
    },
    "getPadState": {
        "description": "getPadState",
        "body": [
            "getPadState(${0:Player player, int key})"
        ],
        "prefix": "getPadState",
        "scope": "lua"
    },
    "printWith4NumbersNow": {
        "description": "printWith4NumbersNow",
        "body": [
            "printWith4NumbersNow(${0:GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int time, int flag})"
        ],
        "prefix": "printWith4NumbersNow",
        "scope": "lua"
    },
    "breakObject": {
        "description": "breakObject",
        "body": [
            "breakObject(${0:Object object, int intensity})"
        ],
        "prefix": "breakObject",
        "scope": "lua"
    },
    "setTrainCruiseSpeed": {
        "description": "setTrainCruiseSpeed",
        "body": [
            "setTrainCruiseSpeed(${0:Vehicle train, float speed})"
        ],
        "prefix": "setTrainCruiseSpeed",
        "scope": "lua"
    },
    "clearLookAt": {
        "description": "clearLookAt",
        "body": [
            "clearLookAt(${0:Ped ped})"
        ],
        "prefix": "clearLookAt",
        "scope": "lua"
    },
    "doesDecisionMakerExist": {
        "description": "doesDecisionMakerExist",
        "body": [
            "doesDecisionMakerExist(${0:int maker})"
        ],
        "prefix": "doesDecisionMakerExist",
        "scope": "lua"
    },
    "markMissionTrainAsNoLongerNeeded": {
        "description": "markMissionTrainAsNoLongerNeeded",
        "body": [
            "markMissionTrainAsNoLongerNeeded(${0:Vehicle train})"
        ],
        "prefix": "markMissionTrainAsNoLongerNeeded",
        "scope": "lua"
    },
    "isProceduralInteriorActive": {
        "description": "isProceduralInteriorActive",
        "body": [
            "isProceduralInteriorActive(${0:int interior})"
        ],
        "prefix": "isProceduralInteriorActive",
        "scope": "lua"
    },
    "givePlayerClothesOutsideShop": {
        "description": "givePlayerClothesOutsideShop",
        "body": [
            "givePlayerClothesOutsideShop(${0:Player player, string clothes, string model, int bodyPart})"
        ],
        "prefix": "givePlayerClothesOutsideShop",
        "scope": "lua"
    },
    "dxutSetSliderValue": {
        "description": "dxutSetSliderValue",
        "body": [
            "dxutSetSliderValue(${0:DxutDialog dialog, int id, int value})"
        ],
        "prefix": "dxutSetSliderValue",
        "scope": "lua"
    },
    "reportMissionAudioEventAtObject": {
        "description": "reportMissionAudioEventAtObject",
        "body": [
            "reportMissionAudioEventAtObject(${0:int at, int event})"
        ],
        "prefix": "reportMissionAudioEventAtObject",
        "scope": "lua"
    },
    "setCarOnlyDamagedByPlayer": {
        "description": "setCarOnlyDamagedByPlayer",
        "body": [
            "setCarOnlyDamagedByPlayer(${0:Vehicle car, bool enabled})"
        ],
        "prefix": "setCarOnlyDamagedByPlayer",
        "scope": "lua"
    },
    "lockDoor": {
        "description": "lockDoor",
        "body": [
            "lockDoor(${0:int door, bool lock})"
        ],
        "prefix": "lockDoor",
        "scope": "lua"
    },
    "taskEnterCarAsDriver": {
        "description": "taskEnterCarAsDriver",
        "body": [
            "taskEnterCarAsDriver(${0:Ped ped, Vehicle car, int timeMS})"
        ],
        "prefix": "taskEnterCarAsDriver",
        "scope": "lua"
    },
    "addBlipForCarOld": {
        "description": "addBlipForCarOld",
        "body": [
            "addBlipForCarOld(${0:Vehicle car, int unused, bool visibility})"
        ],
        "prefix": "addBlipForCarOld",
        "scope": "lua"
    },
    "getGroupMember": {
        "description": "getGroupMember",
        "body": [
            "getGroupMember(${0:int group, int member})"
        ],
        "prefix": "getGroupMember",
        "scope": "lua"
    },
    "isCharAtScriptedAttractor": {
        "description": "isCharAtScriptedAttractor",
        "body": [
            "isCharAtScriptedAttractor(${0:Ped ped, int origin})"
        ],
        "prefix": "isCharAtScriptedAttractor",
        "scope": "lua"
    },
    "clearConversationForChar": {
        "description": "clearConversationForChar",
        "body": [
            "clearConversationForChar(${0:Ped ped})"
        ],
        "prefix": "clearConversationForChar",
        "scope": "lua"
    },
    "removeAnimation": {
        "description": "removeAnimation",
        "body": [
            "removeAnimation(${0:string animation})"
        ],
        "prefix": "removeAnimation",
        "scope": "lua"
    },
    "dxutGetSliderValue": {
        "description": "dxutGetSliderValue",
        "body": [
            "dxutGetSliderValue(${0:DxutDialog dialog, int id})"
        ],
        "prefix": "dxutGetSliderValue",
        "scope": "lua"
    },
    "addUpsidedownCarCheck": {
        "description": "addUpsidedownCarCheck",
        "body": [
            "addUpsidedownCarCheck(${0:Vehicle car})"
        ],
        "prefix": "addUpsidedownCarCheck",
        "scope": "lua"
    },
    "extendPatrolRoute": {
        "description": "extendPatrolRoute",
        "body": [
            "extendPatrolRoute(${0:float X, float Y, float Z, string animation, string IFPFile})"
        ],
        "prefix": "extendPatrolRoute",
        "scope": "lua"
    },
    "taskTurnCharToFaceCoord": {
        "description": "taskTurnCharToFaceCoord",
        "body": [
            "taskTurnCharToFaceCoord(${0:Ped ped, float atX, float atY, float atZ})"
        ],
        "prefix": "taskTurnCharToFaceCoord",
        "scope": "lua"
    },
    "setCutsceneModelTexture": {
        "description": "setCutsceneModelTexture",
        "body": [
            "setCutsceneModelTexture(${0:GxtString cutsceneModel, GxtString textureName})"
        ],
        "prefix": "setCutsceneModelTexture",
        "scope": "lua"
    },
    "heliKeepEntityInView": {
        "description": "heliKeepEntityInView",
        "body": [
            "heliKeepEntityInView(${0:Vehicle heli, Ped ped, Vehicle car, float minaltitude, float maxaltitude})"
        ],
        "prefix": "heliKeepEntityInView",
        "scope": "lua"
    },
    "setCarRandomRouteSeed": {
        "description": "setCarRandomRouteSeed",
        "body": [
            "setCarRandomRouteSeed(${0:Vehicle car, int routeSeed})"
        ],
        "prefix": "setCarRandomRouteSeed",
        "scope": "lua"
    },
    "locateCharOnFootObject2d": {
        "description": "locateCharOnFootObject2d",
        "body": [
            "locateCharOnFootObject2d(${0:Ped ped, Object object, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCharOnFootObject2d",
        "scope": "lua"
    },
    "getCityFromCoords": {
        "description": "getCityFromCoords",
        "body": [
            "getCityFromCoords(${0:float X, float Y, float Z})"
        ],
        "prefix": "getCityFromCoords",
        "scope": "lua"
    },
    "displayRadar": {
        "description": "displayRadar",
        "body": [
            "displayRadar(${0:bool enable})"
        ],
        "prefix": "displayRadar",
        "scope": "lua"
    },
    "setCharCoordinatesDontWarpGangNoOffset": {
        "description": "setCharCoordinatesDontWarpGangNoOffset",
        "body": [
            "setCharCoordinatesDontWarpGangNoOffset(${0:Ped ped, float atX, float atY, float atZ})"
        ],
        "prefix": "setCharCoordinatesDontWarpGangNoOffset",
        "scope": "lua"
    },
    "setZonePopulationType": {
        "description": "setZonePopulationType",
        "body": [
            "setZonePopulationType(${0:GxtString zone, int popcycle})"
        ],
        "prefix": "setZonePopulationType",
        "scope": "lua"
    },
    "getGroupSize": {
        "description": "getGroupSize",
        "body": [
            "getGroupSize(${0:int group})"
        ],
        "prefix": "getGroupSize",
        "scope": "lua"
    },
    "noSpecialCameraForThisGarage": {
        "description": "noSpecialCameraForThisGarage",
        "body": [
            "noSpecialCameraForThisGarage(${0:int int1})"
        ],
        "prefix": "noSpecialCameraForThisGarage",
        "scope": "lua"
    },
    "taskSmartFleePoint": {
        "description": "taskSmartFleePoint",
        "body": [
            "taskSmartFleePoint(${0:Ped ped, float fromX, float fromY, float fromZ, float stopAtRadius, int timelimit})"
        ],
        "prefix": "taskSmartFleePoint",
        "scope": "lua"
    },
    "copySharedCharDecisionMaker": {
        "description": "copySharedCharDecisionMaker",
        "body": [
            "copySharedCharDecisionMaker(${0:int from})"
        ],
        "prefix": "copySharedCharDecisionMaker",
        "scope": "lua"
    },
    "printHelpForever": {
        "description": "printHelpForever",
        "body": [
            "printHelpForever(${0:GxtString text})"
        ],
        "prefix": "printHelpForever",
        "scope": "lua"
    },
    "getMaxWantedLevel": {
        "description": "getMaxWantedLevel",
        "body": [
            "getMaxWantedLevel()"
        ],
        "prefix": "getMaxWantedLevel",
        "scope": "lua"
    },
    "setCharIsTargetPriority": {
        "description": "setCharIsTargetPriority",
        "body": [
            "setCharIsTargetPriority(${0:Ped ped, bool targetPriority})"
        ],
        "prefix": "setCharIsTargetPriority",
        "scope": "lua"
    },
    "setGroupMember": {
        "description": "setGroupMember",
        "body": [
            "setGroupMember(${0:int group, Ped ped})"
        ],
        "prefix": "setGroupMember",
        "scope": "lua"
    },
    "shuffleCardDecks": {
        "description": "shuffleCardDecks",
        "body": [
            "shuffleCardDecks(${0:bool shuffle})"
        ],
        "prefix": "shuffleCardDecks",
        "scope": "lua"
    },
    "isPlayerPerformingWheelie": {
        "description": "isPlayerPerformingWheelie",
        "body": [
            "isPlayerPerformingWheelie(${0:Player player})"
        ],
        "prefix": "isPlayerPerformingWheelie",
        "scope": "lua"
    },
    "decrementIntStat": {
        "description": "decrementIntStat",
        "body": [
            "decrementIntStat(${0:int stat, int int})"
        ],
        "prefix": "decrementIntStat",
        "scope": "lua"
    },
    "closeSequenceTask": {
        "description": "closeSequenceTask",
        "body": [
            "closeSequenceTask(${0:int task})"
        ],
        "prefix": "closeSequenceTask",
        "scope": "lua"
    },
    "startPlaybackRecordedCarLooped": {
        "description": "startPlaybackRecordedCarLooped",
        "body": [
            "startPlaybackRecordedCarLooped(${0:Vehicle car, int path})"
        ],
        "prefix": "startPlaybackRecordedCarLooped",
        "scope": "lua"
    },
    "setTimeOneDayForward": {
        "description": "setTimeOneDayForward",
        "body": [
            "setTimeOneDayForward()"
        ],
        "prefix": "setTimeOneDayForward",
        "scope": "lua"
    },
    "incrementFloatStatNoMessage": {
        "description": "incrementFloatStatNoMessage",
        "body": [
            "incrementFloatStatNoMessage(${0:int stat, float value})"
        ],
        "prefix": "incrementFloatStatNoMessage",
        "scope": "lua"
    },
    "setCharAnimPlayingFlag": {
        "description": "setCharAnimPlayingFlag",
        "body": [
            "setCharAnimPlayingFlag(${0:Ped ped, string animation, bool flag})"
        ],
        "prefix": "setCharAnimPlayingFlag",
        "scope": "lua"
    },
    "getModelDimensions": {
        "description": "getModelDimensions",
        "body": [
            "getModelDimensions(${0:Model modelId})"
        ],
        "prefix": "getModelDimensions",
        "scope": "lua"
    },
    "playerEnteredLasVegasCrane": {
        "description": "playerEnteredLasVegasCrane",
        "body": [
            "playerEnteredLasVegasCrane()"
        ],
        "prefix": "playerEnteredLasVegasCrane",
        "scope": "lua"
    },
    "setPlayerCanDoDriveBy": {
        "description": "setPlayerCanDoDriveBy",
        "body": [
            "setPlayerCanDoDriveBy(${0:Player player, bool mode})"
        ],
        "prefix": "setPlayerCanDoDriveBy",
        "scope": "lua"
    },
    "sampGetKillInfoPtr": {
        "description": "sampGetKillInfoPtr",
        "body": [
            "sampGetKillInfoPtr()"
        ],
        "prefix": "sampGetKillInfoPtr",
        "scope": "lua"
    },
    "createProtectionPickup": {
        "description": "createProtectionPickup",
        "body": [
            "createProtectionPickup(${0:float atX, float atY, float atZ, int int4, int int5})"
        ],
        "prefix": "createProtectionPickup",
        "scope": "lua"
    },
    "taskPickUpSecondObject": {
        "description": "taskPickUpSecondObject",
        "body": [
            "taskPickUpSecondObject(${0:Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int bone, int int7, string animation, string file, int time})"
        ],
        "prefix": "taskPickUpSecondObject",
        "scope": "lua"
    },
    "addToCarRotationVelocity": {
        "description": "addToCarRotationVelocity",
        "body": [
            "addToCarRotationVelocity(${0:Vehicle car, float vecX, float vecY, float vecZ})"
        ],
        "prefix": "addToCarRotationVelocity",
        "scope": "lua"
    },
    "startCharFire": {
        "description": "startCharFire",
        "body": [
            "startCharFire(${0:Ped ped})"
        ],
        "prefix": "startCharFire",
        "scope": "lua"
    },
    "getLoadedShop": {
        "description": "getLoadedShop",
        "body": [
            "getLoadedShop()"
        ],
        "prefix": "getLoadedShop",
        "scope": "lua"
    },
    "removeCharElegantly": {
        "description": "removeCharElegantly",
        "body": [
            "removeCharElegantly(${0:Ped ped})"
        ],
        "prefix": "removeCharElegantly",
        "scope": "lua"
    },
    "getLevelDesignCoordsForObject": {
        "description": "getLevelDesignCoordsForObject",
        "body": [
            "getLevelDesignCoordsForObject(${0:Object object, int spoot})"
        ],
        "prefix": "getLevelDesignCoordsForObject",
        "scope": "lua"
    },
    "setExtraPoliceStationRestartPoint": {
        "description": "setExtraPoliceStationRestartPoint",
        "body": [
            "setExtraPoliceStationRestartPoint(${0:float X, float Y, float Z, float radius, float angle})"
        ],
        "prefix": "setExtraPoliceStationRestartPoint",
        "scope": "lua"
    },
    "locateCharInCar3d": {
        "description": "locateCharInCar3d",
        "body": [
            "locateCharInCar3d(${0:Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateCharInCar3d",
        "scope": "lua"
    },
    "shutCharUp": {
        "description": "shutCharUp",
        "body": [
            "shutCharUp(${0:Ped ped, bool muted})"
        ],
        "prefix": "shutCharUp",
        "scope": "lua"
    },
    "isCharAttachedToAnyCar": {
        "description": "isCharAttachedToAnyCar",
        "body": [
            "isCharAttachedToAnyCar(${0:Ped ped})"
        ],
        "prefix": "isCharAttachedToAnyCar",
        "scope": "lua"
    },
    "createMenuGrid": {
        "description": "createMenuGrid",
        "body": [
            "createMenuGrid(${0:GxtString gxtString, int positionX, int positionY, float width, int columns, bool interactive, bool background, int alignment})"
        ],
        "prefix": "createMenuGrid",
        "scope": "lua"
    },
    "storeClothesState": {
        "description": "storeClothesState",
        "body": [
            "storeClothesState()"
        ],
        "prefix": "storeClothesState",
        "scope": "lua"
    },
    "pausePlaybackRecordedCar": {
        "description": "pausePlaybackRecordedCar",
        "body": [
            "pausePlaybackRecordedCar(${0:Vehicle car})"
        ],
        "prefix": "pausePlaybackRecordedCar",
        "scope": "lua"
    },
    "locateCharAnyMeansChar3d": {
        "description": "locateCharAnyMeansChar3d",
        "body": [
            "locateCharAnyMeansChar3d(${0:Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateCharAnyMeansChar3d",
        "scope": "lua"
    },
    "setCharSayContext": {
        "description": "setCharSayContext",
        "body": [
            "setCharSayContext(${0:Ped ped, int speech})"
        ],
        "prefix": "setCharSayContext",
        "scope": "lua"
    },
    "locateCharInCarObject2d": {
        "description": "locateCharInCarObject2d",
        "body": [
            "locateCharInCarObject2d(${0:Ped ped, Object object, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCharInCarObject2d",
        "scope": "lua"
    },
    "isPlayerInShortcutTaxi": {
        "description": "isPlayerInShortcutTaxi",
        "body": [
            "isPlayerInShortcutTaxi(${0:Player player})"
        ],
        "prefix": "isPlayerInShortcutTaxi",
        "scope": "lua"
    },
    "setObjectAnimSpeed": {
        "description": "setObjectAnimSpeed",
        "body": [
            "setObjectAnimSpeed(${0:Object object, string animation, float speed})"
        ],
        "prefix": "setObjectAnimSpeed",
        "scope": "lua"
    },
    "pointSearchlightAtVehicle": {
        "description": "pointSearchlightAtVehicle",
        "body": [
            "pointSearchlightAtVehicle(${0:Searchlight searchlight, Vehicle car, float speed})"
        ],
        "prefix": "pointSearchlightAtVehicle",
        "scope": "lua"
    },
    "setGroupLeader": {
        "description": "setGroupLeader",
        "body": [
            "setGroupLeader(${0:int group, Ped ped})"
        ],
        "prefix": "setGroupLeader",
        "scope": "lua"
    },
    "streamScript": {
        "description": "streamScript",
        "body": [
            "streamScript(${0:int script})"
        ],
        "prefix": "streamScript",
        "scope": "lua"
    },
    "isCharInAnySearchlight": {
        "description": "isCharInAnySearchlight",
        "body": [
            "isCharInAnySearchlight(${0:Ped ped})"
        ],
        "prefix": "isCharInAnySearchlight",
        "scope": "lua"
    },
    "switchOnGroundSearchlight": {
        "description": "switchOnGroundSearchlight",
        "body": [
            "switchOnGroundSearchlight(${0:Searchlight searchlight, bool lightsThroughObstacles})"
        ],
        "prefix": "switchOnGroundSearchlight",
        "scope": "lua"
    },
    "getCarBlockingCar": {
        "description": "getCarBlockingCar",
        "body": [
            "getCarBlockingCar(${0:Vehicle car})"
        ],
        "prefix": "getCarBlockingCar",
        "scope": "lua"
    },
    "vehicleCanBeTargettedByHsMissile": {
        "description": "vehicleCanBeTargettedByHsMissile",
        "body": [
            "vehicleCanBeTargettedByHsMissile(${0:Vehicle car, bool targetable})"
        ],
        "prefix": "vehicleCanBeTargettedByHsMissile",
        "scope": "lua"
    },
    "locateCharOnFootCar2d": {
        "description": "locateCharOnFootCar2d",
        "body": [
            "locateCharOnFootCar2d(${0:Ped ped, Vehicle car, float radiusX, float radiusY, bool flag})"
        ],
        "prefix": "locateCharOnFootCar2d",
        "scope": "lua"
    },
    "cameraResetNewScriptables": {
        "description": "cameraResetNewScriptables",
        "body": [
            "cameraResetNewScriptables()"
        ],
        "prefix": "cameraResetNewScriptables",
        "scope": "lua"
    },
    "taskSetCharDecisionMaker": {
        "description": "taskSetCharDecisionMaker",
        "body": [
            "taskSetCharDecisionMaker(${0:Ped ped, int maker})"
        ],
        "prefix": "taskSetCharDecisionMaker",
        "scope": "lua"
    },
    "setCreateRandomGangMembers": {
        "description": "setCreateRandomGangMembers",
        "body": [
            "setCreateRandomGangMembers(${0:bool enable})"
        ],
        "prefix": "setCreateRandomGangMembers",
        "scope": "lua"
    },
    "setCanBurstCarTires": {
        "description": "setCanBurstCarTires",
        "body": [
            "setCanBurstCarTires(${0:Vehicle car, bool vulnerability})"
        ],
        "prefix": "setCanBurstCarTires",
        "scope": "lua"
    },
    "taskAchieveHeading": {
        "description": "taskAchieveHeading",
        "body": [
            "taskAchieveHeading(${0:Ped ped, float angle})"
        ],
        "prefix": "taskAchieveHeading",
        "scope": "lua"
    },
    "createEmergencyServicesCar": {
        "description": "createEmergencyServicesCar",
        "body": [
            "createEmergencyServicesCar(${0:Model car, float X, float Y, float Z})"
        ],
        "prefix": "createEmergencyServicesCar",
        "scope": "lua"
    },
    "isCharTalking": {
        "description": "isCharTalking",
        "body": [
            "isCharTalking(${0:Ped ped})"
        ],
        "prefix": "isCharTalking",
        "scope": "lua"
    },
    "taskUseAttractor": {
        "description": "taskUseAttractor",
        "body": [
            "taskUseAttractor(${0:Ped ped, int attractor})"
        ],
        "prefix": "taskUseAttractor",
        "scope": "lua"
    },
    "doesSearchlightExist": {
        "description": "doesSearchlightExist",
        "body": [
            "doesSearchlightExist(${0:Searchlight searchlight})"
        ],
        "prefix": "doesSearchlightExist",
        "scope": "lua"
    },
    "displayOnscreenTimerWithString": {
        "description": "displayOnscreenTimerWithString",
        "body": [
            "displayOnscreenTimerWithString(${0:VarId timer, int type, GxtString gxtString})"
        ],
        "prefix": "displayOnscreenTimerWithString",
        "scope": "lua"
    },
    "getActiveCameraCoordinates": {
        "description": "getActiveCameraCoordinates",
        "body": [
            "getActiveCameraCoordinates()"
        ],
        "prefix": "getActiveCameraCoordinates",
        "scope": "lua"
    },
    "registerAttractorScriptBrainForCodeUse": {
        "description": "registerAttractorScriptBrainForCodeUse",
        "body": [
            "registerAttractorScriptBrainForCodeUse(${0:int handle, GxtString script})"
        ],
        "prefix": "registerAttractorScriptBrainForCodeUse",
        "scope": "lua"
    },
    "getCarForwardY": {
        "description": "getCarForwardY",
        "body": [
            "getCarForwardY(${0:Vehicle car})"
        ],
        "prefix": "getCarForwardY",
        "scope": "lua"
    },
    "findMaxNumberOfGroupMembers": {
        "description": "findMaxNumberOfGroupMembers",
        "body": [
            "findMaxNumberOfGroupMembers()"
        ],
        "prefix": "findMaxNumberOfGroupMembers",
        "scope": "lua"
    },
    "deleteAllTrains": {
        "description": "deleteAllTrains",
        "body": [
            "deleteAllTrains()"
        ],
        "prefix": "deleteAllTrains",
        "scope": "lua"
    },
    "locateCharInCarChar3d": {
        "description": "locateCharInCarChar3d",
        "body": [
            "locateCharInCarChar3d(${0:Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateCharInCarChar3d",
        "scope": "lua"
    },
    "setPlayerInCarCameraMode": {
        "description": "setPlayerInCarCameraMode",
        "body": [
            "setPlayerInCarCameraMode(${0:int mode})"
        ],
        "prefix": "setPlayerInCarCameraMode",
        "scope": "lua"
    },
    "taskWarpCharIntoCarAsDriver": {
        "description": "taskWarpCharIntoCarAsDriver",
        "body": [
            "taskWarpCharIntoCarAsDriver(${0:Ped ped, Vehicle car})"
        ],
        "prefix": "taskWarpCharIntoCarAsDriver",
        "scope": "lua"
    },
    "activateInteriorPeds": {
        "description": "activateInteriorPeds",
        "body": [
            "activateInteriorPeds(${0:bool activate})"
        ],
        "prefix": "activateInteriorPeds",
        "scope": "lua"
    },
    "isCarUpright": {
        "description": "isCarUpright",
        "body": [
            "isCarUpright(${0:Vehicle car})"
        ],
        "prefix": "isCarUpright",
        "scope": "lua"
    },
    "sampRequestClass": {
        "description": "sampRequestClass",
        "body": [
            "sampRequestClass(${0:int class})"
        ],
        "prefix": "sampRequestClass",
        "scope": "lua"
    },
    "createGroup": {
        "description": "createGroup",
        "body": [
            "createGroup(${0:int type})"
        ],
        "prefix": "createGroup",
        "scope": "lua"
    },
    "setCarDensityMultiplier": {
        "description": "setCarDensityMultiplier",
        "body": [
            "setCarDensityMultiplier(${0:float multiplier})"
        ],
        "prefix": "setCarDensityMultiplier",
        "scope": "lua"
    },
    "setCharDecisionMaker": {
        "description": "setCharDecisionMaker",
        "body": [
            "setCharDecisionMaker(${0:Ped ped, int maker})"
        ],
        "prefix": "setCharDecisionMaker",
        "scope": "lua"
    },
    "getClosestCharNode": {
        "description": "getClosestCharNode",
        "body": [
            "getClosestCharNode(${0:float closestToX, float closestToY, float closestToZ})"
        ],
        "prefix": "getClosestCharNode",
        "scope": "lua"
    },
    "taskLeaveCarImmediately": {
        "description": "taskLeaveCarImmediately",
        "body": [
            "taskLeaveCarImmediately(${0:Ped ped, Vehicle car})"
        ],
        "prefix": "taskLeaveCarImmediately",
        "scope": "lua"
    },
    "setCarCanBeVisiblyDamaged": {
        "description": "setCarCanBeVisiblyDamaged",
        "body": [
            "setCarCanBeVisiblyDamaged(${0:Vehicle car, bool can})"
        ],
        "prefix": "setCarCanBeVisiblyDamaged",
        "scope": "lua"
    },
    "loadPrices": {
        "description": "loadPrices",
        "body": [
            "loadPrices(${0:GxtString shopping})"
        ],
        "prefix": "loadPrices",
        "scope": "lua"
    },
    "getNameOfEntryExitCharUsed": {
        "description": "getNameOfEntryExitCharUsed",
        "body": [
            "getNameOfEntryExitCharUsed(${0:Ped ped})"
        ],
        "prefix": "getNameOfEntryExitCharUsed",
        "scope": "lua"
    },
    "clearExtraColours": {
        "description": "clearExtraColours",
        "body": [
            "clearExtraColours(${0:bool fade})"
        ],
        "prefix": "clearExtraColours",
        "scope": "lua"
    },
    "setDeatharrestState": {
        "description": "setDeatharrestState",
        "body": [
            "setDeatharrestState(${0:bool value})"
        ],
        "prefix": "setDeatharrestState",
        "scope": "lua"
    },
    "setTwoPlayerCameraMode": {
        "description": "setTwoPlayerCameraMode",
        "body": [
            "setTwoPlayerCameraMode(${0:bool mode})"
        ],
        "prefix": "setTwoPlayerCameraMode",
        "scope": "lua"
    },
    "locateStoppedCharOnFoot3d": {
        "description": "locateStoppedCharOnFoot3d",
        "body": [
            "locateStoppedCharOnFoot3d(${0:Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateStoppedCharOnFoot3d",
        "scope": "lua"
    },
    "isObjectStatic": {
        "description": "isObjectStatic",
        "body": [
            "isObjectStatic(${0:Object object})"
        ],
        "prefix": "isObjectStatic",
        "scope": "lua"
    },
    "addGroupDecisionMakerEventResponse": {
        "description": "addGroupDecisionMakerEventResponse",
        "body": [
            "addGroupDecisionMakerEventResponse(${0:int maker, int event, int taskID, float respect, float hate, float like, float dislike, bool inCar, bool onFoot})"
        ],
        "prefix": "addGroupDecisionMakerEventResponse",
        "scope": "lua"
    },
    "giveRemoteControlledModelToPlayer": {
        "description": "giveRemoteControlledModelToPlayer",
        "body": [
            "giveRemoteControlledModelToPlayer(${0:Player player, float atX, float atY, float atZ, float angle, Model RCModel})"
        ],
        "prefix": "giveRemoteControlledModelToPlayer",
        "scope": "lua"
    },
    "createForsalePropertyPickup": {
        "description": "createForsalePropertyPickup",
        "body": [
            "createForsalePropertyPickup(${0:float pX, float pY, float pZ, int price, GxtString gxtString})"
        ],
        "prefix": "createForsalePropertyPickup",
        "scope": "lua"
    },
    "dropObject": {
        "description": "dropObject",
        "body": [
            "dropObject(${0:Ped ped, bool object})"
        ],
        "prefix": "dropObject",
        "scope": "lua"
    },
    "isCharStoppedInAngledAreaOnFoot3d": {
        "description": "isCharStoppedInAngledAreaOnFoot3d",
        "body": [
            "isCharStoppedInAngledAreaOnFoot3d(${0:Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag})"
        ],
        "prefix": "isCharStoppedInAngledAreaOnFoot3d",
        "scope": "lua"
    },
    "addShortRangeSpriteBlipForContactPoint": {
        "description": "addShortRangeSpriteBlipForContactPoint",
        "body": [
            "addShortRangeSpriteBlipForContactPoint(${0:float pX, float pY, float pZ, int icon})"
        ],
        "prefix": "addShortRangeSpriteBlipForContactPoint",
        "scope": "lua"
    },
    "getZoneDealerStrength": {
        "description": "getZoneDealerStrength",
        "body": [
            "getZoneDealerStrength(${0:GxtString zone})"
        ],
        "prefix": "getZoneDealerStrength",
        "scope": "lua"
    },
    "taskFollowFootsteps": {
        "description": "taskFollowFootsteps",
        "body": [
            "taskFollowFootsteps(${0:Ped ped, int followActor})"
        ],
        "prefix": "taskFollowFootsteps",
        "scope": "lua"
    },
    "setCharRelationship": {
        "description": "setCharRelationship",
        "body": [
            "setCharRelationship(${0:Ped ped, int acquaintance, int pedtype})"
        ],
        "prefix": "setCharRelationship",
        "scope": "lua"
    },
    "taskCower": {
        "description": "taskCower",
        "body": [
            "taskCower(${0:Ped ped})"
        ],
        "prefix": "taskCower",
        "scope": "lua"
    },
    "getPlaneUndercarriagePosition": {
        "description": "getPlaneUndercarriagePosition",
        "body": [
            "getPlaneUndercarriagePosition(${0:int plane})"
        ],
        "prefix": "getPlaneUndercarriagePosition",
        "scope": "lua"
    },
    "skipToNextAllowedStation": {
        "description": "skipToNextAllowedStation",
        "body": [
            "skipToNextAllowedStation(${0:Vehicle train})"
        ],
        "prefix": "skipToNextAllowedStation",
        "scope": "lua"
    },
    "setZoneNoCops": {
        "description": "setZoneNoCops",
        "body": [
            "setZoneNoCops(${0:GxtString zone, bool disableCops})"
        ],
        "prefix": "setZoneNoCops",
        "scope": "lua"
    },
    "setZoneDealerStrength": {
        "description": "setZoneDealerStrength",
        "body": [
            "setZoneDealerStrength(${0:GxtString zone, int density})"
        ],
        "prefix": "setZoneDealerStrength",
        "scope": "lua"
    },
    "setGunshotSenseRangeForRiot2": {
        "description": "setGunshotSenseRangeForRiot2",
        "body": [
            "setGunshotSenseRangeForRiot2(${0:float range})"
        ],
        "prefix": "setGunshotSenseRangeForRiot2",
        "scope": "lua"
    },
    "slideObject": {
        "description": "slideObject",
        "body": [
            "slideObject(${0:Object object, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, bool collisionCheck})"
        ],
        "prefix": "slideObject",
        "scope": "lua"
    },
    "forceBigMessageAndCounter": {
        "description": "forceBigMessageAndCounter",
        "body": [
            "forceBigMessageAndCounter(${0:bool stayOnScreen})"
        ],
        "prefix": "forceBigMessageAndCounter",
        "scope": "lua"
    },
    "isGroupLeader": {
        "description": "isGroupLeader",
        "body": [
            "isGroupLeader(${0:Ped ped, int group})"
        ],
        "prefix": "isGroupLeader",
        "scope": "lua"
    },
    "setCarEscortCarFront": {
        "description": "setCarEscortCarFront",
        "body": [
            "setCarEscortCarFront(${0:Vehicle car, Vehicle followCar})"
        ],
        "prefix": "setCarEscortCarFront",
        "scope": "lua"
    },
    "clearMissionAudio": {
        "description": "clearMissionAudio",
        "body": [
            "clearMissionAudio(${0:int id})"
        ],
        "prefix": "clearMissionAudio",
        "scope": "lua"
    },
    "enableCharSpeech": {
        "description": "enableCharSpeech",
        "body": [
            "enableCharSpeech(${0:Ped ped})"
        ],
        "prefix": "enableCharSpeech",
        "scope": "lua"
    },
    "memory.protect": {
        "description": "memory.protect",
        "body": [
            "memory.protect(${0:uint address, uint size, int newProtection})"
        ],
        "prefix": "memory.protect",
        "scope": "lua"
    },
    "taskTogglePedThreatScanner": {
        "description": "taskTogglePedThreatScanner",
        "body": [
            "taskTogglePedThreatScanner(${0:Ped ped, bool unknownFlag1, bool unknownFlag2, bool unknownFlag3})"
        ],
        "prefix": "taskTogglePedThreatScanner",
        "scope": "lua"
    },
    "setCanResprayCar": {
        "description": "setCanResprayCar",
        "body": [
            "setCanResprayCar(${0:Vehicle car, bool sprayable})"
        ],
        "prefix": "setCanResprayCar",
        "scope": "lua"
    },
    "setMenuItemWithNumber": {
        "description": "setMenuItemWithNumber",
        "body": [
            "setMenuItemWithNumber(${0:int panel, int column, int row, GxtString gxtString, int number})"
        ],
        "prefix": "setMenuItemWithNumber",
        "scope": "lua"
    },
    "drawLightWithRange": {
        "description": "drawLightWithRange",
        "body": [
            "drawLightWithRange(${0:float atX, float atY, float atZ, int r, int g, int b, float radius})"
        ],
        "prefix": "drawLightWithRange",
        "scope": "lua"
    },
    "setCollectable1Total": {
        "description": "setCollectable1Total",
        "body": [
            "setCollectable1Total(${0:int total})"
        ],
        "prefix": "setCollectable1Total",
        "scope": "lua"
    },
    "taskWarpCharIntoCarAsPassenger": {
        "description": "taskWarpCharIntoCarAsPassenger",
        "body": [
            "taskWarpCharIntoCarAsPassenger(${0:Ped ped, Vehicle car, int passengerseat})"
        ],
        "prefix": "taskWarpCharIntoCarAsPassenger",
        "scope": "lua"
    },
    "initZonePopulationSettings": {
        "description": "initZonePopulationSettings",
        "body": [
            "initZonePopulationSettings()"
        ],
        "prefix": "initZonePopulationSettings",
        "scope": "lua"
    },
    "dxutSetCheckboxColor": {
        "description": "dxutSetCheckboxColor",
        "body": [
            "dxutSetCheckboxColor(${0:DxutDialog dialog, int id, uint color})"
        ],
        "prefix": "dxutSetCheckboxColor",
        "scope": "lua"
    },
    "fixCarPanel": {
        "description": "fixCarPanel",
        "body": [
            "fixCarPanel(${0:Vehicle car, int componentB})"
        ],
        "prefix": "fixCarPanel",
        "scope": "lua"
    },
    "setTextWrapx": {
        "description": "setTextWrapx",
        "body": [
            "setTextWrapx(${0:float linewidth})"
        ],
        "prefix": "setTextWrapx",
        "scope": "lua"
    },
    "createMoneyPickup": {
        "description": "createMoneyPickup",
        "body": [
            "createMoneyPickup(${0:float atX, float atY, float atZ, int cash, bool permanenceFlag})"
        ],
        "prefix": "createMoneyPickup",
        "scope": "lua"
    },
    "getRemoteControlledCar": {
        "description": "getRemoteControlledCar",
        "body": [
            "getRemoteControlledCar(${0:Player player})"
        ],
        "prefix": "getRemoteControlledCar",
        "scope": "lua"
    },
    "taskLeaveAnyCar": {
        "description": "taskLeaveAnyCar",
        "body": [
            "taskLeaveAnyCar(${0:Ped ped})"
        ],
        "prefix": "taskLeaveAnyCar",
        "scope": "lua"
    },
    "lua_thread.create": {
        "description": "lua_thread.create",
        "body": [
            "lua_thread.create(${0:function func, ...})"
        ],
        "prefix": "lua_thread.create",
        "scope": "lua"
    },
    "hasPlayerBoughtItem": {
        "description": "hasPlayerBoughtItem",
        "body": [
            "hasPlayerBoughtItem(${0:int item})"
        ],
        "prefix": "hasPlayerBoughtItem",
        "scope": "lua"
    },
    "playFxSystem": {
        "description": "playFxSystem",
        "body": [
            "playFxSystem(${0:Particle particle})"
        ],
        "prefix": "playFxSystem",
        "scope": "lua"
    },
    "isCarDoorFullyOpen": {
        "description": "isCarDoorFullyOpen",
        "body": [
            "isCarDoorFullyOpen(${0:Vehicle car, int door})"
        ],
        "prefix": "isCarDoorFullyOpen",
        "scope": "lua"
    },
    "dxutGetListboxItemTextAndData": {
        "description": "dxutGetListboxItemTextAndData",
        "body": [
            "dxutGetListboxItemTextAndData(${0:DxutDialog dialog, int id, int element})"
        ],
        "prefix": "dxutGetListboxItemTextAndData",
        "scope": "lua"
    },
    "memory.strptr": {
        "description": "memory.strptr",
        "body": [
            "memory.strptr(${0:string str})"
        ],
        "prefix": "memory.strptr",
        "scope": "lua"
    },
    "setUpConversationEndNodeWithScriptedSpeech": {
        "description": "setUpConversationEndNodeWithScriptedSpeech",
        "body": [
            "setUpConversationEndNodeWithScriptedSpeech(${0:GxtString dialogueGxt, int wav})"
        ],
        "prefix": "setUpConversationEndNodeWithScriptedSpeech",
        "scope": "lua"
    },
    "setIntStat": {
        "description": "setIntStat",
        "body": [
            "setIntStat(${0:int stat, int int})"
        ],
        "prefix": "setIntStat",
        "scope": "lua"
    },
    "rotateObject": {
        "description": "rotateObject",
        "body": [
            "rotateObject(${0:Object object, float fromAngle, float toAngle, bool flag})"
        ],
        "prefix": "rotateObject",
        "scope": "lua"
    },
    "memory.fill": {
        "description": "memory.fill",
        "body": [
            "memory.fill(${0:uint address, int value, uint size, [bool unprotect=false]})"
        ],
        "prefix": "memory.fill",
        "scope": "lua"
    },
    "memory.hex2bin": {
        "description": "memory.hex2bin",
        "body": [
            "memory.hex2bin(${0:string hex})"
        ],
        "prefix": "memory.hex2bin",
        "scope": "lua"
    },
    "getIntStat": {
        "description": "getIntStat",
        "body": [
            "getIntStat(${0:int stat})"
        ],
        "prefix": "getIntStat",
        "scope": "lua"
    },
    "dxutSetControlText": {
        "description": "dxutSetControlText",
        "body": [
            "dxutSetControlText(${0:DxutDialog dialog, int id, zstring text})"
        ],
        "prefix": "dxutSetControlText",
        "scope": "lua"
    },
    "deletePlayer": {
        "description": "deletePlayer",
        "body": [
            "deletePlayer(${0:Player player})"
        ],
        "prefix": "deletePlayer",
        "scope": "lua"
    },
    "sampFindAnimationIdByNameAndFile": {
        "description": "sampFindAnimationIdByNameAndFile",
        "body": [
            "sampFindAnimationIdByNameAndFile(${0:zstring name, zstring file})"
        ],
        "prefix": "sampFindAnimationIdByNameAndFile",
        "scope": "lua"
    },
    "awardPlayerMissionRespect": {
        "description": "awardPlayerMissionRespect",
        "body": [
            "awardPlayerMissionRespect(${0:int respect})"
        ],
        "prefix": "awardPlayerMissionRespect",
        "scope": "lua"
    },
    "setObjectDrawLast": {
        "description": "setObjectDrawLast",
        "body": [
            "setObjectDrawLast(${0:Object object, bool drawLast})"
        ],
        "prefix": "setObjectDrawLast",
        "scope": "lua"
    },
    "releasePathNodes": {
        "description": "releasePathNodes",
        "body": [
            "releasePathNodes()"
        ],
        "prefix": "releasePathNodes",
        "scope": "lua"
    },
    "memory.getdouble": {
        "description": "memory.getdouble",
        "body": [
            "memory.getdouble(${0:uint address, [bool unprotect=false]})"
        ],
        "prefix": "memory.getdouble",
        "scope": "lua"
    },
    "registerMissionGiven": {
        "description": "registerMissionGiven",
        "body": [
            "registerMissionGiven()"
        ],
        "prefix": "registerMissionGiven",
        "scope": "lua"
    },
    "isCharStoppedInAngledArea2d": {
        "description": "isCharStoppedInAngledArea2d",
        "body": [
            "isCharStoppedInAngledArea2d(${0:Ped ped, float x1, float y1, float x2, float y2, float height, bool flag})"
        ],
        "prefix": "isCharStoppedInAngledArea2d",
        "scope": "lua"
    },
    "memory.getfloat": {
        "description": "memory.getfloat",
        "body": [
            "memory.getfloat(${0:uint address, [bool unprotect=false]})"
        ],
        "prefix": "memory.getfloat",
        "scope": "lua"
    },
    "getNumAvailablePaintjobs": {
        "description": "getNumAvailablePaintjobs",
        "body": [
            "getNumAvailablePaintjobs(${0:Vehicle car})"
        ],
        "prefix": "getNumAvailablePaintjobs",
        "scope": "lua"
    },
    "memory.getuint64": {
        "description": "memory.getuint64",
        "body": [
            "memory.getuint64(${0:uint address, [bool unprotect=false]})"
        ],
        "prefix": "memory.getuint64",
        "scope": "lua"
    },
    "syncWater": {
        "description": "syncWater",
        "body": [
            "syncWater()"
        ],
        "prefix": "syncWater",
        "scope": "lua"
    },
    "memory.getuint32": {
        "description": "memory.getuint32",
        "body": [
            "memory.getuint32(${0:uint address, [bool unprotect=false]})"
        ],
        "prefix": "memory.getuint32",
        "scope": "lua"
    },
    "memory.setuint16": {
        "description": "memory.setuint16",
        "body": [
            "memory.setuint16(${0:uint address, int word, [bool unprotect=false]})"
        ],
        "prefix": "memory.setuint16",
        "scope": "lua"
    },
    "convertMetresToFeetInt": {
        "description": "convertMetresToFeetInt",
        "body": [
            "convertMetresToFeetInt(${0:int metric})"
        ],
        "prefix": "convertMetresToFeetInt",
        "scope": "lua"
    },
    "memory.setuint8": {
        "description": "memory.setuint8",
        "body": [
            "memory.setuint8(${0:uint address, int byte, [bool unprotect=false]})"
        ],
        "prefix": "memory.setuint8",
        "scope": "lua"
    },
    "isHelpMessageBeingDisplayed": {
        "description": "isHelpMessageBeingDisplayed",
        "body": [
            "isHelpMessageBeingDisplayed()"
        ],
        "prefix": "isHelpMessageBeingDisplayed",
        "scope": "lua"
    },
    "memory.getuint8": {
        "description": "memory.getuint8",
        "body": [
            "memory.getuint8(${0:uint address, [bool unprotect=false]})"
        ],
        "prefix": "memory.getuint8",
        "scope": "lua"
    },
    "increasePlayerMaxHealth": {
        "description": "increasePlayerMaxHealth",
        "body": [
            "increasePlayerMaxHealth(${0:Player player, int increase})"
        ],
        "prefix": "increasePlayerMaxHealth",
        "scope": "lua"
    },
    "openGarage": {
        "description": "openGarage",
        "body": [
            "openGarage(${0:GxtString garage})"
        ],
        "prefix": "openGarage",
        "scope": "lua"
    },
    "getCharSwimState": {
        "description": "getCharSwimState",
        "body": [
            "getCharSwimState(${0:Ped ped})"
        ],
        "prefix": "getCharSwimState",
        "scope": "lua"
    },
    "setObjectAnimCurrentTime": {
        "description": "setObjectAnimCurrentTime",
        "body": [
            "setObjectAnimCurrentTime(${0:Object object, string animation, float progress})"
        ],
        "prefix": "setObjectAnimCurrentTime",
        "scope": "lua"
    },
    "swapNearestBuildingModel": {
        "description": "swapNearestBuildingModel",
        "body": [
            "swapNearestBuildingModel(${0:float atX, float atY, float atZ, float radius, Model from, Model to})"
        ],
        "prefix": "swapNearestBuildingModel",
        "scope": "lua"
    },
    "memory.getint32": {
        "description": "memory.getint32",
        "body": [
            "memory.getint32(${0:uint address, [bool unprotect=false]})"
        ],
        "prefix": "memory.getint32",
        "scope": "lua"
    },
    "memory.setint16": {
        "description": "memory.setint16",
        "body": [
            "memory.setint16(${0:uint address, int word, [bool unprotect=false]})"
        ],
        "prefix": "memory.setint16",
        "scope": "lua"
    },
    "isCharInFlyingVehicle": {
        "description": "isCharInFlyingVehicle",
        "body": [
            "isCharInFlyingVehicle(${0:Ped ped})"
        ],
        "prefix": "isCharInFlyingVehicle",
        "scope": "lua"
    },
    "setPlayerDuckButton": {
        "description": "setPlayerDuckButton",
        "body": [
            "setPlayerDuckButton(${0:Player player, bool able})"
        ],
        "prefix": "setPlayerDuckButton",
        "scope": "lua"
    },
    "setFloatStat": {
        "description": "setFloatStat",
        "body": [
            "setFloatStat(${0:int stat, float float})"
        ],
        "prefix": "setFloatStat",
        "scope": "lua"
    },
    "setAlwaysDraw3dMarkers": {
        "description": "setAlwaysDraw3dMarkers",
        "body": [
            "setAlwaysDraw3dMarkers(${0:bool set})"
        ],
        "prefix": "setAlwaysDraw3dMarkers",
        "scope": "lua"
    },
    "memory.getint16": {
        "description": "memory.getint16",
        "body": [
            "memory.getint16(${0:uint address, [bool unprotect=false]})"
        ],
        "prefix": "memory.getint16",
        "scope": "lua"
    },
    "hasResprayHappened": {
        "description": "hasResprayHappened",
        "body": [
            "hasResprayHappened(${0:Vehicle car})"
        ],
        "prefix": "hasResprayHappened",
        "scope": "lua"
    },
    "addNextMessageToPreviousBriefs": {
        "description": "addNextMessageToPreviousBriefs",
        "body": [
            "addNextMessageToPreviousBriefs(${0:bool int1})"
        ],
        "prefix": "addNextMessageToPreviousBriefs",
        "scope": "lua"
    },
    "memory.setint8": {
        "description": "memory.setint8",
        "body": [
            "memory.setint8(${0:uint address, int byte, [bool unprotect=false]})"
        ],
        "prefix": "memory.setint8",
        "scope": "lua"
    },
    "memory.write": {
        "description": "memory.write",
        "body": [
            "memory.write(${0:uint address, int value, uint size, [bool unprotect=false]})"
        ],
        "prefix": "memory.write",
        "scope": "lua"
    },
    "memory.read": {
        "description": "memory.read",
        "body": [
            "memory.read(${0:uint address, uint size, [bool unprotect=false]})"
        ],
        "prefix": "memory.read",
        "scope": "lua"
    },
    "getCarMass": {
        "description": "getCarMass",
        "body": [
            "getCarMass(${0:Vehicle car})"
        ],
        "prefix": "getCarMass",
        "scope": "lua"
    },
    "activateGarage": {
        "description": "activateGarage",
        "body": [
            "activateGarage(${0:GxtString garage})"
        ],
        "prefix": "activateGarage",
        "scope": "lua"
    },
    "forceWeatherNow": {
        "description": "forceWeatherNow",
        "body": [
            "forceWeatherNow(${0:int weather})"
        ],
        "prefix": "forceWeatherNow",
        "scope": "lua"
    },
    "isMoneyPickupAtCoords": {
        "description": "isMoneyPickupAtCoords",
        "body": [
            "isMoneyPickupAtCoords(${0:float atX, float atY, float atZ})"
        ],
        "prefix": "isMoneyPickupAtCoords",
        "scope": "lua"
    },
    "damageCarPanel": {
        "description": "damageCarPanel",
        "body": [
            "damageCarPanel(${0:Vehicle car, int door})"
        ],
        "prefix": "damageCarPanel",
        "scope": "lua"
    },
    "clearCharTasksImmediately": {
        "description": "clearCharTasksImmediately",
        "body": [
            "clearCharTasksImmediately(${0:Ped ped})"
        ],
        "prefix": "clearCharTasksImmediately",
        "scope": "lua"
    },
    "dxutGetListboxSelectedItemAndCount": {
        "description": "dxutGetListboxSelectedItemAndCount",
        "body": [
            "dxutGetListboxSelectedItemAndCount(${0:DxutDialog dialog, int id})"
        ],
        "prefix": "dxutGetListboxSelectedItemAndCount",
        "scope": "lua"
    },
    "sampStorePlayerAimData": {
        "description": "sampStorePlayerAimData",
        "body": [
            "sampStorePlayerAimData(${0:int id, uint dstBuffer})"
        ],
        "prefix": "sampStorePlayerAimData",
        "scope": "lua"
    },
    "sampStorePlayerTrailerData": {
        "description": "sampStorePlayerTrailerData",
        "body": [
            "sampStorePlayerTrailerData(${0:int id, uint dstBuffer})"
        ],
        "prefix": "sampStorePlayerTrailerData",
        "scope": "lua"
    },
    "setCharAllowedToDuck": {
        "description": "setCharAllowedToDuck",
        "body": [
            "setCharAllowedToDuck(${0:Ped ped, bool enable})"
        ],
        "prefix": "setCharAllowedToDuck",
        "scope": "lua"
    },
    "setCarLightsOn": {
        "description": "setCarLightsOn",
        "body": [
            "setCarLightsOn(${0:Vehicle car, bool lights})"
        ],
        "prefix": "setCarLightsOn",
        "scope": "lua"
    },
    "attachCameraToCharLookAtChar": {
        "description": "attachCameraToCharLookAtChar",
        "body": [
            "attachCameraToCharLookAtChar(${0:Ped ped, float offsetX, float offsetY, float offsetZ, int targetActor, float tilt, int switchstyle})"
        ],
        "prefix": "attachCameraToCharLookAtChar",
        "scope": "lua"
    },
    "loadCutscene": {
        "description": "loadCutscene",
        "body": [
            "loadCutscene(${0:GxtString cutscene})"
        ],
        "prefix": "loadCutscene",
        "scope": "lua"
    },
    "activateMenuItem": {
        "description": "activateMenuItem",
        "body": [
            "activateMenuItem(${0:int menu, int row, bool enable})"
        ],
        "prefix": "activateMenuItem",
        "scope": "lua"
    },
    "sampStorePlayerOnfootData": {
        "description": "sampStorePlayerOnfootData",
        "body": [
            "sampStorePlayerOnfootData(${0:int id, uint dstBuffer})"
        ],
        "prefix": "sampStorePlayerOnfootData",
        "scope": "lua"
    },
    "freezeOnscreenTimer": {
        "description": "freezeOnscreenTimer",
        "body": [
            "freezeOnscreenTimer(${0:bool timer})"
        ],
        "prefix": "freezeOnscreenTimer",
        "scope": "lua"
    },
    "enableBurglaryHouses": {
        "description": "enableBurglaryHouses",
        "body": [
            "enableBurglaryHouses(${0:bool enable})"
        ],
        "prefix": "enableBurglaryHouses",
        "scope": "lua"
    },
    "sampGetGangzonePoolPtr": {
        "description": "sampGetGangzonePoolPtr",
        "body": [
            "sampGetGangzonePoolPtr()"
        ],
        "prefix": "sampGetGangzonePoolPtr",
        "scope": "lua"
    },
    "isCharWaitingForWorldCollision": {
        "description": "isCharWaitingForWorldCollision",
        "body": [
            "isCharWaitingForWorldCollision(${0:Ped ped})"
        ],
        "prefix": "isCharWaitingForWorldCollision",
        "scope": "lua"
    },
    "sampGetObjectPoolPtr": {
        "description": "sampGetObjectPoolPtr",
        "body": [
            "sampGetObjectPoolPtr()"
        ],
        "prefix": "sampGetObjectPoolPtr",
        "scope": "lua"
    },
    "clearCutscene": {
        "description": "clearCutscene",
        "body": [
            "clearCutscene()"
        ],
        "prefix": "clearCutscene",
        "scope": "lua"
    },
    "sampGetMiscInfoPtr": {
        "description": "sampGetMiscInfoPtr",
        "body": [
            "sampGetMiscInfoPtr()"
        ],
        "prefix": "sampGetMiscInfoPtr",
        "scope": "lua"
    },
    "createPickupWithAmmo": {
        "description": "createPickupWithAmmo",
        "body": [
            "createPickupWithAmmo(${0:Model modelId, int type, int ammo, float atX, float atY, float atZ})"
        ],
        "prefix": "createPickupWithAmmo",
        "scope": "lua"
    },
    "locateCharAnyMeansObject2d": {
        "description": "locateCharAnyMeansObject2d",
        "body": [
            "locateCharAnyMeansObject2d(${0:Ped ped, Object object, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCharAnyMeansObject2d",
        "scope": "lua"
    },
    "sampGetSampPoolsPtr": {
        "description": "sampGetSampPoolsPtr",
        "body": [
            "sampGetSampPoolsPtr()"
        ],
        "prefix": "sampGetSampPoolsPtr",
        "scope": "lua"
    },
    "dxutIsDialogExists": {
        "description": "dxutIsDialogExists",
        "body": [
            "dxutIsDialogExists(${0:DxutDialog dialog})"
        ],
        "prefix": "dxutIsDialogExists",
        "scope": "lua"
    },
    "policeRadioMessage": {
        "description": "policeRadioMessage",
        "body": [
            "policeRadioMessage(${0:float float1, float float2, float float3})"
        ],
        "prefix": "policeRadioMessage",
        "scope": "lua"
    },
    "displayNonMinigameHelpMessages": {
        "description": "displayNonMinigameHelpMessages",
        "body": [
            "displayNonMinigameHelpMessages(${0:bool display})"
        ],
        "prefix": "displayNonMinigameHelpMessages",
        "scope": "lua"
    },
    "taskSetIgnoreWeaponRangeFlag": {
        "description": "taskSetIgnoreWeaponRangeFlag",
        "body": [
            "taskSetIgnoreWeaponRangeFlag(${0:Ped ped, bool ignore})"
        ],
        "prefix": "taskSetIgnoreWeaponRangeFlag",
        "scope": "lua"
    },
    "getParkingNodeInArea": {
        "description": "getParkingNodeInArea",
        "body": [
            "getParkingNodeInArea(${0:float x1, float y1, float z1, float x2, float y2, float z2})"
        ],
        "prefix": "getParkingNodeInArea",
        "scope": "lua"
    },
    "heliGotoCoords": {
        "description": "heliGotoCoords",
        "body": [
            "heliGotoCoords(${0:Vehicle heli, float toX, float toY, float toZ, float altitudeMin, float altitudeMax})"
        ],
        "prefix": "heliGotoCoords",
        "scope": "lua"
    },
    "dxutDeleteControl": {
        "description": "dxutDeleteControl",
        "body": [
            "dxutDeleteControl(${0:DxutDialog dialog, int id})"
        ],
        "prefix": "dxutDeleteControl",
        "scope": "lua"
    },
    "dxutIsDialogMinimized": {
        "description": "dxutIsDialogMinimized",
        "body": [
            "dxutIsDialogMinimized(${0:DxutDialog dialog})"
        ],
        "prefix": "dxutIsDialogMinimized",
        "scope": "lua"
    },
    "isWidescreenOnInOptions": {
        "description": "isWidescreenOnInOptions",
        "body": [
            "isWidescreenOnInOptions()"
        ],
        "prefix": "isWidescreenOnInOptions",
        "scope": "lua"
    },
    "restoreCarModState": {
        "description": "restoreCarModState",
        "body": [
            "restoreCarModState()"
        ],
        "prefix": "restoreCarModState",
        "scope": "lua"
    },
    "isCharStuckUnderCar": {
        "description": "isCharStuckUnderCar",
        "body": [
            "isCharStuckUnderCar(${0:Ped ped})"
        ],
        "prefix": "isCharStuckUnderCar",
        "scope": "lua"
    },
    "taskWanderStandard": {
        "description": "taskWanderStandard",
        "body": [
            "taskWanderStandard(${0:Ped ped})"
        ],
        "prefix": "taskWanderStandard",
        "scope": "lua"
    },
    "dxutEnableDialogCaption": {
        "description": "dxutEnableDialogCaption",
        "body": [
            "dxutEnableDialogCaption(${0:DxutDialog dialog, bool enable})"
        ],
        "prefix": "dxutEnableDialogCaption",
        "scope": "lua"
    },
    "incrementIntStat": {
        "description": "incrementIntStat",
        "body": [
            "incrementIntStat(${0:int stat, int add})"
        ],
        "prefix": "incrementIntStat",
        "scope": "lua"
    },
    "addStuckCarCheck": {
        "description": "addStuckCarCheck",
        "body": [
            "addStuckCarCheck(${0:Vehicle car, float stuckCheckDistance, int time})"
        ],
        "prefix": "addStuckCarCheck",
        "scope": "lua"
    },
    "dxutCheckboxSetChecked": {
        "description": "dxutCheckboxSetChecked",
        "body": [
            "dxutCheckboxSetChecked(${0:DxutDialog dialog, int id, bool checked})"
        ],
        "prefix": "dxutCheckboxSetChecked",
        "scope": "lua"
    },
    "setCharShootRate": {
        "description": "setCharShootRate",
        "body": [
            "setCharShootRate(${0:Ped ped, int rate})"
        ],
        "prefix": "setCharShootRate",
        "scope": "lua"
    },
    "renderGetFontCharWidth": {
        "description": "renderGetFontCharWidth",
        "body": [
            "renderGetFontCharWidth(${0:DxFont font, uint char})"
        ],
        "prefix": "renderGetFontCharWidth",
        "scope": "lua"
    },
    "setTankDetonateCars": {
        "description": "setTankDetonateCars",
        "body": [
            "setTankDetonateCars(${0:int tank, bool detonate})"
        ],
        "prefix": "setTankDetonateCars",
        "scope": "lua"
    },
    "attachTrailerToCab": {
        "description": "attachTrailerToCab",
        "body": [
            "attachTrailerToCab(${0:int trailer, int cab})"
        ],
        "prefix": "attachTrailerToCab",
        "scope": "lua"
    },
    "isCharInAreaOnFoot2d": {
        "description": "isCharInAreaOnFoot2d",
        "body": [
            "isCharInAreaOnFoot2d(${0:Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
        ],
        "prefix": "isCharInAreaOnFoot2d",
        "scope": "lua"
    },
    "sampGetRpcNodeByRpcId": {
        "description": "sampGetRpcNodeByRpcId",
        "body": [
            "sampGetRpcNodeByRpcId(${0:int index})"
        ],
        "prefix": "sampGetRpcNodeByRpcId",
        "scope": "lua"
    },
    "sampGetRpcCallbackByRpcId": {
        "description": "sampGetRpcCallbackByRpcId",
        "body": [
            "sampGetRpcCallbackByRpcId(${0:int index})"
        ],
        "prefix": "sampGetRpcCallbackByRpcId",
        "scope": "lua"
    },
    "sampGetRakclientFuncAddressByIndex": {
        "description": "sampGetRakclientFuncAddressByIndex",
        "body": [
            "sampGetRakclientFuncAddressByIndex(${0:int index})"
        ],
        "prefix": "sampGetRakclientFuncAddressByIndex",
        "scope": "lua"
    },
    "sampGetRakpeer": {
        "description": "sampGetRakpeer",
        "body": [
            "sampGetRakpeer()"
        ],
        "prefix": "sampGetRakpeer",
        "scope": "lua"
    },
    "disableAllEntryExits": {
        "description": "disableAllEntryExits",
        "body": [
            "disableAllEntryExits(${0:bool disable})"
        ],
        "prefix": "disableAllEntryExits",
        "scope": "lua"
    },
    "sampGetRakclientInterface": {
        "description": "sampGetRakclientInterface",
        "body": [
            "sampGetRakclientInterface()"
        ],
        "prefix": "sampGetRakclientInterface",
        "scope": "lua"
    },
    "memory.compare": {
        "description": "memory.compare",
        "body": [
            "memory.compare(${0:uint address1, uint address2, uint size, [bool unprotect=false]})"
        ],
        "prefix": "memory.compare",
        "scope": "lua"
    },
    "isScriptFireExtinguished": {
        "description": "isScriptFireExtinguished",
        "body": [
            "isScriptFireExtinguished(${0:int fire})"
        ],
        "prefix": "isScriptFireExtinguished",
        "scope": "lua"
    },
    "getCharAnimCurrentTime": {
        "description": "getCharAnimCurrentTime",
        "body": [
            "getCharAnimCurrentTime(${0:Ped ped, string animation})"
        ],
        "prefix": "getCharAnimCurrentTime",
        "scope": "lua"
    },
    "isEmergencyServicesVehicle": {
        "description": "isEmergencyServicesVehicle",
        "body": [
            "isEmergencyServicesVehicle(${0:Vehicle car})"
        ],
        "prefix": "isEmergencyServicesVehicle",
        "scope": "lua"
    },
    "sampGetPickupSampIdByHandle": {
        "description": "sampGetPickupSampIdByHandle",
        "body": [
            "sampGetPickupSampIdByHandle(${0:Pickup pickup})"
        ],
        "prefix": "sampGetPickupSampIdByHandle",
        "scope": "lua"
    },
    "removeStreamedScript": {
        "description": "removeStreamedScript",
        "body": [
            "removeStreamedScript(${0:int externalScript})"
        ],
        "prefix": "removeStreamedScript",
        "scope": "lua"
    },
    "setCharAnimCurrentTime": {
        "description": "setCharAnimCurrentTime",
        "body": [
            "setCharAnimCurrentTime(${0:Ped ped, string animation, float time})"
        ],
        "prefix": "setCharAnimCurrentTime",
        "scope": "lua"
    },
    "setCarAvoidLevelTransitions": {
        "description": "setCarAvoidLevelTransitions",
        "body": [
            "setCarAvoidLevelTransitions(${0:Vehicle car, bool avoidLevelTransitions})"
        ],
        "prefix": "setCarAvoidLevelTransitions",
        "scope": "lua"
    },
    "raknetSendBitStreamEx": {
        "description": "raknetSendBitStreamEx",
        "body": [
            "raknetSendBitStreamEx(${0:Bitstream bs, int priority, int reliability, int channel})"
        ],
        "prefix": "raknetSendBitStreamEx",
        "scope": "lua"
    },
    "setTrainSpeed": {
        "description": "setTrainSpeed",
        "body": [
            "setTrainSpeed(${0:Vehicle train, float speed})"
        ],
        "prefix": "setTrainSpeed",
        "scope": "lua"
    },
    "initialiseObjectPath": {
        "description": "initialiseObjectPath",
        "body": [
            "initialiseObjectPath(${0:int int1, float float2})"
        ],
        "prefix": "initialiseObjectPath",
        "scope": "lua"
    },
    "raknetResetBitStream": {
        "description": "raknetResetBitStream",
        "body": [
            "raknetResetBitStream(${0:Bitstream bs})"
        ],
        "prefix": "raknetResetBitStream",
        "scope": "lua"
    },
    "sampRegisterChatCommand": {
        "description": "sampRegisterChatCommand",
        "body": [
            "sampRegisterChatCommand(${0:zstring cmd, function func})"
        ],
        "prefix": "sampRegisterChatCommand",
        "scope": "lua"
    },
    "setLoadCollisionForCharFlag": {
        "description": "setLoadCollisionForCharFlag",
        "body": [
            "setLoadCollisionForCharFlag(${0:Ped ped, bool enable})"
        ],
        "prefix": "setLoadCollisionForCharFlag",
        "scope": "lua"
    },
    "applyForceToCar": {
        "description": "applyForceToCar",
        "body": [
            "applyForceToCar(${0:Vehicle car, float vecX, float vecY, float vecZ, float rotationX, float rotationY, float rotationZ})"
        ],
        "prefix": "applyForceToCar",
        "scope": "lua"
    },
    "sampSendDamageVehicle": {
        "description": "sampSendDamageVehicle",
        "body": [
            "sampSendDamageVehicle(${0:Vehicle car, int panel, int doors, int lights, int tires})"
        ],
        "prefix": "sampSendDamageVehicle",
        "scope": "lua"
    },
    "sampDisconnectWithReason": {
        "description": "sampDisconnectWithReason",
        "body": [
            "sampDisconnectWithReason(${0:bool timeout})"
        ],
        "prefix": "sampDisconnectWithReason",
        "scope": "lua"
    },
    "taskDriveBy": {
        "description": "taskDriveBy",
        "body": [
            "taskDriveBy(${0:Ped ped, int drivebyActor, Vehicle car, float pX, float pY, float pZ, float radiusX, int radiusY, bool radiusZ, int firingRate})"
        ],
        "prefix": "taskDriveBy",
        "scope": "lua"
    },
    "sampGetPlayerStructPtr": {
        "description": "sampGetPlayerStructPtr",
        "body": [
            "sampGetPlayerStructPtr(${0:int id})"
        ],
        "prefix": "sampGetPlayerStructPtr",
        "scope": "lua"
    },
    "setGenerateCarsAroundCamera": {
        "description": "setGenerateCarsAroundCamera",
        "body": [
            "setGenerateCarsAroundCamera(${0:bool int1})"
        ],
        "prefix": "setGenerateCarsAroundCamera",
        "scope": "lua"
    },
    "sampIsPlayerConnected": {
        "description": "sampIsPlayerConnected",
        "body": [
            "sampIsPlayerConnected(${0:int id})"
        ],
        "prefix": "sampIsPlayerConnected",
        "scope": "lua"
    },
    "sampSendScmEvent": {
        "description": "sampSendScmEvent",
        "body": [
            "sampSendScmEvent(${0:int event, int id, int param1, int param2})"
        ],
        "prefix": "sampSendScmEvent",
        "scope": "lua"
    },
    "setCarModelComponents": {
        "description": "setCarModelComponents",
        "body": [
            "setCarModelComponents(${0:Model car, int variation1, int variation2})"
        ],
        "prefix": "setCarModelComponents",
        "scope": "lua"
    },
    "createSearchlightOnVehicle": {
        "description": "createSearchlightOnVehicle",
        "body": [
            "createSearchlightOnVehicle(${0:Vehicle car, float offsetX, float offsetY, float offsetZ, float targetX, float targetY, float targetZ, float radius, float radius})"
        ],
        "prefix": "createSearchlightOnVehicle",
        "scope": "lua"
    },
    "clearHelp": {
        "description": "clearHelp",
        "body": [
            "clearHelp()"
        ],
        "prefix": "clearHelp",
        "scope": "lua"
    },
    "hasCutsceneFinished": {
        "description": "hasCutsceneFinished",
        "body": [
            "hasCutsceneFinished()"
        ],
        "prefix": "hasCutsceneFinished",
        "scope": "lua"
    },
    "setFadingColour": {
        "description": "setFadingColour",
        "body": [
            "setFadingColour(${0:int r, int g, int b})"
        ],
        "prefix": "setFadingColour",
        "scope": "lua"
    },
    "drawCorona": {
        "description": "drawCorona",
        "body": [
            "drawCorona(${0:float atX, float atY, float atZ, float radius, int type, bool lensflares, int r, int g, int b})"
        ],
        "prefix": "drawCorona",
        "scope": "lua"
    },
    "getScmThreadStructNamed": {
        "description": "getScmThreadStructNamed",
        "body": [
            "getScmThreadStructNamed(${0:GxtString thread})"
        ],
        "prefix": "getScmThreadStructNamed",
        "scope": "lua"
    },
    "startNewCustomScript": {
        "description": "startNewCustomScript",
        "body": [
            "startNewCustomScript(${0:zstring filepath, table args})"
        ],
        "prefix": "startNewCustomScript",
        "scope": "lua"
    },
    "releaseEntityFromWinch": {
        "description": "releaseEntityFromWinch",
        "body": [
            "releaseEntityFromWinch(${0:Vehicle heli})"
        ],
        "prefix": "releaseEntityFromWinch",
        "scope": "lua"
    },
    "isMouseUsingVerticalInversion": {
        "description": "isMouseUsingVerticalInversion",
        "body": [
            "isMouseUsingVerticalInversion()"
        ],
        "prefix": "isMouseUsingVerticalInversion",
        "scope": "lua"
    },
    "getCollectable1sCollected": {
        "description": "getCollectable1sCollected",
        "body": [
            "getCollectable1sCollected()"
        ],
        "prefix": "getCollectable1sCollected",
        "scope": "lua"
    },
    "shakePad": {
        "description": "shakePad",
        "body": [
            "shakePad(${0:Player player, int time, int intensity})"
        ],
        "prefix": "shakePad",
        "scope": "lua"
    },
    "deleteCheckpoint": {
        "description": "deleteCheckpoint",
        "body": [
            "deleteCheckpoint(${0:Checkpoint checkpoint})"
        ],
        "prefix": "deleteCheckpoint",
        "scope": "lua"
    },
    "setRelationship": {
        "description": "setRelationship",
        "body": [
            "setRelationship(${0:int acquaintance, int pedtype, int toPedtype})"
        ],
        "prefix": "setRelationship",
        "scope": "lua"
    },
    "pointCameraAtPoint": {
        "description": "pointCameraAtPoint",
        "body": [
            "pointCameraAtPoint(${0:float pointAtX, float pointAtY, float pointAtZ, int switchstyle})"
        ],
        "prefix": "pointCameraAtPoint",
        "scope": "lua"
    },
    "controlCarDoor": {
        "description": "controlCarDoor",
        "body": [
            "controlCarDoor(${0:Vehicle car, int door, int unlatch, float angle})"
        ],
        "prefix": "controlCarDoor",
        "scope": "lua"
    },
    "isCharInAngledArea3d": {
        "description": "isCharInAngledArea3d",
        "body": [
            "isCharInAngledArea3d(${0:Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere})"
        ],
        "prefix": "isCharInAngledArea3d",
        "scope": "lua"
    },
    "dxutSetControlPos": {
        "description": "dxutSetControlPos",
        "body": [
            "dxutSetControlPos(${0:DxutDialog dialog, int id, int posX, int posY})"
        ],
        "prefix": "dxutSetControlPos",
        "scope": "lua"
    },
    "detachObject": {
        "description": "detachObject",
        "body": [
            "detachObject(${0:Object object, float X, float Y, float Z, bool collisionDetection})"
        ],
        "prefix": "detachObject",
        "scope": "lua"
    },
    "isCharHeadMissing": {
        "description": "isCharHeadMissing",
        "body": [
            "isCharHeadMissing(${0:Ped ped})"
        ],
        "prefix": "isCharHeadMissing",
        "scope": "lua"
    },
    "clearLastBuildingModelShotByPlayer": {
        "description": "clearLastBuildingModelShotByPlayer",
        "body": [
            "clearLastBuildingModelShotByPlayer(${0:Player player})"
        ],
        "prefix": "clearLastBuildingModelShotByPlayer",
        "scope": "lua"
    },
    "dontSuppressAnyCarModels": {
        "description": "dontSuppressAnyCarModels",
        "body": [
            "dontSuppressAnyCarModels()"
        ],
        "prefix": "dontSuppressAnyCarModels",
        "scope": "lua"
    },
    "forceAllVehicleLightsOff": {
        "description": "forceAllVehicleLightsOff",
        "body": [
            "forceAllVehicleLightsOff(${0:bool off})"
        ],
        "prefix": "forceAllVehicleLightsOff",
        "scope": "lua"
    },
    "isSkipWaitingForScriptToFadeIn": {
        "description": "isSkipWaitingForScriptToFadeIn",
        "body": [
            "isSkipWaitingForScriptToFadeIn()"
        ],
        "prefix": "isSkipWaitingForScriptToFadeIn",
        "scope": "lua"
    },
    "storeCarCharIsAttachedToNoSave": {
        "description": "storeCarCharIsAttachedToNoSave",
        "body": [
            "storeCarCharIsAttachedToNoSave(${0:Vehicle car})"
        ],
        "prefix": "storeCarCharIsAttachedToNoSave",
        "scope": "lua"
    },
    "fixCarTire": {
        "description": "fixCarTire",
        "body": [
            "fixCarTire(${0:Vehicle car, int tire})"
        ],
        "prefix": "fixCarTire",
        "scope": "lua"
    },
    "setVehicleCameraTweak": {
        "description": "setVehicleCameraTweak",
        "body": [
            "setVehicleCameraTweak(${0:Model carModel, float distance, float altitudeMultiplier, float angleX})"
        ],
        "prefix": "setVehicleCameraTweak",
        "scope": "lua"
    },
    "drawSubtitlesBeforeFade": {
        "description": "drawSubtitlesBeforeFade",
        "body": [
            "drawSubtitlesBeforeFade(${0:bool flag})"
        ],
        "prefix": "drawSubtitlesBeforeFade",
        "scope": "lua"
    },
    "createFxSystemOnCarWithDirection": {
        "description": "createFxSystemOnCarWithDirection",
        "body": [
            "createFxSystemOnCarWithDirection(${0:string particle, Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int type})"
        ],
        "prefix": "createFxSystemOnCarWithDirection",
        "scope": "lua"
    },
    "locateCharAnyMeansCar3d": {
        "description": "locateCharAnyMeansCar3d",
        "body": [
            "locateCharAnyMeansCar3d(${0:Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag})"
        ],
        "prefix": "locateCharAnyMeansCar3d",
        "scope": "lua"
    },
    "dxutIsDialogCaptionEnabled": {
        "description": "dxutIsDialogCaptionEnabled",
        "body": [
            "dxutIsDialogCaptionEnabled(${0:DxutDialog dialog})"
        ],
        "prefix": "dxutIsDialogCaptionEnabled",
        "scope": "lua"
    },
    "isThisHelpMessageBeingDisplayed": {
        "description": "isThisHelpMessageBeingDisplayed",
        "body": [
            "isThisHelpMessageBeingDisplayed(${0:GxtString gxtString})"
        ],
        "prefix": "isThisHelpMessageBeingDisplayed",
        "scope": "lua"
    },
    "setDeathWeaponsPersist": {
        "description": "setDeathWeaponsPersist",
        "body": [
            "setDeathWeaponsPersist(${0:Ped ped, bool persist})"
        ],
        "prefix": "setDeathWeaponsPersist",
        "scope": "lua"
    },
    "useDetonator": {
        "description": "useDetonator",
        "body": [
            "useDetonator()"
        ],
        "prefix": "useDetonator",
        "scope": "lua"
    },
    "getObjectAnimCurrentTime": {
        "description": "getObjectAnimCurrentTime",
        "body": [
            "getObjectAnimCurrentTime(${0:Object object, string animation})"
        ],
        "prefix": "getObjectAnimCurrentTime",
        "scope": "lua"
    },
    "setAreaName": {
        "description": "setAreaName",
        "body": [
            "setAreaName(${0:GxtString gxtString})"
        ],
        "prefix": "setAreaName",
        "scope": "lua"
    },
    "setCarTempAction": {
        "description": "setCarTempAction",
        "body": [
            "setCarTempAction(${0:Vehicle car, int action, int time})"
        ],
        "prefix": "setCarTempAction",
        "scope": "lua"
    },
    "enableConversation": {
        "description": "enableConversation",
        "body": [
            "enableConversation(${0:Ped ped, bool enable})"
        ],
        "prefix": "enableConversation",
        "scope": "lua"
    },
    "setUpConversationNodeWithScriptedSpeech": {
        "description": "setUpConversationNodeWithScriptedSpeech",
        "body": [
            "setUpConversationNodeWithScriptedSpeech(${0:GxtString questionGXT, GxtString answerYesGXT, GxtString answerNoGXT, int questionWAV, int answerYesWAV, int answerNoWAV})"
        ],
        "prefix": "setUpConversationNodeWithScriptedSpeech",
        "scope": "lua"
    },
    "locateStoppedCharAnyMeans3d": {
        "description": "locateStoppedCharAnyMeans3d",
        "body": [
            "locateStoppedCharAnyMeans3d(${0:Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateStoppedCharAnyMeans3d",
        "scope": "lua"
    },
    "getCarRoll": {
        "description": "getCarRoll",
        "body": [
            "getCarRoll(${0:Vehicle car})"
        ],
        "prefix": "getCarRoll",
        "scope": "lua"
    },
    "restoreClock": {
        "description": "restoreClock",
        "body": [
            "restoreClock()"
        ],
        "prefix": "restoreClock",
        "scope": "lua"
    },
    "setHasBeenOwnedForCarGenerator": {
        "description": "setHasBeenOwnedForCarGenerator",
        "body": [
            "setHasBeenOwnedForCarGenerator(${0:int generator, bool owned})"
        ],
        "prefix": "setHasBeenOwnedForCarGenerator",
        "scope": "lua"
    },
    "taskGotoCar": {
        "description": "taskGotoCar",
        "body": [
            "taskGotoCar(${0:Ped ped, Vehicle car, int timeMS, float stopAtDistance})"
        ],
        "prefix": "taskGotoCar",
        "scope": "lua"
    },
    "hasCarBeenResprayed": {
        "description": "hasCarBeenResprayed",
        "body": [
            "hasCarBeenResprayed(${0:Vehicle car})"
        ],
        "prefix": "hasCarBeenResprayed",
        "scope": "lua"
    },
    "switchWorldProcessing": {
        "description": "switchWorldProcessing",
        "body": [
            "switchWorldProcessing(${0:bool cutsceneOnly})"
        ],
        "prefix": "switchWorldProcessing",
        "scope": "lua"
    },
    "manageAllPopulation": {
        "description": "manageAllPopulation",
        "body": [
            "manageAllPopulation()"
        ],
        "prefix": "manageAllPopulation",
        "scope": "lua"
    },
    "loadMissionAudio": {
        "description": "loadMissionAudio",
        "body": [
            "loadMissionAudio(${0:int asId, int name})"
        ],
        "prefix": "loadMissionAudio",
        "scope": "lua"
    },
    "getExtraCarColours": {
        "description": "getExtraCarColours",
        "body": [
            "getExtraCarColours(${0:Vehicle car})"
        ],
        "prefix": "getExtraCarColours",
        "scope": "lua"
    },
    "setExtraCarColours": {
        "description": "setExtraCarColours",
        "body": [
            "setExtraCarColours(${0:Vehicle car, int tertiaryColor, int quaternaryColor})"
        ],
        "prefix": "setExtraCarColours",
        "scope": "lua"
    },
    "enableDisabledAttractorsOnObject": {
        "description": "enableDisabledAttractorsOnObject",
        "body": [
            "enableDisabledAttractorsOnObject(${0:Object object, bool enable})"
        ],
        "prefix": "enableDisabledAttractorsOnObject",
        "scope": "lua"
    },
    "shutCharUpForScriptedSpeech": {
        "description": "shutCharUpForScriptedSpeech",
        "body": [
            "shutCharUpForScriptedSpeech(${0:Ped ped, bool muted})"
        ],
        "prefix": "shutCharUpForScriptedSpeech",
        "scope": "lua"
    },
    "getStringWidthWithNumber": {
        "description": "getStringWidthWithNumber",
        "body": [
            "getStringWidthWithNumber(${0:GxtString gxtString, int number})"
        ],
        "prefix": "getStringWidthWithNumber",
        "scope": "lua"
    },
    "displayOnscreenCounterWithString": {
        "description": "displayOnscreenCounterWithString",
        "body": [
            "displayOnscreenCounterWithString(${0:VarId var, bool type, GxtString gxtString})"
        ],
        "prefix": "displayOnscreenCounterWithString",
        "scope": "lua"
    },
    "getTerritoryUnderControlPercentage": {
        "description": "getTerritoryUnderControlPercentage",
        "body": [
            "getTerritoryUnderControlPercentage()"
        ],
        "prefix": "getTerritoryUnderControlPercentage",
        "scope": "lua"
    },
    "preloadBeatTrack": {
        "description": "preloadBeatTrack",
        "body": [
            "preloadBeatTrack(${0:int soundtrack})"
        ],
        "prefix": "preloadBeatTrack",
        "scope": "lua"
    },
    "isModelInCdimage": {
        "description": "isModelInCdimage",
        "body": [
            "isModelInCdimage(${0:Model modelId})"
        ],
        "prefix": "isModelInCdimage",
        "scope": "lua"
    },
    "setRespawnPointForDurationOfMission": {
        "description": "setRespawnPointForDurationOfMission",
        "body": [
            "setRespawnPointForDurationOfMission(${0:float posX, float posY, float posZ})"
        ],
        "prefix": "setRespawnPointForDurationOfMission",
        "scope": "lua"
    },
    "resetVehicleHydraulics": {
        "description": "resetVehicleHydraulics",
        "body": [
            "resetVehicleHydraulics(${0:Vehicle car})"
        ],
        "prefix": "resetVehicleHydraulics",
        "scope": "lua"
    },
    "taskWeaponRoll": {
        "description": "taskWeaponRoll",
        "body": [
            "taskWeaponRoll(${0:Ped ped, bool roll})"
        ],
        "prefix": "taskWeaponRoll",
        "scope": "lua"
    },
    "clearAllScriptRoadblocks": {
        "description": "clearAllScriptRoadblocks",
        "body": [
            "clearAllScriptRoadblocks()"
        ],
        "prefix": "clearAllScriptRoadblocks",
        "scope": "lua"
    },
    "isObjectIntersectingWorld": {
        "description": "isObjectIntersectingWorld",
        "body": [
            "isObjectIntersectingWorld(${0:Object object})"
        ],
        "prefix": "isObjectIntersectingWorld",
        "scope": "lua"
    },
    "getCurrentLanguage": {
        "description": "getCurrentLanguage",
        "body": [
            "getCurrentLanguage()"
        ],
        "prefix": "getCurrentLanguage",
        "scope": "lua"
    },
    "printWith4Numbers": {
        "description": "printWith4Numbers",
        "body": [
            "printWith4Numbers(${0:GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int time, int flag})"
        ],
        "prefix": "printWith4Numbers",
        "scope": "lua"
    },
    "reportMissionAudioEventAtCar": {
        "description": "reportMissionAudioEventAtCar",
        "body": [
            "reportMissionAudioEventAtCar(${0:Vehicle car, int event})"
        ],
        "prefix": "reportMissionAudioEventAtCar",
        "scope": "lua"
    },
    "shutAllCharsUp": {
        "description": "shutAllCharsUp",
        "body": [
            "shutAllCharsUp(${0:bool enable})"
        ],
        "prefix": "shutAllCharsUp",
        "scope": "lua"
    },
    "ignoreHeightDifferenceFollowingNodes": {
        "description": "ignoreHeightDifferenceFollowingNodes",
        "body": [
            "ignoreHeightDifferenceFollowingNodes(${0:Ped ped, bool ignore})"
        ],
        "prefix": "ignoreHeightDifferenceFollowingNodes",
        "scope": "lua"
    },
    "isPlayerWearing": {
        "description": "isPlayerWearing",
        "body": [
            "isPlayerWearing(${0:Player player, string bodypart, int skin})"
        ],
        "prefix": "isPlayerWearing",
        "scope": "lua"
    },
    "setCoordBlipAppearance": {
        "description": "setCoordBlipAppearance",
        "body": [
            "setCoordBlipAppearance(${0:Checkpoint checkpoint, int type})"
        ],
        "prefix": "setCoordBlipAppearance",
        "scope": "lua"
    },
    "taskShootAtCoord": {
        "description": "taskShootAtCoord",
        "body": [
            "taskShootAtCoord(${0:Ped ped, float atX, float atY, float atZ, int timeMS})"
        ],
        "prefix": "taskShootAtCoord",
        "scope": "lua"
    },
    "reportMissionAudioEventAtChar": {
        "description": "reportMissionAudioEventAtChar",
        "body": [
            "reportMissionAudioEventAtChar(${0:Ped ped, int event})"
        ],
        "prefix": "reportMissionAudioEventAtChar",
        "scope": "lua"
    },
    "taskFollowPathNodesToCoordWithRadius": {
        "description": "taskFollowPathNodesToCoordWithRadius",
        "body": [
            "taskFollowPathNodesToCoordWithRadius(${0:Ped ped, float toX, float toY, float toZ, int mode, int time, float stopRadius})"
        ],
        "prefix": "taskFollowPathNodesToCoordWithRadius",
        "scope": "lua"
    },
    "playerTakeOffGoggles": {
        "description": "playerTakeOffGoggles",
        "body": [
            "playerTakeOffGoggles(${0:Player player, bool useAnim})"
        ],
        "prefix": "playerTakeOffGoggles",
        "scope": "lua"
    },
    "sampGetTextlabelPoolPtr": {
        "description": "sampGetTextlabelPoolPtr",
        "body": [
            "sampGetTextlabelPoolPtr()"
        ],
        "prefix": "sampGetTextlabelPoolPtr",
        "scope": "lua"
    },
    "addSpriteBlipForCoord": {
        "description": "addSpriteBlipForCoord",
        "body": [
            "addSpriteBlipForCoord(${0:float atX, float atY, float atZ, int type})"
        ],
        "prefix": "addSpriteBlipForCoord",
        "scope": "lua"
    },
    "findTrainDirection": {
        "description": "findTrainDirection",
        "body": [
            "findTrainDirection(${0:Vehicle train})"
        ],
        "prefix": "findTrainDirection",
        "scope": "lua"
    },
    "printWith2NumbersNow": {
        "description": "printWith2NumbersNow",
        "body": [
            "printWith2NumbersNow(${0:GxtString gxtString, int numbers1, int numbers2, int time, int flag})"
        ],
        "prefix": "printWith2NumbersNow",
        "scope": "lua"
    },
    "setMaxFireGenerations": {
        "description": "setMaxFireGenerations",
        "body": [
            "setMaxFireGenerations(${0:int max})"
        ],
        "prefix": "setMaxFireGenerations",
        "scope": "lua"
    },
    "setTextJustify": {
        "description": "setTextJustify",
        "body": [
            "setTextJustify(${0:bool alignJustify})"
        ],
        "prefix": "setTextJustify",
        "scope": "lua"
    },
    "getCarModelValue": {
        "description": "getCarModelValue",
        "body": [
            "getCarModelValue(${0:Model modelId})"
        ],
        "prefix": "getCarModelValue",
        "scope": "lua"
    },
    "addBlipForSearchlight": {
        "description": "addBlipForSearchlight",
        "body": [
            "addBlipForSearchlight(${0:Searchlight searchlight})"
        ],
        "prefix": "addBlipForSearchlight",
        "scope": "lua"
    },
    "setUpSkipForSpecificVehicle": {
        "description": "setUpSkipForSpecificVehicle",
        "body": [
            "setUpSkipForSpecificVehicle(${0:float posX, float posY, float posZ, float angle, Vehicle car})"
        ],
        "prefix": "setUpSkipForSpecificVehicle",
        "scope": "lua"
    },
    "registerMissionPassed": {
        "description": "registerMissionPassed",
        "body": [
            "registerMissionPassed(${0:GxtString mission})"
        ],
        "prefix": "registerMissionPassed",
        "scope": "lua"
    },
    "popCarPanel": {
        "description": "popCarPanel",
        "body": [
            "popCarPanel(${0:Vehicle car, int component, bool effectFlag})"
        ],
        "prefix": "popCarPanel",
        "scope": "lua"
    },
    "isGroupMember": {
        "description": "isGroupMember",
        "body": [
            "isGroupMember(${0:Ped ped, int group})"
        ],
        "prefix": "isGroupMember",
        "scope": "lua"
    },
    "createSearchlight": {
        "description": "createSearchlight",
        "body": [
            "createSearchlight(${0:float atX, float atY, float atZ, float targetX, float targetY, float targetZ, float radius1, float radius2})"
        ],
        "prefix": "createSearchlight",
        "scope": "lua"
    },
    "changeCarColourFromMenu": {
        "description": "changeCarColourFromMenu",
        "body": [
            "changeCarColourFromMenu(${0:int panelID, Vehicle car, int colorslot, int activeRow})"
        ],
        "prefix": "changeCarColourFromMenu",
        "scope": "lua"
    },
    "forceInteriorLightingForPlayer": {
        "description": "forceInteriorLightingForPlayer",
        "body": [
            "forceInteriorLightingForPlayer(${0:Player player, bool force})"
        ],
        "prefix": "forceInteriorLightingForPlayer",
        "scope": "lua"
    },
    "setObjectOnlyDamagedByPlayer": {
        "description": "setObjectOnlyDamagedByPlayer",
        "body": [
            "setObjectOnlyDamagedByPlayer(${0:Object object, bool player})"
        ],
        "prefix": "setObjectOnlyDamagedByPlayer",
        "scope": "lua"
    },
    "setCharSayContextImportant": {
        "description": "setCharSayContextImportant",
        "body": [
            "setCharSayContextImportant(${0:Ped ped, int soundslot, bool flags1, bool flags2, bool flags3})"
        ],
        "prefix": "setCharSayContextImportant",
        "scope": "lua"
    },
    "enableAmbientCrime": {
        "description": "enableAmbientCrime",
        "body": [
            "enableAmbientCrime(${0:bool enable})"
        ],
        "prefix": "enableAmbientCrime",
        "scope": "lua"
    },
    "doesPickupExist": {
        "description": "doesPickupExist",
        "body": [
            "doesPickupExist(${0:Pickup pickup})"
        ],
        "prefix": "doesPickupExist",
        "scope": "lua"
    },
    "switchPedRoadsOn": {
        "description": "switchPedRoadsOn",
        "body": [
            "switchPedRoadsOn(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "switchPedRoadsOn",
        "scope": "lua"
    },
    "isVehicleOnAllWheels": {
        "description": "isVehicleOnAllWheels",
        "body": [
            "isVehicleOnAllWheels(${0:Vehicle car})"
        ],
        "prefix": "isVehicleOnAllWheels",
        "scope": "lua"
    },
    "setTrainForcedToSlowDown": {
        "description": "setTrainForcedToSlowDown",
        "body": [
            "setTrainForcedToSlowDown(${0:Vehicle train, bool forced})"
        ],
        "prefix": "setTrainForcedToSlowDown",
        "scope": "lua"
    },
    "flashHudObject": {
        "description": "flashHudObject",
        "body": [
            "flashHudObject(${0:int hudComponent})"
        ],
        "prefix": "flashHudObject",
        "scope": "lua"
    },
    "heliAttackPlayer": {
        "description": "heliAttackPlayer",
        "body": [
            "heliAttackPlayer(${0:Vehicle heli, Player player, float radius})"
        ],
        "prefix": "heliAttackPlayer",
        "scope": "lua"
    },
    "isCharUsingMapAttractor": {
        "description": "isCharUsingMapAttractor",
        "body": [
            "isCharUsingMapAttractor(${0:Ped ped})"
        ],
        "prefix": "isCharUsingMapAttractor",
        "scope": "lua"
    },
    "failKillFrenzy": {
        "description": "failKillFrenzy",
        "body": [
            "failKillFrenzy()"
        ],
        "prefix": "failKillFrenzy",
        "scope": "lua"
    },
    "getProgressPercentage": {
        "description": "getProgressPercentage",
        "body": [
            "getProgressPercentage()"
        ],
        "prefix": "getProgressPercentage",
        "scope": "lua"
    },
    "printHelp": {
        "description": "printHelp",
        "body": [
            "printHelp(${0:GxtString gxtString})"
        ],
        "prefix": "printHelp",
        "scope": "lua"
    },
    "inicfg.load": {
        "description": "inicfg.load",
        "body": [
            "inicfg.load(${0:[table default], [string file]})"
        ],
        "prefix": "inicfg.load",
        "scope": "lua"
    },
    "isCarStreetRacer": {
        "description": "isCarStreetRacer",
        "body": [
            "isCarStreetRacer(${0:Vehicle car})"
        ],
        "prefix": "isCarStreetRacer",
        "scope": "lua"
    },
    "displayZoneNames": {
        "description": "displayZoneNames",
        "body": [
            "displayZoneNames(${0:bool show})"
        ],
        "prefix": "displayZoneNames",
        "scope": "lua"
    },
    "isObjectPlayingAnim": {
        "description": "isObjectPlayingAnim",
        "body": [
            "isObjectPlayingAnim(${0:Object object, string anim})"
        ],
        "prefix": "isObjectPlayingAnim",
        "scope": "lua"
    },
    "setZoneForGangWarsTraining": {
        "description": "setZoneForGangWarsTraining",
        "body": [
            "setZoneForGangWarsTraining(${0:GxtString zone})"
        ],
        "prefix": "setZoneForGangWarsTraining",
        "scope": "lua"
    },
    "displayCarNames": {
        "description": "displayCarNames",
        "body": [
            "displayCarNames(${0:bool show})"
        ],
        "prefix": "displayCarNames",
        "scope": "lua"
    },
    "setWantedMultiplier": {
        "description": "setWantedMultiplier",
        "body": [
            "setWantedMultiplier(${0:float sensitivity})"
        ],
        "prefix": "setWantedMultiplier",
        "scope": "lua"
    },
    "addBlood": {
        "description": "addBlood",
        "body": [
            "addBlood(${0:float atX, float atY, float atZ, float offsetX, float offsetY, float offsetZ, int density, int onActor})"
        ],
        "prefix": "addBlood",
        "scope": "lua"
    },
    "cameraSetLerpFov": {
        "description": "cameraSetLerpFov",
        "body": [
            "cameraSetLerpFov(${0:float from, float to, int timelimit, bool smoothTransition})"
        ],
        "prefix": "cameraSetLerpFov",
        "scope": "lua"
    },
    "getNumberOfFollowers": {
        "description": "getNumberOfFollowers",
        "body": [
            "getNumberOfFollowers(${0:Ped ped})"
        ],
        "prefix": "getNumberOfFollowers",
        "scope": "lua"
    },
    "createRandomCharAsPassenger": {
        "description": "createRandomCharAsPassenger",
        "body": [
            "createRandomCharAsPassenger(${0:Vehicle car, int seat})"
        ],
        "prefix": "createRandomCharAsPassenger",
        "scope": "lua"
    },
    "popCarBoot": {
        "description": "popCarBoot",
        "body": [
            "popCarBoot(${0:Vehicle car})"
        ],
        "prefix": "popCarBoot",
        "scope": "lua"
    },
    "setCharSignalAfterKill": {
        "description": "setCharSignalAfterKill",
        "body": [
            "setCharSignalAfterKill(${0:Ped ped, bool signal})"
        ],
        "prefix": "setCharSignalAfterKill",
        "scope": "lua"
    },
    "taskLookAtVehicle": {
        "description": "taskLookAtVehicle",
        "body": [
            "taskLookAtVehicle(${0:Ped ped, int lookAt, int timeMS})"
        ],
        "prefix": "taskLookAtVehicle",
        "scope": "lua"
    },
    "getRandomCarModelInMemory": {
        "description": "getRandomCarModelInMemory",
        "body": [
            "getRandomCarModelInMemory(${0:bool unk})"
        ],
        "prefix": "getRandomCarModelInMemory",
        "scope": "lua"
    },
    "extinguishFireAtPoint": {
        "description": "extinguishFireAtPoint",
        "body": [
            "extinguishFireAtPoint(${0:float atX, float atY, float atZ, float radius})"
        ],
        "prefix": "extinguishFireAtPoint",
        "scope": "lua"
    },
    "setVehicleIsConsideredByPlayer": {
        "description": "setVehicleIsConsideredByPlayer",
        "body": [
            "setVehicleIsConsideredByPlayer(${0:Vehicle car, bool accessible})"
        ],
        "prefix": "setVehicleIsConsideredByPlayer",
        "scope": "lua"
    },
    "isPlayerInInfoZone": {
        "description": "isPlayerInInfoZone",
        "body": [
            "isPlayerInInfoZone(${0:Player player, GxtString zone})"
        ],
        "prefix": "isPlayerInInfoZone",
        "scope": "lua"
    },
    "setMissionRespectTotal": {
        "description": "setMissionRespectTotal",
        "body": [
            "setMissionRespectTotal(${0:int respect})"
        ],
        "prefix": "setMissionRespectTotal",
        "scope": "lua"
    },
    "setUpSkipAfterMission": {
        "description": "setUpSkipAfterMission",
        "body": [
            "setUpSkipAfterMission(${0:float posX, float posY, float posZ, float angle})"
        ],
        "prefix": "setUpSkipAfterMission",
        "scope": "lua"
    },
    "setCarStrong": {
        "description": "setCarStrong",
        "body": [
            "setCarStrong(${0:Vehicle car, bool strong})"
        ],
        "prefix": "setCarStrong",
        "scope": "lua"
    },
    "hideAllFrontendBlips": {
        "description": "hideAllFrontendBlips",
        "body": [
            "hideAllFrontendBlips(${0:bool hide})"
        ],
        "prefix": "hideAllFrontendBlips",
        "scope": "lua"
    },
    "setCarTraction": {
        "description": "setCarTraction",
        "body": [
            "setCarTraction(${0:Vehicle car, float traction})"
        ],
        "prefix": "setCarTraction",
        "scope": "lua"
    },
    "taskShootAtChar": {
        "description": "taskShootAtChar",
        "body": [
            "taskShootAtChar(${0:Ped ped, int atActor, int timelimit})"
        ],
        "prefix": "taskShootAtChar",
        "scope": "lua"
    },
    "getHashKey": {
        "description": "getHashKey",
        "body": [
            "getHashKey(${0:string string})"
        ],
        "prefix": "getHashKey",
        "scope": "lua"
    },
    "setScriptCoopGame": {
        "description": "setScriptCoopGame",
        "body": [
            "setScriptCoopGame(${0:bool enable})"
        ],
        "prefix": "setScriptCoopGame",
        "scope": "lua"
    },
    "setCharDruggedUp": {
        "description": "setCharDruggedUp",
        "body": [
            "setCharDruggedUp(${0:Ped ped, bool druggedUp})"
        ],
        "prefix": "setCharDruggedUp",
        "scope": "lua"
    },
    "taskShakeFist": {
        "description": "taskShakeFist",
        "body": [
            "taskShakeFist(${0:Ped ped})"
        ],
        "prefix": "taskShakeFist",
        "scope": "lua"
    },
    "isLastBuildingModelShotByPlayer": {
        "description": "isLastBuildingModelShotByPlayer",
        "body": [
            "isLastBuildingModelShotByPlayer(${0:Player player, Model modelId})"
        ],
        "prefix": "isLastBuildingModelShotByPlayer",
        "scope": "lua"
    },
    "deleteMissionTrain": {
        "description": "deleteMissionTrain",
        "body": [
            "deleteMissionTrain(${0:Vehicle train})"
        ],
        "prefix": "deleteMissionTrain",
        "scope": "lua"
    },
    "isCarInAirProper": {
        "description": "isCarInAirProper",
        "body": [
            "isCarInAirProper(${0:Vehicle car})"
        ],
        "prefix": "isCarInAirProper",
        "scope": "lua"
    },
    "setUpConversationNodeWithSpeech": {
        "description": "setUpConversationNodeWithSpeech",
        "body": [
            "setUpConversationNodeWithSpeech(${0:GxtString question, GxtString answerY, GxtString answerN, int questionWav, int answerYWav, int answerNWav})"
        ],
        "prefix": "setUpConversationNodeWithSpeech",
        "scope": "lua"
    },
    "skipToEndAndStopPlaybackRecordedCar": {
        "description": "skipToEndAndStopPlaybackRecordedCar",
        "body": [
            "skipToEndAndStopPlaybackRecordedCar(${0:Vehicle car})"
        ],
        "prefix": "skipToEndAndStopPlaybackRecordedCar",
        "scope": "lua"
    },
    "locateStoppedCharAnyMeans2d": {
        "description": "locateStoppedCharAnyMeans2d",
        "body": [
            "locateStoppedCharAnyMeans2d(${0:Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateStoppedCharAnyMeans2d",
        "scope": "lua"
    },
    "removeObjectElegantly": {
        "description": "removeObjectElegantly",
        "body": [
            "removeObjectElegantly(${0:Object object})"
        ],
        "prefix": "removeObjectElegantly",
        "scope": "lua"
    },
    "dropSecondObject": {
        "description": "dropSecondObject",
        "body": [
            "dropSecondObject(${0:Ped ped, bool to})"
        ],
        "prefix": "dropSecondObject",
        "scope": "lua"
    },
    "dxutSetControlSize": {
        "description": "dxutSetControlSize",
        "body": [
            "dxutSetControlSize(${0:DxutDialog dialog, int id, int sizeX, int sizeY})"
        ],
        "prefix": "dxutSetControlSize",
        "scope": "lua"
    },
    "showUpdateStats": {
        "description": "showUpdateStats",
        "body": [
            "showUpdateStats(${0:bool display})"
        ],
        "prefix": "showUpdateStats",
        "scope": "lua"
    },
    "setCarEscortCarLeft": {
        "description": "setCarEscortCarLeft",
        "body": [
            "setCarEscortCarLeft(${0:Vehicle car, Vehicle followCar})"
        ],
        "prefix": "setCarEscortCarLeft",
        "scope": "lua"
    },
    "attachCameraToVehicleLookAtVehicle": {
        "description": "attachCameraToVehicleLookAtVehicle",
        "body": [
            "attachCameraToVehicleLookAtVehicle(${0:Vehicle car, float offsetX, float offsetY, float offsetZ, int toCar, float tilt, int switchstyle})"
        ],
        "prefix": "attachCameraToVehicleLookAtVehicle",
        "scope": "lua"
    },
    "addToObjectRotationVelocity": {
        "description": "addToObjectRotationVelocity",
        "body": [
            "addToObjectRotationVelocity(${0:Object object, float vecX, float vecY, float vecZ})"
        ],
        "prefix": "addToObjectRotationVelocity",
        "scope": "lua"
    },
    "memory.copy": {
        "description": "memory.copy",
        "body": [
            "memory.copy(${0:uint destAddress, uint srcAddress, uint size, [bool unprotect=false]})"
        ],
        "prefix": "memory.copy",
        "scope": "lua"
    },
    "setCheckpointHeading": {
        "description": "setCheckpointHeading",
        "body": [
            "setCheckpointHeading(${0:Checkpoint checkpoint, float angle})"
        ],
        "prefix": "setCheckpointHeading",
        "scope": "lua"
    },
    "getFloatStat": {
        "description": "getFloatStat",
        "body": [
            "getFloatStat(${0:int stat})"
        ],
        "prefix": "getFloatStat",
        "scope": "lua"
    },
    "markRoadNodeAsDontWander": {
        "description": "markRoadNodeAsDontWander",
        "body": [
            "markRoadNodeAsDontWander(${0:float atX, float atY, float atZ})"
        ],
        "prefix": "markRoadNodeAsDontWander",
        "scope": "lua"
    },
    "pauseCurrentBeatTrack": {
        "description": "pauseCurrentBeatTrack",
        "body": [
            "pauseCurrentBeatTrack(${0:bool paused})"
        ],
        "prefix": "pauseCurrentBeatTrack",
        "scope": "lua"
    },
    "setTextFont": {
        "description": "setTextFont",
        "body": [
            "setTextFont(${0:int font})"
        ],
        "prefix": "setTextFont",
        "scope": "lua"
    },
    "getCurrentVehiclePaintjob": {
        "description": "getCurrentVehiclePaintjob",
        "body": [
            "getCurrentVehiclePaintjob(${0:Vehicle car})"
        ],
        "prefix": "getCurrentVehiclePaintjob",
        "scope": "lua"
    },
    "setCharUsesCollisionClosestObjectOfType": {
        "description": "setCharUsesCollisionClosestObjectOfType",
        "body": [
            "setCharUsesCollisionClosestObjectOfType(${0:float sphereX, float sphereY, float sphereZ, float radius, Model modelId, bool solid, int forActor})"
        ],
        "prefix": "setCharUsesCollisionClosestObjectOfType",
        "scope": "lua"
    },
    "hasObjectCollidedWithAnything": {
        "description": "hasObjectCollidedWithAnything",
        "body": [
            "hasObjectCollidedWithAnything(${0:Object object})"
        ],
        "prefix": "hasObjectCollidedWithAnything",
        "scope": "lua"
    },
    "explodeCarInCutsceneShakeAndBits": {
        "description": "explodeCarInCutsceneShakeAndBits",
        "body": [
            "explodeCarInCutsceneShakeAndBits(${0:Vehicle car, bool shake, bool effect, bool sound})"
        ],
        "prefix": "explodeCarInCutsceneShakeAndBits",
        "scope": "lua"
    },
    "setOnlyCreateGangMembers": {
        "description": "setOnlyCreateGangMembers",
        "body": [
            "setOnlyCreateGangMembers(${0:bool enable})"
        ],
        "prefix": "setOnlyCreateGangMembers",
        "scope": "lua"
    },
    "setCharForceDieInCar": {
        "description": "setCharForceDieInCar",
        "body": [
            "setCharForceDieInCar(${0:Ped ped, bool stayInCarWhenDead})"
        ],
        "prefix": "setCharForceDieInCar",
        "scope": "lua"
    },
    "getNumCarColours": {
        "description": "getNumCarColours",
        "body": [
            "getNumCarColours(${0:Vehicle car})"
        ],
        "prefix": "getNumCarColours",
        "scope": "lua"
    },
    "locateStoppedCar2d": {
        "description": "locateStoppedCar2d",
        "body": [
            "locateStoppedCar2d(${0:Vehicle car, float pointX, float pointY, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateStoppedCar2d",
        "scope": "lua"
    },
    "createFxSystemOnChar": {
        "description": "createFxSystemOnChar",
        "body": [
            "createFxSystemOnChar(${0:string particle, Ped ped, float offsetX, float offsetY, float offsetZ, int type})"
        ],
        "prefix": "createFxSystemOnChar",
        "scope": "lua"
    },
    "canTriggerGangWarWhenOnAMission": {
        "description": "canTriggerGangWarWhenOnAMission",
        "body": [
            "canTriggerGangWarWhenOnAMission(${0:bool can})"
        ],
        "prefix": "canTriggerGangWarWhenOnAMission",
        "scope": "lua"
    },
    "taskComplexPickupObject": {
        "description": "taskComplexPickupObject",
        "body": [
            "taskComplexPickupObject(${0:Ped ped, Object object})"
        ],
        "prefix": "taskComplexPickupObject",
        "scope": "lua"
    },
    "isObjectWithinBrainActivationRange": {
        "description": "isObjectWithinBrainActivationRange",
        "body": [
            "isObjectWithinBrainActivationRange(${0:Player player})"
        ],
        "prefix": "isObjectWithinBrainActivationRange",
        "scope": "lua"
    },
    "killFxSystem": {
        "description": "killFxSystem",
        "body": [
            "killFxSystem(${0:Particle particle})"
        ],
        "prefix": "killFxSystem",
        "scope": "lua"
    },
    "setVehicleCanBeTargetted": {
        "description": "setVehicleCanBeTargetted",
        "body": [
            "setVehicleCanBeTargetted(${0:Vehicle car, bool unk})"
        ],
        "prefix": "setVehicleCanBeTargetted",
        "scope": "lua"
    },
    "decrementFloatStat": {
        "description": "decrementFloatStat",
        "body": [
            "decrementFloatStat(${0:int stat, float float})"
        ],
        "prefix": "decrementFloatStat",
        "scope": "lua"
    },
    "killFxSystemNow": {
        "description": "killFxSystemNow",
        "body": [
            "killFxSystemNow(${0:Particle particle})"
        ],
        "prefix": "killFxSystemNow",
        "scope": "lua"
    },
    "hasObjectBeenUprooted": {
        "description": "hasObjectBeenUprooted",
        "body": [
            "hasObjectBeenUprooted(${0:Object object})"
        ],
        "prefix": "hasObjectBeenUprooted",
        "scope": "lua"
    },
    "loadMissionText": {
        "description": "loadMissionText",
        "body": [
            "loadMissionText(${0:GxtString table})"
        ],
        "prefix": "loadMissionText",
        "scope": "lua"
    },
    "sampGetAnimationNameAndFile": {
        "description": "sampGetAnimationNameAndFile",
        "body": [
            "sampGetAnimationNameAndFile(${0:int animid})"
        ],
        "prefix": "sampGetAnimationNameAndFile",
        "scope": "lua"
    },
    "resetStuffUponResurrection": {
        "description": "resetStuffUponResurrection",
        "body": [
            "resetStuffUponResurrection()"
        ],
        "prefix": "resetStuffUponResurrection",
        "scope": "lua"
    },
    "doesScriptFireExist": {
        "description": "doesScriptFireExist",
        "body": [
            "doesScriptFireExist(${0:int fire})"
        ],
        "prefix": "doesScriptFireExist",
        "scope": "lua"
    },
    "getRandomCarOfTypeInAreaNoSave": {
        "description": "getRandomCarOfTypeInAreaNoSave",
        "body": [
            "getRandomCarOfTypeInAreaNoSave(${0:float x1, float y1, float x2, float y2, Model modelId})"
        ],
        "prefix": "getRandomCarOfTypeInAreaNoSave",
        "scope": "lua"
    },
    "setCharCoordinatesNoOffset": {
        "description": "setCharCoordinatesNoOffset",
        "body": [
            "setCharCoordinatesNoOffset(${0:Ped ped, float atX, float atY, float atZ})"
        ],
        "prefix": "setCharCoordinatesNoOffset",
        "scope": "lua"
    },
    "memory.setuint32": {
        "description": "memory.setuint32",
        "body": [
            "memory.setuint32(${0:uint address, int dword, [bool unprotect=false]})"
        ],
        "prefix": "memory.setuint32",
        "scope": "lua"
    },
    "isCarDoorDamaged": {
        "description": "isCarDoorDamaged",
        "body": [
            "isCarDoorDamaged(${0:Vehicle car, int door})"
        ],
        "prefix": "isCarDoorDamaged",
        "scope": "lua"
    },
    "setSpecificZoneToTriggerGangWar": {
        "description": "setSpecificZoneToTriggerGangWar",
        "body": [
            "setSpecificZoneToTriggerGangWar(${0:GxtString zone})"
        ],
        "prefix": "setSpecificZoneToTriggerGangWar",
        "scope": "lua"
    },
    "registerScriptBrainForCodeUse": {
        "description": "registerScriptBrainForCodeUse",
        "body": [
            "registerScriptBrainForCodeUse(${0:int id, GxtString gxtString})"
        ],
        "prefix": "registerScriptBrainForCodeUse",
        "scope": "lua"
    },
    "getRandomCharInZone": {
        "description": "getRandomCharInZone",
        "body": [
            "getRandomCharInZone(${0:GxtString zone, bool pedtype, bool gang, bool criminal_prostitute})"
        ],
        "prefix": "getRandomCharInZone",
        "scope": "lua"
    },
    "isPlayerControllable": {
        "description": "isPlayerControllable",
        "body": [
            "isPlayerControllable(${0:Player player})"
        ],
        "prefix": "isPlayerControllable",
        "scope": "lua"
    },
    "switchPoliceHelis": {
        "description": "switchPoliceHelis",
        "body": [
            "switchPoliceHelis(${0:bool enable})"
        ],
        "prefix": "switchPoliceHelis",
        "scope": "lua"
    },
    "stopCharFacialTalk": {
        "description": "stopCharFacialTalk",
        "body": [
            "stopCharFacialTalk(${0:Ped ped})"
        ],
        "prefix": "stopCharFacialTalk",
        "scope": "lua"
    },
    "memory.getint64": {
        "description": "memory.getint64",
        "body": [
            "memory.getint64(${0:uint address, [bool unprotect=false]})"
        ],
        "prefix": "memory.getint64",
        "scope": "lua"
    },
    "playBeatTrack": {
        "description": "playBeatTrack",
        "body": [
            "playBeatTrack()"
        ],
        "prefix": "playBeatTrack",
        "scope": "lua"
    },
    "getCutsceneTime": {
        "description": "getCutsceneTime",
        "body": [
            "getCutsceneTime()"
        ],
        "prefix": "getCutsceneTime",
        "scope": "lua"
    },
    "hasSpecialCharacterLoaded": {
        "description": "hasSpecialCharacterLoaded",
        "body": [
            "hasSpecialCharacterLoaded(${0:int id})"
        ],
        "prefix": "hasSpecialCharacterLoaded",
        "scope": "lua"
    },
    "hasStreamedScriptLoaded": {
        "description": "hasStreamedScriptLoaded",
        "body": [
            "hasStreamedScriptLoaded(${0:int script})"
        ],
        "prefix": "hasStreamedScriptLoaded",
        "scope": "lua"
    },
    "raknetSendRpc": {
        "description": "raknetSendRpc",
        "body": [
            "raknetSendRpc(${0:int rpc, Bitstream bs})"
        ],
        "prefix": "raknetSendRpc",
        "scope": "lua"
    },
    "setObjectRenderScorched": {
        "description": "setObjectRenderScorched",
        "body": [
            "setObjectRenderScorched(${0:Object object, bool fireproof})"
        ],
        "prefix": "setObjectRenderScorched",
        "scope": "lua"
    },
    "setCharUsesUpperbodyDamageAnimsOnly": {
        "description": "setCharUsesUpperbodyDamageAnimsOnly",
        "body": [
            "setCharUsesUpperbodyDamageAnimsOnly(${0:Ped ped, bool uninterupted})"
        ],
        "prefix": "setCharUsesUpperbodyDamageAnimsOnly",
        "scope": "lua"
    },
    "getHudColour": {
        "description": "getHudColour",
        "body": [
            "getHudColour(${0:int interface})"
        ],
        "prefix": "getHudColour",
        "scope": "lua"
    },
    "doesCarHaveStuckCarCheck": {
        "description": "doesCarHaveStuckCarCheck",
        "body": [
            "doesCarHaveStuckCarCheck(${0:Vehicle car})"
        ],
        "prefix": "doesCarHaveStuckCarCheck",
        "scope": "lua"
    },
    "giveMeleeAttackToChar": {
        "description": "giveMeleeAttackToChar",
        "body": [
            "giveMeleeAttackToChar(${0:Ped ped, int fightingStyle, int moves})"
        ],
        "prefix": "giveMeleeAttackToChar",
        "scope": "lua"
    },
    "get2dLinesIntersectPoint": {
        "description": "get2dLinesIntersectPoint",
        "body": [
            "get2dLinesIntersectPoint(${0:float l1x1, float l1y1, float l1x2, float l1y2, float l2x1, float l2y1, float l2x2, float l2y2})"
        ],
        "prefix": "get2dLinesIntersectPoint",
        "scope": "lua"
    },
    "taskUseAtm": {
        "description": "taskUseAtm",
        "body": [
            "taskUseAtm(${0:Ped ped})"
        ],
        "prefix": "taskUseAtm",
        "scope": "lua"
    },
    "winchCanPickVehicleUp": {
        "description": "winchCanPickVehicleUp",
        "body": [
            "winchCanPickVehicleUp(${0:Vehicle car, bool attractive})"
        ],
        "prefix": "winchCanPickVehicleUp",
        "scope": "lua"
    },
    "buildPlayerModel": {
        "description": "buildPlayerModel",
        "body": [
            "buildPlayerModel(${0:Player player})"
        ],
        "prefix": "buildPlayerModel",
        "scope": "lua"
    },
    "freezeCarPosition": {
        "description": "freezeCarPosition",
        "body": [
            "freezeCarPosition(${0:Vehicle car, bool locked})"
        ],
        "prefix": "freezeCarPosition",
        "scope": "lua"
    },
    "getStringWidth": {
        "description": "getStringWidth",
        "body": [
            "getStringWidth(${0:GxtString gxtString})"
        ],
        "prefix": "getStringWidth",
        "scope": "lua"
    },
    "getMenuItemSelected": {
        "description": "getMenuItemSelected",
        "body": [
            "getMenuItemSelected(${0:int menu})"
        ],
        "prefix": "getMenuItemSelected",
        "scope": "lua"
    },
    "taskPlayAnimWithFlags": {
        "description": "taskPlayAnimWithFlags",
        "body": [
            "taskPlayAnimWithFlags(${0:Ped ped, string animation, string ifp, float framedelta, bool loopA, bool lockX, bool lockY, bool lockF, int time, bool force, bool lockZ})"
        ],
        "prefix": "taskPlayAnimWithFlags",
        "scope": "lua"
    },
    "addExplosionNoSound": {
        "description": "addExplosionNoSound",
        "body": [
            "addExplosionNoSound(${0:float pX, float pY, float pZ, int type})"
        ],
        "prefix": "addExplosionNoSound",
        "scope": "lua"
    },
    "addCharDecisionMakerEventResponse": {
        "description": "addCharDecisionMakerEventResponse",
        "body": [
            "addCharDecisionMakerEventResponse(${0:int maker, int event, int taskID, float respect, float hate, float like, float dislike, bool inCar, bool onFoot})"
        ],
        "prefix": "addCharDecisionMakerEventResponse",
        "scope": "lua"
    },
    "dxutAddSlider": {
        "description": "dxutAddSlider",
        "body": [
            "dxutAddSlider(${0:DxutDialog dialog, int id, int posX, int posY, int sizeX, int sizeY, int max})"
        ],
        "prefix": "dxutAddSlider",
        "scope": "lua"
    },
    "getDeadCharCoordinates": {
        "description": "getDeadCharCoordinates",
        "body": [
            "getDeadCharCoordinates(${0:Ped ped})"
        ],
        "prefix": "getDeadCharCoordinates",
        "scope": "lua"
    },
    "createHorseshoePickup": {
        "description": "createHorseshoePickup",
        "body": [
            "createHorseshoePickup(${0:float atX, float atY, float atZ})"
        ],
        "prefix": "createHorseshoePickup",
        "scope": "lua"
    },
    "locateStoppedCharOnFoot2d": {
        "description": "locateStoppedCharOnFoot2d",
        "body": [
            "locateStoppedCharOnFoot2d(${0:Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateStoppedCharOnFoot2d",
        "scope": "lua"
    },
    "unmarkAllRoadNodesAsDontWander": {
        "description": "unmarkAllRoadNodesAsDontWander",
        "body": [
            "unmarkAllRoadNodesAsDontWander()"
        ],
        "prefix": "unmarkAllRoadNodesAsDontWander",
        "scope": "lua"
    },
    "setPlayerDrunkenness": {
        "description": "setPlayerDrunkenness",
        "body": [
            "setPlayerDrunkenness(${0:Player player, int drunk})"
        ],
        "prefix": "setPlayerDrunkenness",
        "scope": "lua"
    },
    "addBlipForDeadChar": {
        "description": "addBlipForDeadChar",
        "body": [
            "addBlipForDeadChar(${0:Ped ped})"
        ],
        "prefix": "addBlipForDeadChar",
        "scope": "lua"
    },
    "setTextEdge": {
        "description": "setTextEdge",
        "body": [
            "setTextEdge(${0:int size, int r, int g, int b, int a})"
        ],
        "prefix": "setTextEdge",
        "scope": "lua"
    },
    "printWithNumberNow": {
        "description": "printWithNumberNow",
        "body": [
            "printWithNumberNow(${0:GxtString gxtString, int number, int time, int flag})"
        ],
        "prefix": "printWithNumberNow",
        "scope": "lua"
    },
    "allocateStreamedScriptToObject": {
        "description": "allocateStreamedScriptToObject",
        "body": [
            "allocateStreamedScriptToObject(${0:int externalScript, Model objectModel, int priority, float radius, int type})"
        ],
        "prefix": "allocateStreamedScriptToObject",
        "scope": "lua"
    },
    "setTextBackground": {
        "description": "setTextBackground",
        "body": [
            "setTextBackground(${0:bool background})"
        ],
        "prefix": "setTextBackground",
        "scope": "lua"
    },
    "changeBlipDisplay": {
        "description": "changeBlipDisplay",
        "body": [
            "changeBlipDisplay(${0:Marker marker, int mode})"
        ],
        "prefix": "changeBlipDisplay",
        "scope": "lua"
    },
    "isAreaOccupied": {
        "description": "isAreaOccupied",
        "body": [
            "isAreaOccupied(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool solid, bool car, bool actor, bool object, bool particle})"
        ],
        "prefix": "isAreaOccupied",
        "scope": "lua"
    },
    "disableCharSpeech": {
        "description": "disableCharSpeech",
        "body": [
            "disableCharSpeech(${0:Ped ped, bool disable})"
        ],
        "prefix": "disableCharSpeech",
        "scope": "lua"
    },
    "getCurrentDate": {
        "description": "getCurrentDate",
        "body": [
            "getCurrentDate()"
        ],
        "prefix": "getCurrentDate",
        "scope": "lua"
    },
    "taskGotoChar": {
        "description": "taskGotoChar",
        "body": [
            "taskGotoChar(${0:Ped ped, Ped toActor, int timelimit, float stopWithinRadius})"
        ],
        "prefix": "taskGotoChar",
        "scope": "lua"
    },
    "loadGroupDecisionMaker": {
        "description": "loadGroupDecisionMaker",
        "body": [
            "loadGroupDecisionMaker(${0:int type})"
        ],
        "prefix": "loadGroupDecisionMaker",
        "scope": "lua"
    },
    "getSoundLevelAtCoords": {
        "description": "getSoundLevelAtCoords",
        "body": [
            "getSoundLevelAtCoords(${0:Ped ped, float X, float Y, float Z})"
        ],
        "prefix": "getSoundLevelAtCoords",
        "scope": "lua"
    },
    "clearSmallPrints": {
        "description": "clearSmallPrints",
        "body": [
            "clearSmallPrints()"
        ],
        "prefix": "clearSmallPrints",
        "scope": "lua"
    },
    "isCharOnFoot": {
        "description": "isCharOnFoot",
        "body": [
            "isCharOnFoot(${0:Ped ped})"
        ],
        "prefix": "isCharOnFoot",
        "scope": "lua"
    },
    "isCharStoppedInAreaInCar2d": {
        "description": "isCharStoppedInAreaInCar2d",
        "body": [
            "isCharStoppedInAreaInCar2d(${0:Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
        ],
        "prefix": "isCharStoppedInAreaInCar2d",
        "scope": "lua"
    },
    "drawSprite": {
        "description": "drawSprite",
        "body": [
            "drawSprite(${0:int texture, float positionX, float positionY, float width, float height, int r, int g, int b, int a})"
        ],
        "prefix": "drawSprite",
        "scope": "lua"
    },
    "getTotalNumberOfPedsKilledByPlayer": {
        "description": "getTotalNumberOfPedsKilledByPlayer",
        "body": [
            "getTotalNumberOfPedsKilledByPlayer(${0:Player player})"
        ],
        "prefix": "getTotalNumberOfPedsKilledByPlayer",
        "scope": "lua"
    },
    "cameraSetVectorMove": {
        "description": "cameraSetVectorMove",
        "body": [
            "cameraSetVectorMove(${0:float cameraX, float cameraY, float cameraZ, float positionX, float positionY, float positionZ, int time, bool smoothTransition})"
        ],
        "prefix": "cameraSetVectorMove",
        "scope": "lua"
    },
    "attachCharToCar": {
        "description": "attachCharToCar",
        "body": [
            "attachCharToCar(${0:Ped ped, Vehicle car, float offsetX, float offsetY, float offsetZ, int position, float shootingAngleLimit, int weapon})"
        ],
        "prefix": "attachCharToCar",
        "scope": "lua"
    },
    "addSpriteBlipForContactPoint": {
        "description": "addSpriteBlipForContactPoint",
        "body": [
            "addSpriteBlipForContactPoint(${0:float atX, float atY, float atZ, int icon})"
        ],
        "prefix": "addSpriteBlipForContactPoint",
        "scope": "lua"
    },
    "getCurrentCarMod": {
        "description": "getCurrentCarMod",
        "body": [
            "getCurrentCarMod(${0:Vehicle car, int slot})"
        ],
        "prefix": "getCurrentCarMod",
        "scope": "lua"
    },
    "requestCollision": {
        "description": "requestCollision",
        "body": [
            "requestCollision(${0:float X, float Y})"
        ],
        "prefix": "requestCollision",
        "scope": "lua"
    },
    "createObjectNoOffset": {
        "description": "createObjectNoOffset",
        "body": [
            "createObjectNoOffset(${0:Model modelId, float atX, float atY, float atZ})"
        ],
        "prefix": "createObjectNoOffset",
        "scope": "lua"
    },
    "setSequenceToRepeat": {
        "description": "setSequenceToRepeat",
        "body": [
            "setSequenceToRepeat(${0:int pack, bool loop})"
        ],
        "prefix": "setSequenceToRepeat",
        "scope": "lua"
    },
    "setObjectTurnMass": {
        "description": "setObjectTurnMass",
        "body": [
            "setObjectTurnMass(${0:Object object, float turnMass})"
        ],
        "prefix": "setObjectTurnMass",
        "scope": "lua"
    },
    "storeClock": {
        "description": "storeClock",
        "body": [
            "storeClock()"
        ],
        "prefix": "storeClock",
        "scope": "lua"
    },
    "changePlaybackToUseAi": {
        "description": "changePlaybackToUseAi",
        "body": [
            "changePlaybackToUseAi(${0:Vehicle car})"
        ],
        "prefix": "changePlaybackToUseAi",
        "scope": "lua"
    },
    "incrementFloatStat": {
        "description": "incrementFloatStat",
        "body": [
            "incrementFloatStat(${0:int stat, float add})"
        ],
        "prefix": "incrementFloatStat",
        "scope": "lua"
    },
    "forceWeather": {
        "description": "forceWeather",
        "body": [
            "forceWeather(${0:int weather})"
        ],
        "prefix": "forceWeather",
        "scope": "lua"
    },
    "setHeliOrientation": {
        "description": "setHeliOrientation",
        "body": [
            "setHeliOrientation(${0:Vehicle heli, float angle})"
        ],
        "prefix": "setHeliOrientation",
        "scope": "lua"
    },
    "locateStoppedCharInCar2d": {
        "description": "locateStoppedCharInCar2d",
        "body": [
            "locateStoppedCharInCar2d(${0:Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateStoppedCharInCar2d",
        "scope": "lua"
    },
    "setCharIsChrisCriminal": {
        "description": "setCharIsChrisCriminal",
        "body": [
            "setCharIsChrisCriminal(${0:Ped ped, bool flag})"
        ],
        "prefix": "setCharIsChrisCriminal",
        "scope": "lua"
    },
    "getPlayerGroup": {
        "description": "getPlayerGroup",
        "body": [
            "getPlayerGroup(${0:Player player})"
        ],
        "prefix": "getPlayerGroup",
        "scope": "lua"
    },
    "isThisModelACar": {
        "description": "isThisModelACar",
        "body": [
            "isThisModelACar(${0:Model modelId})"
        ],
        "prefix": "isThisModelACar",
        "scope": "lua"
    },
    "taskCharSlideToCoord": {
        "description": "taskCharSlideToCoord",
        "body": [
            "taskCharSlideToCoord(${0:Ped ped, float toX, float toY, float toZ, float angle, float withinRadius})"
        ],
        "prefix": "taskCharSlideToCoord",
        "scope": "lua"
    },
    "stopBeatTrack": {
        "description": "stopBeatTrack",
        "body": [
            "stopBeatTrack()"
        ],
        "prefix": "stopBeatTrack",
        "scope": "lua"
    },
    "getObjectTurnMass": {
        "description": "getObjectTurnMass",
        "body": [
            "getObjectTurnMass(${0:Object object})"
        ],
        "prefix": "getObjectTurnMass",
        "scope": "lua"
    },
    "getHeadingFromVector2d": {
        "description": "getHeadingFromVector2d",
        "body": [
            "getHeadingFromVector2d(${0:float pX, float pY})"
        ],
        "prefix": "getHeadingFromVector2d",
        "scope": "lua"
    },
    "attachMissionAudioToObject": {
        "description": "attachMissionAudioToObject",
        "body": [
            "attachMissionAudioToObject(${0:int id, Object object})"
        ],
        "prefix": "attachMissionAudioToObject",
        "scope": "lua"
    },
    "taskDrivePointRoute": {
        "description": "taskDrivePointRoute",
        "body": [
            "taskDrivePointRoute(${0:Ped ped, Vehicle car, float speed})"
        ],
        "prefix": "taskDrivePointRoute",
        "scope": "lua"
    },
    "getRadioChannel": {
        "description": "getRadioChannel",
        "body": [
            "getRadioChannel()"
        ],
        "prefix": "getRadioChannel",
        "scope": "lua"
    },
    "getClothesItem": {
        "description": "getClothesItem",
        "body": [
            "getClothesItem(${0:Player player, int bodypart})"
        ],
        "prefix": "getClothesItem",
        "scope": "lua"
    },
    "getCarUprightValue": {
        "description": "getCarUprightValue",
        "body": [
            "getCarUprightValue(${0:Vehicle car})"
        ],
        "prefix": "getCarUprightValue",
        "scope": "lua"
    },
    "clearAttractor": {
        "description": "clearAttractor",
        "body": [
            "clearAttractor(${0:int handle})"
        ],
        "prefix": "clearAttractor",
        "scope": "lua"
    },
    "markCarAsConvoyCar": {
        "description": "markCarAsConvoyCar",
        "body": [
            "markCarAsConvoyCar(${0:Vehicle car, bool convoy})"
        ],
        "prefix": "markCarAsConvoyCar",
        "scope": "lua"
    },
    "taskDieNamedAnim": {
        "description": "taskDieNamedAnim",
        "body": [
            "taskDieNamedAnim(${0:Ped ped, string animation, string ifp1, float ifp2, int time})"
        ],
        "prefix": "taskDieNamedAnim",
        "scope": "lua"
    },
    "setFreebiesInVehicle": {
        "description": "setFreebiesInVehicle",
        "body": [
            "setFreebiesInVehicle(${0:Vehicle car, bool containsGoodies})"
        ],
        "prefix": "setFreebiesInVehicle",
        "scope": "lua"
    },
    "clearArea": {
        "description": "clearArea",
        "body": [
            "clearArea(${0:float atX, float atY, float atZ, float radius, bool area})"
        ],
        "prefix": "clearArea",
        "scope": "lua"
    },
    "getNthClosestCarNode": {
        "description": "getNthClosestCarNode",
        "body": [
            "getNthClosestCarNode(${0:float X, float Y, float Z, int type})"
        ],
        "prefix": "getNthClosestCarNode",
        "scope": "lua"
    },
    "performSequenceTaskFromProgress": {
        "description": "performSequenceTaskFromProgress",
        "body": [
            "performSequenceTaskFromProgress(${0:Ped ped, int sequence, int unkProgress1, int unkProgress2})"
        ],
        "prefix": "performSequenceTaskFromProgress",
        "scope": "lua"
    },
    "isPcUsingJoypad": {
        "description": "isPcUsingJoypad",
        "body": [
            "isPcUsingJoypad()"
        ],
        "prefix": "isPcUsingJoypad",
        "scope": "lua"
    },
    "addVelocityRelativeToObjectVelocity": {
        "description": "addVelocityRelativeToObjectVelocity",
        "body": [
            "addVelocityRelativeToObjectVelocity(${0:Object object, float vecX, float vecY, float vecZ})"
        ],
        "prefix": "addVelocityRelativeToObjectVelocity",
        "scope": "lua"
    },
    "registerOddjobMissionPassed": {
        "description": "registerOddjobMissionPassed",
        "body": [
            "registerOddjobMissionPassed()"
        ],
        "prefix": "registerOddjobMissionPassed",
        "scope": "lua"
    },
    "displayOnscreenTimer": {
        "description": "displayOnscreenTimer",
        "body": [
            "displayOnscreenTimer(${0:VarId var, bool countInDirection})"
        ],
        "prefix": "displayOnscreenTimer",
        "scope": "lua"
    },
    "locateCharAnyMeans2d": {
        "description": "locateCharAnyMeans2d",
        "body": [
            "locateCharAnyMeans2d(${0:Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCharAnyMeans2d",
        "scope": "lua"
    },
    "setCharDrownsInWater": {
        "description": "setCharDrownsInWater",
        "body": [
            "setCharDrownsInWater(${0:Ped ped, bool drowns})"
        ],
        "prefix": "setCharDrownsInWater",
        "scope": "lua"
    },
    "setVisibilityOfClosestObjectOfType": {
        "description": "setVisibilityOfClosestObjectOfType",
        "body": [
            "setVisibilityOfClosestObjectOfType(${0:float atX, float atY, float atZ, float radius, Model modelId, bool visibility})"
        ],
        "prefix": "setVisibilityOfClosestObjectOfType",
        "scope": "lua"
    },
    "setDrunkInputDelay": {
        "description": "setDrunkInputDelay",
        "body": [
            "setDrunkInputDelay(${0:Player player, int handlingResponsiveness})"
        ],
        "prefix": "setDrunkInputDelay",
        "scope": "lua"
    },
    "areAnyCarCheatsActivated": {
        "description": "areAnyCarCheatsActivated",
        "body": [
            "areAnyCarCheatsActivated()"
        ],
        "prefix": "areAnyCarCheatsActivated",
        "scope": "lua"
    },
    "setObjectRotationVelocity": {
        "description": "setObjectRotationVelocity",
        "body": [
            "setObjectRotationVelocity(${0:Object object, float vecX, float vecY, float vecZ})"
        ],
        "prefix": "setObjectRotationVelocity",
        "scope": "lua"
    },
    "createScriptRoadblock": {
        "description": "createScriptRoadblock",
        "body": [
            "createScriptRoadblock(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, int type})"
        ],
        "prefix": "createScriptRoadblock",
        "scope": "lua"
    },
    "taskFollowPathNodesToCoord": {
        "description": "taskFollowPathNodesToCoord",
        "body": [
            "taskFollowPathNodesToCoord(${0:Ped ped, float pathX, float pathY, float pathZ, int mode, int time})"
        ],
        "prefix": "taskFollowPathNodesToCoord",
        "scope": "lua"
    },
    "dontRemoveObject": {
        "description": "dontRemoveObject",
        "body": [
            "dontRemoveObject(${0:Object object})"
        ],
        "prefix": "dontRemoveObject",
        "scope": "lua"
    },
    "attachFxSystemToCharBone": {
        "description": "attachFxSystemToCharBone",
        "body": [
            "attachFxSystemToCharBone(${0:Particle particle, Ped ped, int mode})"
        ],
        "prefix": "attachFxSystemToCharBone",
        "scope": "lua"
    },
    "isCarStoppedInArea2d": {
        "description": "isCarStoppedInArea2d",
        "body": [
            "isCarStoppedInArea2d(${0:Vehicle car, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
        ],
        "prefix": "isCarStoppedInArea2d",
        "scope": "lua"
    },
    "hasCharBeenDamagedByChar": {
        "description": "hasCharBeenDamagedByChar",
        "body": [
            "hasCharBeenDamagedByChar(${0:Ped ped, Ped byActor})"
        ],
        "prefix": "hasCharBeenDamagedByChar",
        "scope": "lua"
    },
    "taskFallAndGetUp": {
        "description": "taskFallAndGetUp",
        "body": [
            "taskFallAndGetUp(${0:Ped ped, bool int2, int time})"
        ],
        "prefix": "taskFallAndGetUp",
        "scope": "lua"
    },
    "getCharAnimTotalTime": {
        "description": "getCharAnimTotalTime",
        "body": [
            "getCharAnimTotalTime(${0:Ped ped, string animation})"
        ],
        "prefix": "getCharAnimTotalTime",
        "scope": "lua"
    },
    "setCharWantedByPolice": {
        "description": "setCharWantedByPolice",
        "body": [
            "setCharWantedByPolice(${0:Ped ped, bool wanted})"
        ],
        "prefix": "setCharWantedByPolice",
        "scope": "lua"
    },
    "setEnterCarRangeMultiplier": {
        "description": "setEnterCarRangeMultiplier",
        "body": [
            "setEnterCarRangeMultiplier(${0:float float1})"
        ],
        "prefix": "setEnterCarRangeMultiplier",
        "scope": "lua"
    },
    "addVehicleMod": {
        "description": "addVehicleMod",
        "body": [
            "addVehicleMod(${0:Vehicle car, Model component})"
        ],
        "prefix": "addVehicleMod",
        "scope": "lua"
    },
    "hasAnimationLoaded": {
        "description": "hasAnimationLoaded",
        "body": [
            "hasAnimationLoaded(${0:string animation})"
        ],
        "prefix": "hasAnimationLoaded",
        "scope": "lua"
    },
    "addExplosionVariableShake": {
        "description": "addExplosionVariableShake",
        "body": [
            "addExplosionVariableShake(${0:float atX, float atY, float atZ, int type, float cameraShake})"
        ],
        "prefix": "addExplosionVariableShake",
        "scope": "lua"
    },
    "displayTextWith2Numbers": {
        "description": "displayTextWith2Numbers",
        "body": [
            "displayTextWith2Numbers(${0:float x, float y, GxtString gxtString, int numbersX, int numbersY})"
        ],
        "prefix": "displayTextWith2Numbers",
        "scope": "lua"
    },
    "drawWeaponshopCorona": {
        "description": "drawWeaponshopCorona",
        "body": [
            "drawWeaponshopCorona(${0:float X, float Y, float Z, float radius, int type, int flare, int r, int g, int b})"
        ],
        "prefix": "drawWeaponshopCorona",
        "scope": "lua"
    },
    "addPoliceRestart": {
        "description": "addPoliceRestart",
        "body": [
            "addPoliceRestart(${0:float atX, float atY, float atZ, float angle, int townNumber})"
        ],
        "prefix": "addPoliceRestart",
        "scope": "lua"
    },
    "setCarStraightLineDistance": {
        "description": "setCarStraightLineDistance",
        "body": [
            "setCarStraightLineDistance(${0:Vehicle car, int radius})"
        ],
        "prefix": "setCarStraightLineDistance",
        "scope": "lua"
    },
    "setUpConversationEndNodeWithSpeech": {
        "description": "setUpConversationEndNodeWithSpeech",
        "body": [
            "setUpConversationEndNodeWithSpeech(${0:GxtString gxtString, int speech})"
        ],
        "prefix": "setUpConversationEndNodeWithSpeech",
        "scope": "lua"
    },
    "cancelOverrideRestart": {
        "description": "cancelOverrideRestart",
        "body": [
            "cancelOverrideRestart()"
        ],
        "prefix": "cancelOverrideRestart",
        "scope": "lua"
    },
    "taskFleeChar": {
        "description": "taskFleeChar",
        "body": [
            "taskFleeChar(${0:Ped ped, Ped fromActor, float radius, int timelimit})"
        ],
        "prefix": "taskFleeChar",
        "scope": "lua"
    },
    "getObjectRotationVelocity": {
        "description": "getObjectRotationVelocity",
        "body": [
            "getObjectRotationVelocity(${0:Object object})"
        ],
        "prefix": "getObjectRotationVelocity",
        "scope": "lua"
    },
    "canCharSeeDeadChar": {
        "description": "canCharSeeDeadChar",
        "body": [
            "canCharSeeDeadChar(${0:Ped ped, int pedtype})"
        ],
        "prefix": "canCharSeeDeadChar",
        "scope": "lua"
    },
    "damageCarDoor": {
        "description": "damageCarDoor",
        "body": [
            "damageCarDoor(${0:Vehicle car, int door})"
        ],
        "prefix": "damageCarDoor",
        "scope": "lua"
    },
    "showBlipsOnAllLevels": {
        "description": "showBlipsOnAllLevels",
        "body": [
            "showBlipsOnAllLevels(${0:bool enable})"
        ],
        "prefix": "showBlipsOnAllLevels",
        "scope": "lua"
    },
    "setInterpolationParameters": {
        "description": "setInterpolationParameters",
        "body": [
            "setInterpolationParameters(${0:float delay, int time})"
        ],
        "prefix": "setInterpolationParameters",
        "scope": "lua"
    },
    "isFlameInAngledArea2d": {
        "description": "isFlameInAngledArea2d",
        "body": [
            "isFlameInAngledArea2d(${0:float x1, float y1, float x2, float y2, float angle, bool sphere})"
        ],
        "prefix": "isFlameInAngledArea2d",
        "scope": "lua"
    },
    "doesObjectHaveThisModel": {
        "description": "doesObjectHaveThisModel",
        "body": [
            "doesObjectHaveThisModel(${0:Object object, Model modelId})"
        ],
        "prefix": "doesObjectHaveThisModel",
        "scope": "lua"
    },
    "clearSpecificZonesToTriggerGangWar": {
        "description": "clearSpecificZonesToTriggerGangWar",
        "body": [
            "clearSpecificZonesToTriggerGangWar()"
        ],
        "prefix": "clearSpecificZonesToTriggerGangWar",
        "scope": "lua"
    },
    "finishSettingUpConversation": {
        "description": "finishSettingUpConversation",
        "body": [
            "finishSettingUpConversation()"
        ],
        "prefix": "finishSettingUpConversation",
        "scope": "lua"
    },
    "setCleoSharedVar": {
        "description": "setCleoSharedVar",
        "body": [
            "setCleoSharedVar(${0:int var, int value})"
        ],
        "prefix": "setCleoSharedVar",
        "scope": "lua"
    },
    "addToObjectVelocity": {
        "description": "addToObjectVelocity",
        "body": [
            "addToObjectVelocity(${0:Object object, float velocityX, float velocityY, float velocityZ})"
        ],
        "prefix": "addToObjectVelocity",
        "scope": "lua"
    },
    "isPs2KeyboardKeyJustPressed": {
        "description": "isPs2KeyboardKeyJustPressed",
        "body": [
            "isPs2KeyboardKeyJustPressed(${0:int key})"
        ],
        "prefix": "isPs2KeyboardKeyJustPressed",
        "scope": "lua"
    },
    "taskKillCharOnFoot": {
        "description": "taskKillCharOnFoot",
        "body": [
            "taskKillCharOnFoot(${0:Ped ped, Ped killActor})"
        ],
        "prefix": "taskKillCharOnFoot",
        "scope": "lua"
    },
    "setClosestEntryExitFlag": {
        "description": "setClosestEntryExitFlag",
        "body": [
            "setClosestEntryExitFlag(${0:float atX, float atY, float radius, int bitmask, bool flag})"
        ],
        "prefix": "setClosestEntryExitFlag",
        "scope": "lua"
    },
    "markCharAsNoLongerNeeded": {
        "description": "markCharAsNoLongerNeeded",
        "body": [
            "markCharAsNoLongerNeeded(${0:Ped ped})"
        ],
        "prefix": "markCharAsNoLongerNeeded",
        "scope": "lua"
    },
    "hasObjectBeenDamaged": {
        "description": "hasObjectBeenDamaged",
        "body": [
            "hasObjectBeenDamaged(${0:Object object})"
        ],
        "prefix": "hasObjectBeenDamaged",
        "scope": "lua"
    },
    "getNthClosestCarNodeWithHeading": {
        "description": "getNthClosestCarNodeWithHeading",
        "body": [
            "getNthClosestCarNodeWithHeading(${0:float forX, float forY, float forZ, int direction})"
        ],
        "prefix": "getNthClosestCarNodeWithHeading",
        "scope": "lua"
    },
    "setPedDensityMultiplier": {
        "description": "setPedDensityMultiplier",
        "body": [
            "setPedDensityMultiplier(${0:float multiplier})"
        ],
        "prefix": "setPedDensityMultiplier",
        "scope": "lua"
    },
    "clearCharLastDamageEntity": {
        "description": "clearCharLastDamageEntity",
        "body": [
            "clearCharLastDamageEntity(${0:Ped ped})"
        ],
        "prefix": "clearCharLastDamageEntity",
        "scope": "lua"
    },
    "memory.setuint64": {
        "description": "memory.setuint64",
        "body": [
            "memory.setuint64(${0:uint address, double qword, [bool unprotect=false]})"
        ],
        "prefix": "memory.setuint64",
        "scope": "lua"
    },
    "isPs2KeyboardKeyPressed": {
        "description": "isPs2KeyboardKeyPressed",
        "body": [
            "isPs2KeyboardKeyPressed(${0:int key})"
        ],
        "prefix": "isPs2KeyboardKeyPressed",
        "scope": "lua"
    },
    "getCleoSharedVar": {
        "description": "getCleoSharedVar",
        "body": [
            "getCleoSharedVar(${0:int var})"
        ],
        "prefix": "getCleoSharedVar",
        "scope": "lua"
    },
    "setPlayerMood": {
        "description": "setPlayerMood",
        "body": [
            "setPlayerMood(${0:Player player, int flag, int time})"
        ],
        "prefix": "setPlayerMood",
        "scope": "lua"
    },
    "burstCarTire": {
        "description": "burstCarTire",
        "body": [
            "burstCarTire(${0:Vehicle car, int tire})"
        ],
        "prefix": "burstCarTire",
        "scope": "lua"
    },
    "locateStoppedCar3d": {
        "description": "locateStoppedCar3d",
        "body": [
            "locateStoppedCar3d(${0:Vehicle car, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateStoppedCar3d",
        "scope": "lua"
    },
    "setObjectDynamic": {
        "description": "setObjectDynamic",
        "body": [
            "setObjectDynamic(${0:Object object, bool moveable})"
        ],
        "prefix": "setObjectDynamic",
        "scope": "lua"
    },
    "setTargetCarForMissionGarage": {
        "description": "setTargetCarForMissionGarage",
        "body": [
            "setTargetCarForMissionGarage(${0:GxtString garage, Vehicle car})"
        ],
        "prefix": "setTargetCarForMissionGarage",
        "scope": "lua"
    },
    "getClosestCarNodeWithHeading": {
        "description": "getClosestCarNodeWithHeading",
        "body": [
            "getClosestCarNodeWithHeading(${0:float X, float Y, float Z})"
        ],
        "prefix": "getClosestCarNodeWithHeading",
        "scope": "lua"
    },
    "locateCharOnFootCar3d": {
        "description": "locateCharOnFootCar3d",
        "body": [
            "locateCharOnFootCar3d(${0:Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag})"
        ],
        "prefix": "locateCharOnFootCar3d",
        "scope": "lua"
    },
    "startPlaybackRecordedCar": {
        "description": "startPlaybackRecordedCar",
        "body": [
            "startPlaybackRecordedCar(${0:Vehicle car, int path})"
        ],
        "prefix": "startPlaybackRecordedCar",
        "scope": "lua"
    },
    "setWeatherToAppropriateTypeNow": {
        "description": "setWeatherToAppropriateTypeNow",
        "body": [
            "setWeatherToAppropriateTypeNow()"
        ],
        "prefix": "setWeatherToAppropriateTypeNow",
        "scope": "lua"
    },
    "switchStreaming": {
        "description": "switchStreaming",
        "body": [
            "switchStreaming(${0:bool streaming})"
        ],
        "prefix": "switchStreaming",
        "scope": "lua"
    },
    "setInformRespectedFriends": {
        "description": "setInformRespectedFriends",
        "body": [
            "setInformRespectedFriends(${0:int flags, float radius, int pedsToScan})"
        ],
        "prefix": "setInformRespectedFriends",
        "scope": "lua"
    },
    "stopPlaybackRecordedCar": {
        "description": "stopPlaybackRecordedCar",
        "body": [
            "stopPlaybackRecordedCar(${0:Vehicle car})"
        ],
        "prefix": "stopPlaybackRecordedCar",
        "scope": "lua"
    },
    "vehicleDoesProvideCover": {
        "description": "vehicleDoesProvideCover",
        "body": [
            "vehicleDoesProvideCover(${0:Vehicle car, bool providesCover})"
        ],
        "prefix": "vehicleDoesProvideCover",
        "scope": "lua"
    },
    "startCutscene": {
        "description": "startCutscene",
        "body": [
            "startCutscene()"
        ],
        "prefix": "startCutscene",
        "scope": "lua"
    },
    "setTextDropshadow": {
        "description": "setTextDropshadow",
        "body": [
            "setTextDropshadow(${0:int shadow, int r, int g, int b, int a})"
        ],
        "prefix": "setTextDropshadow",
        "scope": "lua"
    },
    "storeCarModState": {
        "description": "storeCarModState",
        "body": [
            "storeCarModState()"
        ],
        "prefix": "storeCarModState",
        "scope": "lua"
    },
    "setSenseRange": {
        "description": "setSenseRange",
        "body": [
            "setSenseRange(${0:Ped ped, float accuracy})"
        ],
        "prefix": "setSenseRange",
        "scope": "lua"
    },
    "clearSkip": {
        "description": "clearSkip",
        "body": [
            "clearSkip()"
        ],
        "prefix": "clearSkip",
        "scope": "lua"
    },
    "taskStayInSamePlace": {
        "description": "taskStayInSamePlace",
        "body": [
            "taskStayInSamePlace(${0:Ped ped, bool stay})"
        ],
        "prefix": "taskStayInSamePlace",
        "scope": "lua"
    },
    "locateCharOnFootChar2d": {
        "description": "locateCharOnFootChar2d",
        "body": [
            "locateCharOnFootChar2d(${0:Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCharOnFootChar2d",
        "scope": "lua"
    },
    "switchRoadsBackToOriginal": {
        "description": "switchRoadsBackToOriginal",
        "body": [
            "switchRoadsBackToOriginal(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "switchRoadsBackToOriginal",
        "scope": "lua"
    },
    "fireHunterGun": {
        "description": "fireHunterGun",
        "body": [
            "fireHunterGun(${0:Vehicle car})"
        ],
        "prefix": "fireHunterGun",
        "scope": "lua"
    },
    "setMenuColumnWidth": {
        "description": "setMenuColumnWidth",
        "body": [
            "setMenuColumnWidth(${0:int panel, int column, int width})"
        ],
        "prefix": "setMenuColumnWidth",
        "scope": "lua"
    },
    "createCarGenerator": {
        "description": "createCarGenerator",
        "body": [
            "createCarGenerator(${0:float atX, float atY, float atZ, float angle, Model modelId, int color1, int color2, bool forceSpawn, int alarm, int doorLock, int minDelay, int maxDelay})"
        ],
        "prefix": "createCarGenerator",
        "scope": "lua"
    },
    "setCarAlwaysCreateSkids": {
        "description": "setCarAlwaysCreateSkids",
        "body": [
            "setCarAlwaysCreateSkids(${0:Vehicle car, bool enable})"
        ],
        "prefix": "setCarAlwaysCreateSkids",
        "scope": "lua"
    },
    "cameraPersistPos": {
        "description": "cameraPersistPos",
        "body": [
            "cameraPersistPos(${0:bool lock})"
        ],
        "prefix": "cameraPersistPos",
        "scope": "lua"
    },
    "taskUseClosestMapAttractor": {
        "description": "taskUseClosestMapAttractor",
        "body": [
            "taskUseClosestMapAttractor(${0:Ped ped, float radius, Model nearModel, float offsetX, float offsetY, float offsetZ, string scriptNamed})"
        ],
        "prefix": "taskUseClosestMapAttractor",
        "scope": "lua"
    },
    "isVehicleAttached": {
        "description": "isVehicleAttached",
        "body": [
            "isVehicleAttached(${0:Vehicle car})"
        ],
        "prefix": "isVehicleAttached",
        "scope": "lua"
    },
    "releaseWeather": {
        "description": "releaseWeather",
        "body": [
            "releaseWeather()"
        ],
        "prefix": "releaseWeather",
        "scope": "lua"
    },
    "sampStorePlayerIncarData": {
        "description": "sampStorePlayerIncarData",
        "body": [
            "sampStorePlayerIncarData(${0:int id, uint dstBuffer})"
        ],
        "prefix": "sampStorePlayerIncarData",
        "scope": "lua"
    },
    "updatePickupMoneyPerDay": {
        "description": "updatePickupMoneyPerDay",
        "body": [
            "updatePickupMoneyPerDay(${0:Pickup pickup, int cash})"
        ],
        "prefix": "updatePickupMoneyPerDay",
        "scope": "lua"
    },
    "removeIplDiscreetly": {
        "description": "removeIplDiscreetly",
        "body": [
            "removeIplDiscreetly(${0:string group})"
        ],
        "prefix": "removeIplDiscreetly",
        "scope": "lua"
    },
    "setMissionAudioPosition": {
        "description": "setMissionAudioPosition",
        "body": [
            "setMissionAudioPosition(${0:int id, float locationX, float locationY, float locationZ})"
        ],
        "prefix": "setMissionAudioPosition",
        "scope": "lua"
    },
    "getCarForwardX": {
        "description": "getCarForwardX",
        "body": [
            "getCarForwardX(${0:Vehicle car})"
        ],
        "prefix": "getCarForwardX",
        "scope": "lua"
    },
    "dxutDeleteDialog": {
        "description": "dxutDeleteDialog",
        "body": [
            "dxutDeleteDialog(${0:DxutDialog dialog})"
        ],
        "prefix": "dxutDeleteDialog",
        "scope": "lua"
    },
    "clearThisPrint": {
        "description": "clearThisPrint",
        "body": [
            "clearThisPrint(${0:GxtString text})"
        ],
        "prefix": "clearThisPrint",
        "scope": "lua"
    },
    "isMinigameInProgress": {
        "description": "isMinigameInProgress",
        "body": [
            "isMinigameInProgress()"
        ],
        "prefix": "isMinigameInProgress",
        "scope": "lua"
    },
    "getSequenceProgress": {
        "description": "getSequenceProgress",
        "body": [
            "getSequenceProgress(${0:Ped ped})"
        ],
        "prefix": "getSequenceProgress",
        "scope": "lua"
    },
    "anchorBoat": {
        "description": "anchorBoat",
        "body": [
            "anchorBoat(${0:Vehicle boat, bool anchor})"
        ],
        "prefix": "anchorBoat",
        "scope": "lua"
    },
    "isObjectInAngledArea3d": {
        "description": "isObjectInAngledArea3d",
        "body": [
            "isObjectInAngledArea3d(${0:Object object, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag})"
        ],
        "prefix": "isObjectInAngledArea3d",
        "scope": "lua"
    },
    "getControllerMode": {
        "description": "getControllerMode",
        "body": [
            "getControllerMode()"
        ],
        "prefix": "getControllerMode",
        "scope": "lua"
    },
    "setTextScale": {
        "description": "setTextScale",
        "body": [
            "setTextScale(${0:float sizeX, float sizeY})"
        ],
        "prefix": "setTextScale",
        "scope": "lua"
    },
    "setCharNeverTargetted": {
        "description": "setCharNeverTargetted",
        "body": [
            "setCharNeverTargetted(${0:Ped ped, bool untargetable})"
        ],
        "prefix": "setCharNeverTargetted",
        "scope": "lua"
    },
    "getCarMovingComponentOffset": {
        "description": "getCarMovingComponentOffset",
        "body": [
            "getCarMovingComponentOffset(${0:Vehicle car})"
        ],
        "prefix": "getCarMovingComponentOffset",
        "scope": "lua"
    },
    "drawWindow": {
        "description": "drawWindow",
        "body": [
            "drawWindow(${0:float cornerAX, float cornerAY, float cornerBX, float cornerBY, GxtString gxtString, int style})"
        ],
        "prefix": "drawWindow",
        "scope": "lua"
    },
    "setZonePopulationRace": {
        "description": "setZonePopulationRace",
        "body": [
            "setZonePopulationRace(${0:GxtString zone, int popcycle})"
        ],
        "prefix": "setZonePopulationRace",
        "scope": "lua"
    },
    "setHeathazeEffect": {
        "description": "setHeathazeEffect",
        "body": [
            "setHeathazeEffect(${0:bool enable})"
        ],
        "prefix": "setHeathazeEffect",
        "scope": "lua"
    },
    "isCarStuck": {
        "description": "isCarStuck",
        "body": [
            "isCarStuck(${0:Vehicle car})"
        ],
        "prefix": "isCarStuck",
        "scope": "lua"
    },
    "hasCarBeenDamagedByCar": {
        "description": "hasCarBeenDamagedByCar",
        "body": [
            "hasCarBeenDamagedByCar(${0:Vehicle car, Vehicle byCar})"
        ],
        "prefix": "hasCarBeenDamagedByCar",
        "scope": "lua"
    },
    "locateCar2d": {
        "description": "locateCar2d",
        "body": [
            "locateCar2d(${0:Vehicle car, float pointX, float pointY, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCar2d",
        "scope": "lua"
    },
    "switchRubbish": {
        "description": "switchRubbish",
        "body": [
            "switchRubbish(${0:bool int1})"
        ],
        "prefix": "switchRubbish",
        "scope": "lua"
    },
    "createBirds": {
        "description": "createBirds",
        "body": [
            "createBirds(${0:float x1, float y1, float z1, float x2, float y2, float z2, int flag1, int flag2})"
        ],
        "prefix": "createBirds",
        "scope": "lua"
    },
    "setTextColour": {
        "description": "setTextColour",
        "body": [
            "setTextColour(${0:int r, int g, int b, int a})"
        ],
        "prefix": "setTextColour",
        "scope": "lua"
    },
    "setCarRamCar": {
        "description": "setCarRamCar",
        "body": [
            "setCarRamCar(${0:Vehicle car, Vehicle car})"
        ],
        "prefix": "setCarRamCar",
        "scope": "lua"
    },
    "playMissionPassedTune": {
        "description": "playMissionPassedTune",
        "body": [
            "playMissionPassedTune(${0:int music})"
        ],
        "prefix": "playMissionPassedTune",
        "scope": "lua"
    },
    "isCharInAreaInCar3d": {
        "description": "isCharInAreaInCar3d",
        "body": [
            "isCharInAreaInCar3d(${0:Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere})"
        ],
        "prefix": "isCharInAreaInCar3d",
        "scope": "lua"
    },
    "switchRoadsOff": {
        "description": "switchRoadsOff",
        "body": [
            "switchRoadsOff(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "switchRoadsOff",
        "scope": "lua"
    },
    "closeGarage": {
        "description": "closeGarage",
        "body": [
            "closeGarage(${0:GxtString garage})"
        ],
        "prefix": "closeGarage",
        "scope": "lua"
    },
    "taskPickUpObject": {
        "description": "taskPickUpObject",
        "body": [
            "taskPickUpObject(${0:Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int boneId1, int boneId2, string performAnimation, int IFPFile, int time})"
        ],
        "prefix": "taskPickUpObject",
        "scope": "lua"
    },
    "setPlayerJumpButton": {
        "description": "setPlayerJumpButton",
        "body": [
            "setPlayerJumpButton(${0:Player player, bool enable})"
        ],
        "prefix": "setPlayerJumpButton",
        "scope": "lua"
    },
    "memory.unprotect": {
        "description": "memory.unprotect",
        "body": [
            "memory.unprotect(${0:uint address, uint size})"
        ],
        "prefix": "memory.unprotect",
        "scope": "lua"
    },
    "doWeaponStuffAtStartOf2pGame": {
        "description": "doWeaponStuffAtStartOf2pGame",
        "body": [
            "doWeaponStuffAtStartOf2pGame()"
        ],
        "prefix": "doWeaponStuffAtStartOf2pGame",
        "scope": "lua"
    },
    "removeGroup": {
        "description": "removeGroup",
        "body": [
            "removeGroup(${0:int group})"
        ],
        "prefix": "removeGroup",
        "scope": "lua"
    },
    "taskWalkAlongsideChar": {
        "description": "taskWalkAlongsideChar",
        "body": [
            "taskWalkAlongsideChar(${0:Ped ped, int alongisdeActor})"
        ],
        "prefix": "taskWalkAlongsideChar",
        "scope": "lua"
    },
    "taskCarTempAction": {
        "description": "taskCarTempAction",
        "body": [
            "taskCarTempAction(${0:Ped ped, Vehicle car, int performAction, int timelimit})"
        ],
        "prefix": "taskCarTempAction",
        "scope": "lua"
    },
    "taskStandStill": {
        "description": "taskStandStill",
        "body": [
            "taskStandStill(${0:Ped ped, int timeMS})"
        ],
        "prefix": "taskStandStill",
        "scope": "lua"
    },
    "isSniperBulletInArea": {
        "description": "isSniperBulletInArea",
        "body": [
            "isSniperBulletInArea(${0:float float1, float float2, float float3, float float4, float float5, float float6})"
        ],
        "prefix": "isSniperBulletInArea",
        "scope": "lua"
    },
    "playerEnteredBuildingsiteCrane": {
        "description": "playerEnteredBuildingsiteCrane",
        "body": [
            "playerEnteredBuildingsiteCrane()"
        ],
        "prefix": "playerEnteredBuildingsiteCrane",
        "scope": "lua"
    },
    "setCharHasUsedEntryExit": {
        "description": "setCharHasUsedEntryExit",
        "body": [
            "setCharHasUsedEntryExit(${0:Ped ped, float X, float Y, float radius})"
        ],
        "prefix": "setCharHasUsedEntryExit",
        "scope": "lua"
    },
    "areAnyCharsNearChar": {
        "description": "areAnyCharsNearChar",
        "body": [
            "areAnyCharsNearChar(${0:Ped ped, float range})"
        ],
        "prefix": "areAnyCharsNearChar",
        "scope": "lua"
    },
    "doCameraBump": {
        "description": "doCameraBump",
        "body": [
            "doCameraBump(${0:float rotationZ, float rotationY})"
        ],
        "prefix": "doCameraBump",
        "scope": "lua"
    },
    "locateCharAnyMeansChar2d": {
        "description": "locateCharAnyMeansChar2d",
        "body": [
            "locateCharAnyMeansChar2d(${0:Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCharAnyMeansChar2d",
        "scope": "lua"
    },
    "removeScriptFire": {
        "description": "removeScriptFire",
        "body": [
            "removeScriptFire(${0:int fire})"
        ],
        "prefix": "removeScriptFire",
        "scope": "lua"
    },
    "isProjectileInArea": {
        "description": "isProjectileInArea",
        "body": [
            "isProjectileInArea(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "isProjectileInArea",
        "scope": "lua"
    },
    "printBigQ": {
        "description": "printBigQ",
        "body": [
            "printBigQ(${0:GxtString gxtString, int time, int style})"
        ],
        "prefix": "printBigQ",
        "scope": "lua"
    },
    "createFxSystemOnCharWithDirection": {
        "description": "createFxSystemOnCharWithDirection",
        "body": [
            "createFxSystemOnCharWithDirection(${0:string particle, Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int type})"
        ],
        "prefix": "createFxSystemOnCharWithDirection",
        "scope": "lua"
    },
    "createFxSystemOnObjectWithDirection": {
        "description": "createFxSystemOnObjectWithDirection",
        "body": [
            "createFxSystemOnObjectWithDirection(${0:string particle, Object object, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int flag})"
        ],
        "prefix": "createFxSystemOnObjectWithDirection",
        "scope": "lua"
    },
    "openCarDoorABit": {
        "description": "openCarDoorABit",
        "body": [
            "openCarDoorABit(${0:Vehicle car, int door, float rotation})"
        ],
        "prefix": "openCarDoorABit",
        "scope": "lua"
    },
    "startPlaybackRecordedCarUsingAi": {
        "description": "startPlaybackRecordedCarUsingAi",
        "body": [
            "startPlaybackRecordedCarUsingAi(${0:Vehicle car, int path})"
        ],
        "prefix": "startPlaybackRecordedCarUsingAi",
        "scope": "lua"
    },
    "taskDestroyCar": {
        "description": "taskDestroyCar",
        "body": [
            "taskDestroyCar(${0:Ped ped, Vehicle car})"
        ],
        "prefix": "taskDestroyCar",
        "scope": "lua"
    },
    "taskDiveAndGetUp": {
        "description": "taskDiveAndGetUp",
        "body": [
            "taskDiveAndGetUp(${0:Ped ped, float toOffsetX, float toOffsetY, int time})"
        ],
        "prefix": "taskDiveAndGetUp",
        "scope": "lua"
    },
    "taskShuffleToNextCarSeat": {
        "description": "taskShuffleToNextCarSeat",
        "body": [
            "taskShuffleToNextCarSeat(${0:Ped ped, Vehicle car})"
        ],
        "prefix": "taskShuffleToNextCarSeat",
        "scope": "lua"
    },
    "setBlipEntryExit": {
        "description": "setBlipEntryExit",
        "body": [
            "setBlipEntryExit(${0:Marker marker, float X, float Y, float radius})"
        ],
        "prefix": "setBlipEntryExit",
        "scope": "lua"
    },
    "setTextCentreSize": {
        "description": "setTextCentreSize",
        "body": [
            "setTextCentreSize(${0:float linewidth})"
        ],
        "prefix": "setTextCentreSize",
        "scope": "lua"
    },
    "setPoolTableCoords": {
        "description": "setPoolTableCoords",
        "body": [
            "setPoolTableCoords(${0:float x1, float y1, float z1, float x2, float y2, float z2})"
        ],
        "prefix": "setPoolTableCoords",
        "scope": "lua"
    },
    "removeCarRecording": {
        "description": "removeCarRecording",
        "body": [
            "removeCarRecording(${0:int path})"
        ],
        "prefix": "removeCarRecording",
        "scope": "lua"
    },
    "closeAllCarDoors": {
        "description": "closeAllCarDoors",
        "body": [
            "closeAllCarDoors(${0:Vehicle car})"
        ],
        "prefix": "closeAllCarDoors",
        "scope": "lua"
    },
    "activateHeliSpeedCheat": {
        "description": "activateHeliSpeedCheat",
        "body": [
            "activateHeliSpeedCheat(${0:Vehicle heli, int power})"
        ],
        "prefix": "activateHeliSpeedCheat",
        "scope": "lua"
    },
    "inicfg.save": {
        "description": "inicfg.save",
        "body": [
            "inicfg.save(${0:table data, [string file]})"
        ],
        "prefix": "inicfg.save",
        "scope": "lua"
    },
    "makeRoomInPlayerGangForMissionPeds": {
        "description": "makeRoomInPlayerGangForMissionPeds",
        "body": [
            "makeRoomInPlayerGangForMissionPeds(${0:int group})"
        ],
        "prefix": "makeRoomInPlayerGangForMissionPeds",
        "scope": "lua"
    },
    "taskLookAtCoord": {
        "description": "taskLookAtCoord",
        "body": [
            "taskLookAtCoord(${0:Ped ped, float toX, float toY, float toZ, int timeMS})"
        ],
        "prefix": "taskLookAtCoord",
        "scope": "lua"
    },
    "explodeCharHead": {
        "description": "explodeCharHead",
        "body": [
            "explodeCharHead(${0:Ped ped})"
        ],
        "prefix": "explodeCharHead",
        "scope": "lua"
    },
    "taskDead": {
        "description": "taskDead",
        "body": [
            "taskDead(${0:Ped ped})"
        ],
        "prefix": "taskDead",
        "scope": "lua"
    },
    "getDoorAngleRatio": {
        "description": "getDoorAngleRatio",
        "body": [
            "getDoorAngleRatio(${0:Vehicle car, int door})"
        ],
        "prefix": "getDoorAngleRatio",
        "scope": "lua"
    },
    "setBlipAlwaysDisplayOnZoomedRadar": {
        "description": "setBlipAlwaysDisplayOnZoomedRadar",
        "body": [
            "setBlipAlwaysDisplayOnZoomedRadar(${0:Marker marker, bool displayAlways})"
        ],
        "prefix": "setBlipAlwaysDisplayOnZoomedRadar",
        "scope": "lua"
    },
    "isCharRespondingToEvent": {
        "description": "isCharRespondingToEvent",
        "body": [
            "isCharRespondingToEvent(${0:Ped ped, int event})"
        ],
        "prefix": "isCharRespondingToEvent",
        "scope": "lua"
    },
    "setCharFireDamageMultiplier": {
        "description": "setCharFireDamageMultiplier",
        "body": [
            "setCharFireDamageMultiplier(${0:Ped ped, float multiplier})"
        ],
        "prefix": "setCharFireDamageMultiplier",
        "scope": "lua"
    },
    "setCharCanBeShotInVehicle": {
        "description": "setCharCanBeShotInVehicle",
        "body": [
            "setCharCanBeShotInVehicle(${0:Ped ped, bool can})"
        ],
        "prefix": "setCharCanBeShotInVehicle",
        "scope": "lua"
    },
    "isDebugCameraOn": {
        "description": "isDebugCameraOn",
        "body": [
            "isDebugCameraOn()"
        ],
        "prefix": "isDebugCameraOn",
        "scope": "lua"
    },
    "getDeadCharPickupCoords": {
        "description": "getDeadCharPickupCoords",
        "body": [
            "getDeadCharPickupCoords(${0:Ped ped})"
        ],
        "prefix": "getDeadCharPickupCoords",
        "scope": "lua"
    },
    "pointCameraAtChar": {
        "description": "pointCameraAtChar",
        "body": [
            "pointCameraAtChar(${0:Ped ped, int mode, int switchstyle})"
        ],
        "prefix": "pointCameraAtChar",
        "scope": "lua"
    },
    "setFreeResprays": {
        "description": "setFreeResprays",
        "body": [
            "setFreeResprays(${0:bool enable})"
        ],
        "prefix": "setFreeResprays",
        "scope": "lua"
    },
    "getHavocCausedByPlayer": {
        "description": "getHavocCausedByPlayer",
        "body": [
            "getHavocCausedByPlayer(${0:int int1})"
        ],
        "prefix": "getHavocCausedByPlayer",
        "scope": "lua"
    },
    "addBlipForCoordOld": {
        "description": "addBlipForCoordOld",
        "body": [
            "addBlipForCoordOld(${0:float atX, float atY, float atZ, int color, int flag})"
        ],
        "prefix": "addBlipForCoordOld",
        "scope": "lua"
    },
    "getTrainCaboose": {
        "description": "getTrainCaboose",
        "body": [
            "getTrainCaboose(${0:Vehicle train})"
        ],
        "prefix": "getTrainCaboose",
        "scope": "lua"
    },
    "memory.tohex": {
        "description": "memory.tohex",
        "body": [
            "memory.tohex(${0:uint address, uint size, [bool unprotect=false]})"
        ],
        "prefix": "memory.tohex",
        "scope": "lua"
    },
    "getAngleBetween2dVectors": {
        "description": "getAngleBetween2dVectors",
        "body": [
            "getAngleBetween2dVectors(${0:float vecX, float vecY, float vecX, float vecY})"
        ],
        "prefix": "getAngleBetween2dVectors",
        "scope": "lua"
    },
    "requestIpl": {
        "description": "requestIpl",
        "body": [
            "requestIpl(${0:string group})"
        ],
        "prefix": "requestIpl",
        "scope": "lua"
    },
    "deleteMenu": {
        "description": "deleteMenu",
        "body": [
            "deleteMenu(${0:int menu})"
        ],
        "prefix": "deleteMenu",
        "scope": "lua"
    },
    "setVehicleDirtLevel": {
        "description": "setVehicleDirtLevel",
        "body": [
            "setVehicleDirtLevel(${0:Vehicle car, float level})"
        ],
        "prefix": "setVehicleDirtLevel",
        "scope": "lua"
    },
    "playMissionAudio": {
        "description": "playMissionAudio",
        "body": [
            "playMissionAudio(${0:int id})"
        ],
        "prefix": "playMissionAudio",
        "scope": "lua"
    },
    "ensurePlayerHasDriveByWeapon": {
        "description": "ensurePlayerHasDriveByWeapon",
        "body": [
            "ensurePlayerHasDriveByWeapon(${0:Player player, int ammo})"
        ],
        "prefix": "ensurePlayerHasDriveByWeapon",
        "scope": "lua"
    },
    "setObjectRecordsCollisions": {
        "description": "setObjectRecordsCollisions",
        "body": [
            "setObjectRecordsCollisions(${0:Object object, bool set})"
        ],
        "prefix": "setObjectRecordsCollisions",
        "scope": "lua"
    },
    "makeHeliComeCrashingDown": {
        "description": "makeHeliComeCrashingDown",
        "body": [
            "makeHeliComeCrashingDown(${0:Vehicle heli})"
        ],
        "prefix": "makeHeliComeCrashingDown",
        "scope": "lua"
    },
    "taskChatWithChar": {
        "description": "taskChatWithChar",
        "body": [
            "taskChatWithChar(${0:Ped ped, int withActor, bool flag, int unknownFlag})"
        ],
        "prefix": "taskChatWithChar",
        "scope": "lua"
    },
    "fetchNextCard": {
        "description": "fetchNextCard",
        "body": [
            "fetchNextCard()"
        ],
        "prefix": "fetchNextCard",
        "scope": "lua"
    },
    "addContinuousSound": {
        "description": "addContinuousSound",
        "body": [
            "addContinuousSound(${0:float atX, float atY, float atZ, int sound})"
        ],
        "prefix": "addContinuousSound",
        "scope": "lua"
    },
    "setCharStayInSamePlace": {
        "description": "setCharStayInSamePlace",
        "body": [
            "setCharStayInSamePlace(${0:Ped ped, bool enabled})"
        ],
        "prefix": "setCharStayInSamePlace",
        "scope": "lua"
    },
    "damageChar": {
        "description": "damageChar",
        "body": [
            "damageChar(${0:Ped ped, int health, bool affectArmour})"
        ],
        "prefix": "damageChar",
        "scope": "lua"
    },
    "clearThisBigPrint": {
        "description": "clearThisBigPrint",
        "body": [
            "clearThisBigPrint(${0:GxtString text})"
        ],
        "prefix": "clearThisBigPrint",
        "scope": "lua"
    },
    "extendRoute": {
        "description": "extendRoute",
        "body": [
            "extendRoute(${0:float pointX, float pointY, float pointZ})"
        ],
        "prefix": "extendRoute",
        "scope": "lua"
    },
    "setSpritesDrawBeforeFade": {
        "description": "setSpritesDrawBeforeFade",
        "body": [
            "setSpritesDrawBeforeFade(${0:bool antialiased})"
        ],
        "prefix": "setSpritesDrawBeforeFade",
        "scope": "lua"
    },
    "skipCutsceneEnd": {
        "description": "skipCutsceneEnd",
        "body": [
            "skipCutsceneEnd()"
        ],
        "prefix": "skipCutsceneEnd",
        "scope": "lua"
    },
    "isPcVersion": {
        "description": "isPcVersion",
        "body": [
            "isPcVersion()"
        ],
        "prefix": "isPcVersion",
        "scope": "lua"
    },
    "taskUseMobilePhone": {
        "description": "taskUseMobilePhone",
        "body": [
            "taskUseMobilePhone(${0:Ped ped, bool hold})"
        ],
        "prefix": "taskUseMobilePhone",
        "scope": "lua"
    },
    "isCharInAngledAreaInCar3d": {
        "description": "isCharInAngledAreaInCar3d",
        "body": [
            "isCharInAngledAreaInCar3d(${0:Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag})"
        ],
        "prefix": "isCharInAngledAreaInCar3d",
        "scope": "lua"
    },
    "hasCutsceneLoaded": {
        "description": "hasCutsceneLoaded",
        "body": [
            "hasCutsceneLoaded()"
        ],
        "prefix": "hasCutsceneLoaded",
        "scope": "lua"
    },
    "setCarRoll": {
        "description": "setCarRoll",
        "body": [
            "setCarRoll(${0:Vehicle car, float roll})"
        ],
        "prefix": "setCarRoll",
        "scope": "lua"
    },
    "isPlayerTargettingObject": {
        "description": "isPlayerTargettingObject",
        "body": [
            "isPlayerTargettingObject(${0:Player player, Object object})"
        ],
        "prefix": "isPlayerTargettingObject",
        "scope": "lua"
    },
    "isObjectAttached": {
        "description": "isObjectAttached",
        "body": [
            "isObjectAttached(${0:Object object})"
        ],
        "prefix": "isObjectAttached",
        "scope": "lua"
    },
    "setAllCarsCanBeDamaged": {
        "description": "setAllCarsCanBeDamaged",
        "body": [
            "setAllCarsCanBeDamaged(${0:bool enable})"
        ],
        "prefix": "setAllCarsCanBeDamaged",
        "scope": "lua"
    },
    "hasSaveGameFinished": {
        "description": "hasSaveGameFinished",
        "body": [
            "hasSaveGameFinished()"
        ],
        "prefix": "hasSaveGameFinished",
        "scope": "lua"
    },
    "setCarWatertight": {
        "description": "setCarWatertight",
        "body": [
            "setCarWatertight(${0:Vehicle car, bool watertight})"
        ],
        "prefix": "setCarWatertight",
        "scope": "lua"
    },
    "hasCarRecordingBeenLoaded": {
        "description": "hasCarRecordingBeenLoaded",
        "body": [
            "hasCarRecordingBeenLoaded(${0:int path})"
        ],
        "prefix": "hasCarRecordingBeenLoaded",
        "scope": "lua"
    },
    "getRandomCarInSphereNoSave": {
        "description": "getRandomCarInSphereNoSave",
        "body": [
            "getRandomCarInSphereNoSave(${0:float X, float Y, float Z, float radius, int model})"
        ],
        "prefix": "getRandomCarInSphereNoSave",
        "scope": "lua"
    },
    "getRandomCharInSphere": {
        "description": "getRandomCharInSphere",
        "body": [
            "getRandomCharInSphere(${0:float X, float Y, float Z, float radius, bool pedtypeCivilian, bool gang, bool prostitute})"
        ],
        "prefix": "getRandomCharInSphere",
        "scope": "lua"
    },
    "locateCar3d": {
        "description": "locateCar3d",
        "body": [
            "locateCar3d(${0:Vehicle car, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateCar3d",
        "scope": "lua"
    },
    "switchCarGenerator": {
        "description": "switchCarGenerator",
        "body": [
            "switchCarGenerator(${0:int carGenerator, int carsToGenerate})"
        ],
        "prefix": "switchCarGenerator",
        "scope": "lua"
    },
    "locateCharOnFootChar3d": {
        "description": "locateCharOnFootChar3d",
        "body": [
            "locateCharOnFootChar3d(${0:Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateCharOnFootChar3d",
        "scope": "lua"
    },
    "makeObjectTargettable": {
        "description": "makeObjectTargettable",
        "body": [
            "makeObjectTargettable(${0:Object object, bool targetable})"
        ],
        "prefix": "makeObjectTargettable",
        "scope": "lua"
    },
    "createOysterPickup": {
        "description": "createOysterPickup",
        "body": [
            "createOysterPickup(${0:float atX, float atY, float atZ})"
        ],
        "prefix": "createOysterPickup",
        "scope": "lua"
    },
    "isCharHoldingObject": {
        "description": "isCharHoldingObject",
        "body": [
            "isCharHoldingObject(${0:Ped ped, int liftingObject})"
        ],
        "prefix": "isCharHoldingObject",
        "scope": "lua"
    },
    "attachWinchToHeli": {
        "description": "attachWinchToHeli",
        "body": [
            "attachWinchToHeli(${0:Vehicle heli, bool magnet})"
        ],
        "prefix": "attachWinchToHeli",
        "scope": "lua"
    },
    "setRadarZoom": {
        "description": "setRadarZoom",
        "body": [
            "setRadarZoom(${0:int zoom})"
        ],
        "prefix": "setRadarZoom",
        "scope": "lua"
    },
    "hasImportGarageSlotBeenFilled": {
        "description": "hasImportGarageSlotBeenFilled",
        "body": [
            "hasImportGarageSlotBeenFilled(${0:int int1, int int2})"
        ],
        "prefix": "hasImportGarageSlotBeenFilled",
        "scope": "lua"
    },
    "setObjectScale": {
        "description": "setObjectScale",
        "body": [
            "setObjectScale(${0:Object object, float scale})"
        ],
        "prefix": "setObjectScale",
        "scope": "lua"
    },
    "switchObjectBrains": {
        "description": "switchObjectBrains",
        "body": [
            "switchObjectBrains(${0:int externalScript, bool canBeStreamedIn})"
        ],
        "prefix": "switchObjectBrains",
        "scope": "lua"
    },
    "getNumberOfItemsInShop": {
        "description": "getNumberOfItemsInShop",
        "body": [
            "getNumberOfItemsInShop()"
        ],
        "prefix": "getNumberOfItemsInShop",
        "scope": "lua"
    },
    "taskCharSlideToCoordAndPlayAnim": {
        "description": "taskCharSlideToCoordAndPlayAnim",
        "body": [
            "taskCharSlideToCoordAndPlayAnim(${0:Ped ped, float toX, float toY, float toZ, float angle, float radius, string animation, int ifp1, float ifp2, bool LA, bool LX, bool LY, bool LF, int LT})"
        ],
        "prefix": "taskCharSlideToCoordAndPlayAnim",
        "scope": "lua"
    },
    "createMissionTrain": {
        "description": "createMissionTrain",
        "body": [
            "createMissionTrain(${0:int type, float atX, float atY, float atZ, bool direction})"
        ],
        "prefix": "createMissionTrain",
        "scope": "lua"
    },
    "clearCharTasks": {
        "description": "clearCharTasks",
        "body": [
            "clearCharTasks(${0:Ped ped})"
        ],
        "prefix": "clearCharTasks",
        "scope": "lua"
    },
    "setZoneGangStrength": {
        "description": "setZoneGangStrength",
        "body": [
            "setZoneGangStrength(${0:GxtString zone, int gang, int density})"
        ],
        "prefix": "setZoneGangStrength",
        "scope": "lua"
    },
    "taskGoToObject": {
        "description": "taskGoToObject",
        "body": [
            "taskGoToObject(${0:Ped ped, int toObject, int timelimit, float stopWithinRadius})"
        ],
        "prefix": "taskGoToObject",
        "scope": "lua"
    },
    "playAndKillFxSystem": {
        "description": "playAndKillFxSystem",
        "body": [
            "playAndKillFxSystem(${0:Particle particle})"
        ],
        "prefix": "playAndKillFxSystem",
        "scope": "lua"
    },
    "getShoppingExtraInfo": {
        "description": "getShoppingExtraInfo",
        "body": [
            "getShoppingExtraInfo(${0:int item, int flag})"
        ],
        "prefix": "getShoppingExtraInfo",
        "scope": "lua"
    },
    "getNumberOfFiresInRange": {
        "description": "getNumberOfFiresInRange",
        "body": [
            "getNumberOfFiresInRange(${0:float atX, float atY, float atZ, float radius})"
        ],
        "prefix": "getNumberOfFiresInRange",
        "scope": "lua"
    },
    "getNumberOfFiresInArea": {
        "description": "getNumberOfFiresInArea",
        "body": [
            "getNumberOfFiresInArea(${0:float x1, float y1, float z1, float x2, float y2, float z2})"
        ],
        "prefix": "getNumberOfFiresInArea",
        "scope": "lua"
    },
    "releaseEntityFromRopeForObject": {
        "description": "releaseEntityFromRopeForObject",
        "body": [
            "releaseEntityFromRopeForObject(${0:int magnet})"
        ],
        "prefix": "releaseEntityFromRopeForObject",
        "scope": "lua"
    },
    "getVehicleClass": {
        "description": "getVehicleClass",
        "body": [
            "getVehicleClass(${0:Vehicle car})"
        ],
        "prefix": "getVehicleClass",
        "scope": "lua"
    },
    "getNameOfItem": {
        "description": "getNameOfItem",
        "body": [
            "getNameOfItem(${0:int item})"
        ],
        "prefix": "getNameOfItem",
        "scope": "lua"
    },
    "addBlipForCharOld": {
        "description": "addBlipForCharOld",
        "body": [
            "addBlipForCharOld(${0:Ped ped, int int2, int int3})"
        ],
        "prefix": "addBlipForCharOld",
        "scope": "lua"
    },
    "setRopeHeightForObject": {
        "description": "setRopeHeightForObject",
        "body": [
            "setRopeHeightForObject(${0:int magnet, float length})"
        ],
        "prefix": "setRopeHeightForObject",
        "scope": "lua"
    },
    "removeCharFromGroup": {
        "description": "removeCharFromGroup",
        "body": [
            "removeCharFromGroup(${0:Ped ped})"
        ],
        "prefix": "removeCharFromGroup",
        "scope": "lua"
    },
    "taskGotoCharAiming": {
        "description": "taskGotoCharAiming",
        "body": [
            "taskGotoCharAiming(${0:Ped ped, int followActor, float minradius, float maxradius})"
        ],
        "prefix": "taskGotoCharAiming",
        "scope": "lua"
    },
    "getNearestTagPosition": {
        "description": "getNearestTagPosition",
        "body": [
            "getNearestTagPosition(${0:float X, float Y, float Z})"
        ],
        "prefix": "getNearestTagPosition",
        "scope": "lua"
    },
    "setCheckpointCoords": {
        "description": "setCheckpointCoords",
        "body": [
            "setCheckpointCoords(${0:Checkpoint checkpoint, float X, float Y, float Z})"
        ],
        "prefix": "setCheckpointCoords",
        "scope": "lua"
    },
    "cameraIsVectorTrackRunning": {
        "description": "cameraIsVectorTrackRunning",
        "body": [
            "cameraIsVectorTrackRunning()"
        ],
        "prefix": "cameraIsVectorTrackRunning",
        "scope": "lua"
    },
    "addShortRangeSpriteBlipForCoord": {
        "description": "addShortRangeSpriteBlipForCoord",
        "body": [
            "addShortRangeSpriteBlipForCoord(${0:float atX, float atY, float atZ, int icon})"
        ],
        "prefix": "addShortRangeSpriteBlipForCoord",
        "scope": "lua"
    },
    "planeGotoCoords": {
        "description": "planeGotoCoords",
        "body": [
            "planeGotoCoords(${0:int plane, float X, float Y, float Z, float z1, float z2})"
        ],
        "prefix": "planeGotoCoords",
        "scope": "lua"
    },
    "doesGroupExist": {
        "description": "doesGroupExist",
        "body": [
            "doesGroupExist(${0:int group})"
        ],
        "prefix": "doesGroupExist",
        "scope": "lua"
    },
    "taskLookAtObject": {
        "description": "taskLookAtObject",
        "body": [
            "taskLookAtObject(${0:Ped ped, int lookAt, int timeMS})"
        ],
        "prefix": "taskLookAtObject",
        "scope": "lua"
    },
    "printWithNumber": {
        "description": "printWithNumber",
        "body": [
            "printWithNumber(${0:GxtString gxtString, int number, int time, int flag})"
        ],
        "prefix": "printWithNumber",
        "scope": "lua"
    },
    "setPlayerGroupRecruitment": {
        "description": "setPlayerGroupRecruitment",
        "body": [
            "setPlayerGroupRecruitment(${0:Player player, bool enabled})"
        ],
        "prefix": "setPlayerGroupRecruitment",
        "scope": "lua"
    },
    "raknetSendRpcEx": {
        "description": "raknetSendRpcEx",
        "body": [
            "raknetSendRpcEx(${0:int rpc, Bitstream bs, int priority, int reliability, int channel, bool timestamp})"
        ],
        "prefix": "raknetSendRpcEx",
        "scope": "lua"
    },
    "copyCharDecisionMaker": {
        "description": "copyCharDecisionMaker",
        "body": [
            "copyCharDecisionMaker(${0:Ped ped})"
        ],
        "prefix": "copyCharDecisionMaker",
        "scope": "lua"
    },
    "copyGroupDecisionMaker": {
        "description": "copyGroupDecisionMaker",
        "body": [
            "copyGroupDecisionMaker(${0:int group})"
        ],
        "prefix": "copyGroupDecisionMaker",
        "scope": "lua"
    },
    "setObjectRotation": {
        "description": "setObjectRotation",
        "body": [
            "setObjectRotation(${0:Object object, float rotationX, float rotationY, float rotationZ})"
        ],
        "prefix": "setObjectRotation",
        "scope": "lua"
    },
    "isPlayerTargettingChar": {
        "description": "isPlayerTargettingChar",
        "body": [
            "isPlayerTargettingChar(${0:Player player, Ped ped})"
        ],
        "prefix": "isPlayerTargettingChar",
        "scope": "lua"
    },
    "locateCharOnFoot2d": {
        "description": "locateCharOnFoot2d",
        "body": [
            "locateCharOnFoot2d(${0:Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere})"
        ],
        "prefix": "locateCharOnFoot2d",
        "scope": "lua"
    },
    "setObjectCollisionDamageEffect": {
        "description": "setObjectCollisionDamageEffect",
        "body": [
            "setObjectCollisionDamageEffect(${0:Object object, bool destructible})"
        ],
        "prefix": "setObjectCollisionDamageEffect",
        "scope": "lua"
    },
    "getWaterHeightAtCoords": {
        "description": "getWaterHeightAtCoords",
        "body": [
            "getWaterHeightAtCoords(${0:float atX, float atY, bool ignoreWaves})"
        ],
        "prefix": "getWaterHeightAtCoords",
        "scope": "lua"
    },
    "removeRcBuggy": {
        "description": "removeRcBuggy",
        "body": [
            "removeRcBuggy()"
        ],
        "prefix": "removeRcBuggy",
        "scope": "lua"
    },
    "playObjectAnim": {
        "description": "playObjectAnim",
        "body": [
            "playObjectAnim(${0:Object object, string animation, string IFPFile, float framedelta, bool lockF, bool loop})"
        ],
        "prefix": "playObjectAnim",
        "scope": "lua"
    },
    "displayTextWithFloat": {
        "description": "displayTextWithFloat",
        "body": [
            "displayTextWithFloat(${0:float X, float Y, GxtString GXT, float value, int flag})"
        ],
        "prefix": "displayTextWithFloat",
        "scope": "lua"
    },
    "locateStoppedCharInCar3d": {
        "description": "locateStoppedCharInCar3d",
        "body": [
            "locateStoppedCharInCar3d(${0:Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere})"
        ],
        "prefix": "locateStoppedCharInCar3d",
        "scope": "lua"
    },
    "grabEntityOnRopeForObject": {
        "description": "grabEntityOnRopeForObject",
        "body": [
            "grabEntityOnRopeForObject(${0:int magnet})"
        ],
        "prefix": "grabEntityOnRopeForObject",
        "scope": "lua"
    },
    "setObjectMass": {
        "description": "setObjectMass",
        "body": [
            "setObjectMass(${0:Object object, float mass})"
        ],
        "prefix": "setObjectMass",
        "scope": "lua"
    },
    "getCarCharIsUsing": {
        "description": "getCarCharIsUsing",
        "body": [
            "getCarCharIsUsing(${0:Ped ped})"
        ],
        "prefix": "getCarCharIsUsing",
        "scope": "lua"
    },
    "createLockedPropertyPickup": {
        "description": "createLockedPropertyPickup",
        "body": [
            "createLockedPropertyPickup(${0:float pX, float pY, float pZ, GxtString gxtString})"
        ],
        "prefix": "createLockedPropertyPickup",
        "scope": "lua"
    },
    "taskFollowPatrolRoute": {
        "description": "taskFollowPatrolRoute",
        "body": [
            "taskFollowPatrolRoute(${0:Ped ped, int walkMode, int routeMode})"
        ],
        "prefix": "taskFollowPatrolRoute",
        "scope": "lua"
    },
    "setObjectAsStealable": {
        "description": "setObjectAsStealable",
        "body": [
            "setObjectAsStealable(${0:Object object, bool liftable})"
        ],
        "prefix": "setObjectAsStealable",
        "scope": "lua"
    },
    "taskPause": {
        "description": "taskPause",
        "body": [
            "taskPause(${0:Ped ped, int timeMS})"
        ],
        "prefix": "taskPause",
        "scope": "lua"
    },
    "startCarFire": {
        "description": "startCarFire",
        "body": [
            "startCarFire(${0:Vehicle car})"
        ],
        "prefix": "startCarFire",
        "scope": "lua"
    },
    "setNearClip": {
        "description": "setNearClip",
        "body": [
            "setNearClip(${0:float clip})"
        ],
        "prefix": "setNearClip",
        "scope": "lua"
    },
    "getClosestStraightRoad": {
        "description": "getClosestStraightRoad",
        "body": [
            "getClosestStraightRoad(${0:float atX, float atY, float atZ, float height, float radius})"
        ],
        "prefix": "getClosestStraightRoad",
        "scope": "lua"
    },
    "switchEmergencyServices": {
        "description": "switchEmergencyServices",
        "body": [
            "switchEmergencyServices(${0:bool enable})"
        ],
        "prefix": "switchEmergencyServices",
        "scope": "lua"
    },
    "taskLookAbout": {
        "description": "taskLookAbout",
        "body": [
            "taskLookAbout(${0:Ped ped, int timeMS})"
        ],
        "prefix": "taskLookAbout",
        "scope": "lua"
    },
    "getVehicleModType": {
        "description": "getVehicleModType",
        "body": [
            "getVehicleModType(${0:Model component})"
        ],
        "prefix": "getVehicleModType",
        "scope": "lua"
    },
    "setCharAccuracy": {
        "description": "setCharAccuracy",
        "body": [
            "setCharAccuracy(${0:Ped ped, int accuracy})"
        ],
        "prefix": "setCharAccuracy",
        "scope": "lua"
    },
    "addPriceModifier": {
        "description": "addPriceModifier",
        "body": [
            "addPriceModifier(${0:int item, int price})"
        ],
        "prefix": "addPriceModifier",
        "scope": "lua"
    },
    "setVehicleInterior": {
        "description": "setVehicleInterior",
        "body": [
            "setVehicleInterior(${0:Vehicle car, int interior})"
        ],
        "prefix": "setVehicleInterior",
        "scope": "lua"
    },
    "setCarAsMissionCar": {
        "description": "setCarAsMissionCar",
        "body": [
            "setCarAsMissionCar(${0:Vehicle car})"
        ],
        "prefix": "setCarAsMissionCar",
        "scope": "lua"
    },
    "enableEntryExitPlayerGroupWarping": {
        "description": "enableEntryExitPlayerGroupWarping",
        "body": [
            "enableEntryExitPlayerGroupWarping(${0:float X, float Y, float radius, bool access})"
        ],
        "prefix": "enableEntryExitPlayerGroupWarping",
        "scope": "lua"
    },
    "getClosestStealableObject": {
        "description": "getClosestStealableObject",
        "body": [
            "getClosestStealableObject(${0:float X, float Y, float Z, float radius})"
        ],
        "prefix": "getClosestStealableObject",
        "scope": "lua"
    },
    "taskJump": {
        "description": "taskJump",
        "body": [
            "taskJump(${0:Ped ped, bool jump})"
        ],
        "prefix": "taskJump",
        "scope": "lua"
    },
    "freezeObjectPosition": {
        "description": "freezeObjectPosition",
        "body": [
            "freezeObjectPosition(${0:Object object, bool freeze})"
        ],
        "prefix": "freezeObjectPosition",
        "scope": "lua"
    },
    "getObjectMass": {
        "description": "getObjectMass",
        "body": [
            "getObjectMass(${0:int int})"
        ],
        "prefix": "getObjectMass",
        "scope": "lua"
    },
    "setPlayerFireButton": {
        "description": "setPlayerFireButton",
        "body": [
            "setPlayerFireButton(${0:Player player, bool able})"
        ],
        "prefix": "setPlayerFireButton",
        "scope": "lua"
    },
    "setHeadingLimitForAttachedChar": {
        "description": "setHeadingLimitForAttachedChar",
        "body": [
            "setHeadingLimitForAttachedChar(${0:Ped ped, int orientation, float limit})"
        ],
        "prefix": "setHeadingLimitForAttachedChar",
        "scope": "lua"
    },
    "setCharDropsWeaponsWhenDead": {
        "description": "setCharDropsWeaponsWhenDead",
        "body": [
            "setCharDropsWeaponsWhenDead(${0:Ped ped, bool droppable})"
        ],
        "prefix": "setCharDropsWeaponsWhenDead",
        "scope": "lua"
    },
    "setCarStayInSlowLane": {
        "description": "setCarStayInSlowLane",
        "body": [
            "setCarStayInSlowLane(${0:Vehicle car, bool stay})"
        ],
        "prefix": "setCarStayInSlowLane",
        "scope": "lua"
    },
    "isCharTouchingObjectOnFoot": {
        "description": "isCharTouchingObjectOnFoot",
        "body": [
            "isCharTouchingObjectOnFoot(${0:Ped ped, Object object})"
        ],
        "prefix": "isCharTouchingObjectOnFoot",
        "scope": "lua"
    },
    "createPickup": {
        "description": "createPickup",
        "body": [
            "createPickup(${0:Model modelId, int type, float atX, float atY, float atZ})"
        ],
        "prefix": "createPickup",
        "scope": "lua"
    },
    "setCharVelocity": {
        "description": "setCharVelocity",
        "body": [
            "setCharVelocity(${0:Ped ped, float vecX, float vecY, float vecZ})"
        ],
        "prefix": "setCharVelocity",
        "scope": "lua"
    },
    "clearAreaOfCars": {
        "description": "clearAreaOfCars",
        "body": [
            "clearAreaOfCars(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "clearAreaOfCars",
        "scope": "lua"
    },
    "setMenuItemWith2Numbers": {
        "description": "setMenuItemWith2Numbers",
        "body": [
            "setMenuItemWith2Numbers(${0:int panel, int column, int row, GxtString gxtString, int numbers1, int numbers2})"
        ],
        "prefix": "setMenuItemWith2Numbers",
        "scope": "lua"
    },
    "setEnableRcDetonate": {
        "description": "setEnableRcDetonate",
        "body": [
            "setEnableRcDetonate(${0:bool detonation})"
        ],
        "prefix": "setEnableRcDetonate",
        "scope": "lua"
    },
    "setCharCanBeKnockedOffBike": {
        "description": "setCharCanBeKnockedOffBike",
        "body": [
            "setCharCanBeKnockedOffBike(${0:Ped ped, bool can})"
        ],
        "prefix": "setCharCanBeKnockedOffBike",
        "scope": "lua"
    },
    "setObjectPathSpeed": {
        "description": "setObjectPathSpeed",
        "body": [
            "setObjectPathSpeed(${0:int int1, int int2})"
        ],
        "prefix": "setObjectPathSpeed",
        "scope": "lua"
    },
    "getMenuItemAccepted": {
        "description": "getMenuItemAccepted",
        "body": [
            "getMenuItemAccepted(${0:int menu})"
        ],
        "prefix": "getMenuItemAccepted",
        "scope": "lua"
    },
    "requestVehicleMod": {
        "description": "requestVehicleMod",
        "body": [
            "requestVehicleMod(${0:Model component})"
        ],
        "prefix": "requestVehicleMod",
        "scope": "lua"
    },
    "printWithNumberBig": {
        "description": "printWithNumberBig",
        "body": [
            "printWithNumberBig(${0:GxtString gxtString, int number, int time, int style})"
        ],
        "prefix": "printWithNumberBig",
        "scope": "lua"
    },
    "placeObjectRelativeToCar": {
        "description": "placeObjectRelativeToCar",
        "body": [
            "placeObjectRelativeToCar(${0:Object object, Vehicle car, float offsetX, float offsetY, float offsetZ})"
        ],
        "prefix": "placeObjectRelativeToCar",
        "scope": "lua"
    },
    "isNextStationAllowed": {
        "description": "isNextStationAllowed",
        "body": [
            "isNextStationAllowed(${0:Vehicle train})"
        ],
        "prefix": "isNextStationAllowed",
        "scope": "lua"
    },
    "getRandomCharInSphereNoBrain": {
        "description": "getRandomCharInSphereNoBrain",
        "body": [
            "getRandomCharInSphereNoBrain(${0:float X, float Y, float Z, float radius})"
        ],
        "prefix": "getRandomCharInSphereNoBrain",
        "scope": "lua"
    },
    "setPlaneUndercarriageUp": {
        "description": "setPlaneUndercarriageUp",
        "body": [
            "setPlaneUndercarriageUp(${0:int plane, bool set})"
        ],
        "prefix": "setPlaneUndercarriageUp",
        "scope": "lua"
    },
    "addSparks": {
        "description": "addSparks",
        "body": [
            "addSparks(${0:float posX, float posY, float posZ, float vecX, float vecY, float vecZ, int density})"
        ],
        "prefix": "addSparks",
        "scope": "lua"
    },
    "getGameTimer": {
        "description": "getGameTimer",
        "body": [
            "getGameTimer()"
        ],
        "prefix": "getGameTimer",
        "scope": "lua"
    },
    "getTrainCarriage": {
        "description": "getTrainCarriage",
        "body": [
            "getTrainCarriage(${0:Vehicle train, int handle})"
        ],
        "prefix": "getTrainCarriage",
        "scope": "lua"
    },
    "setScriptLimitToGangSize": {
        "description": "setScriptLimitToGangSize",
        "body": [
            "setScriptLimitToGangSize(${0:bool max})"
        ],
        "prefix": "setScriptLimitToGangSize",
        "scope": "lua"
    },
    "isCarStoppedInArea3d": {
        "description": "isCarStoppedInArea3d",
        "body": [
            "isCarStoppedInArea3d(${0:Vehicle car, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere})"
        ],
        "prefix": "isCarStoppedInArea3d",
        "scope": "lua"
    },
    "switchPedRoadsOff": {
        "description": "switchPedRoadsOff",
        "body": [
            "switchPedRoadsOff(${0:float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ})"
        ],
        "prefix": "switchPedRoadsOff",
        "scope": "lua"
    },
    "clearSequenceTask": {
        "description": "clearSequenceTask",
        "body": [
            "clearSequenceTask(${0:int task})"
        ],
        "prefix": "clearSequenceTask",
        "scope": "lua"
    },
    "getCharVelocity": {
        "description": "getCharVelocity",
        "body": [
            "getCharVelocity(${0:Ped ped})"
        ],
        "prefix": "getCharVelocity",
        "scope": "lua"
    },
    "setActiveMenuItem": {
        "description": "setActiveMenuItem",
        "body": [
            "setActiveMenuItem(${0:int panel, int activeRow})"
        ],
        "prefix": "setActiveMenuItem",
        "scope": "lua"
    },
    "sampGetPickupPoolPtr": {
        "description": "sampGetPickupPoolPtr",
        "body": [
            "sampGetPickupPoolPtr()"
        ],
        "prefix": "sampGetPickupPoolPtr",
        "scope": "lua"
    },
    "attachMissionAudioToChar": {
        "description": "attachMissionAudioToChar",
        "body": [
            "attachMissionAudioToChar(${0:int id, Ped ped})"
        ],
        "prefix": "attachMissionAudioToChar",
        "scope": "lua"
    },
    "getCharHighestPriorityEvent": {
        "description": "getCharHighestPriorityEvent",
        "body": [
            "getCharHighestPriorityEvent(${0:Ped ped})"
        ],
        "prefix": "getCharHighestPriorityEvent",
        "scope": "lua"
    },
    "isPlayerPlaying": {
        "description": "isPlayerPlaying",
        "body": [
            "isPlayerPlaying(${0:Player player})"
        ],
        "prefix": "isPlayerPlaying",
        "scope": "lua"
    },
    "createRandomCarForCarPark": {
        "description": "createRandomCarForCarPark",
        "body": [
            "createRandomCarForCarPark(${0:float coordsX, float coordsY, float coordsZ, float zAngle})"
        ],
        "prefix": "createRandomCarForCarPark",
        "scope": "lua"
    }
}
