// Visual Studio Code Snippets for MOONLOADER by chapo
// version: 10.10.2022 - 17:55
{
	// VKEYS
	"VK_LAUNCH_MAIL": {"scope": "lua","prefix": "VK_LAUNCH_MAIL (180)","body": ["VK_LAUNCH_MAIL"],"description": "VK_LAUNCH_MAIL = 180"},
	"VK_OEM_COPY": {"scope": "lua","prefix": "VK_OEM_COPY (242)","body": ["VK_OEM_COPY"],"description": "VK_OEM_COPY = 242"},
	"VK_0": {"scope": "lua","prefix": "VK_0 (48)","body": ["VK_0"],"description": "VK_0 = 48"},
	"VK_MBUTTON": {"scope": "lua","prefix": "VK_MBUTTON (4)","body": ["VK_MBUTTON"],"description": "VK_MBUTTON = 4"},
	"VK_BROWSER_HOME": {"scope": "lua","prefix": "VK_BROWSER_HOME (172)","body": ["VK_BROWSER_HOME"],"description": "VK_BROWSER_HOME = 172"},
	"VK_RCONTROL": {"scope": "lua","prefix": "VK_RCONTROL (163)","body": ["VK_RCONTROL"],"description": "VK_RCONTROL = 163"},
	"VK_PRIOR": {"scope": "lua","prefix": "VK_PRIOR (33)","body": ["VK_PRIOR"],"description": "VK_PRIOR = 33"},
	"VK_BROWSER_STOP": {"scope": "lua","prefix": "VK_BROWSER_STOP (169)","body": ["VK_BROWSER_STOP"],"description": "VK_BROWSER_STOP = 169"},
	"VK_CRSEL": {"scope": "lua","prefix": "VK_CRSEL (247)","body": ["VK_CRSEL"],"description": "VK_CRSEL = 247"},
	"VK_F5": {"scope": "lua","prefix": "VK_F5 (116)","body": ["VK_F5"],"description": "VK_F5 = 116"},
	"VK_DOWN": {"scope": "lua","prefix": "VK_DOWN (40)","body": ["VK_DOWN"],"description": "VK_DOWN = 40"},
	"VK_F10": {"scope": "lua","prefix": "VK_F10 (121)","body": ["VK_F10"],"description": "VK_F10 = 121"},
	"VK_S": {"scope": "lua","prefix": "VK_S (83)","body": ["VK_S"],"description": "VK_S = 83"},
	"VK_RIGHT": {"scope": "lua","prefix": "VK_RIGHT (39)","body": ["VK_RIGHT"],"description": "VK_RIGHT = 39"},
	"VK_U": {"scope": "lua","prefix": "VK_U (85)","body": ["VK_U"],"description": "VK_U = 85"},
	"VK_OEM_PERIOD": {"scope": "lua","prefix": "VK_OEM_PERIOD (190)","body": ["VK_OEM_PERIOD"],"description": "VK_OEM_PERIOD = 190"},
	"VK_OEM_RESET": {"scope": "lua","prefix": "VK_OEM_RESET (233)","body": ["VK_OEM_RESET"],"description": "VK_OEM_RESET = 233"},
	"VK_K": {"scope": "lua","prefix": "VK_K (75)","body": ["VK_K"],"description": "VK_K = 75"},
	"VK_F11": {"scope": "lua","prefix": "VK_F11 (122)","body": ["VK_F11"],"description": "VK_F11 = 122"},
	"VK_SELECT": {"scope": "lua","prefix": "VK_SELECT (41)","body": ["VK_SELECT"],"description": "VK_SELECT = 41"},
	"VK_OEM_AX": {"scope": "lua","prefix": "VK_OEM_AX (225)","body": ["VK_OEM_AX"],"description": "VK_OEM_AX = 225"},
	"VK_PAUSE": {"scope": "lua","prefix": "VK_PAUSE (19)","body": ["VK_PAUSE"],"description": "VK_PAUSE = 19"},
	"VK_OEM_8": {"scope": "lua","prefix": "VK_OEM_8 (223)","body": ["VK_OEM_8"],"description": "VK_OEM_8 = 223"},
	"VK_OEM_FJ_TOUROKU": {"scope": "lua","prefix": "VK_OEM_FJ_TOUROKU (148)","body": ["VK_OEM_FJ_TOUROKU"],"description": "VK_OEM_FJ_TOUROKU = 148"},
	"VK_ATTN": {"scope": "lua","prefix": "VK_ATTN (246)","body": ["VK_ATTN"],"description": "VK_ATTN = 246"},
	"VK_OEM_FJ_LOYA": {"scope": "lua","prefix": "VK_OEM_FJ_LOYA (149)","body": ["VK_OEM_FJ_LOYA"],"description": "VK_OEM_FJ_LOYA = 149"},
	"VK_8": {"scope": "lua","prefix": "VK_8 (56)","body": ["VK_8"],"description": "VK_8 = 56"},
	"VK_OEM_FJ_JISHO": {"scope": "lua","prefix": "VK_OEM_FJ_JISHO (146)","body": ["VK_OEM_FJ_JISHO"],"description": "VK_OEM_FJ_JISHO = 146"},
	"VK_OEM_PA2": {"scope": "lua","prefix": "VK_OEM_PA2 (236)","body": ["VK_OEM_PA2"],"description": "VK_OEM_PA2 = 236"},
	"VK_5": {"scope": "lua","prefix": "VK_5 (53)","body": ["VK_5"],"description": "VK_5 = 53"},
	"VK_KANA": {"scope": "lua","prefix": "VK_KANA (21)","body": ["VK_KANA"],"description": "VK_KANA = 21"},
	"VK_LBUTTON": {"scope": "lua","prefix": "VK_LBUTTON (1)","body": ["VK_LBUTTON"],"description": "VK_LBUTTON = 1"},
	"VK_CONVERT": {"scope": "lua","prefix": "VK_CONVERT (28)","body": ["VK_CONVERT"],"description": "VK_CONVERT = 28"},
	"VK_F23": {"scope": "lua","prefix": "VK_F23 (134)","body": ["VK_F23"],"description": "VK_F23 = 134"},
	"VK_ESCAPE": {"scope": "lua","prefix": "VK_ESCAPE (27)","body": ["VK_ESCAPE"],"description": "VK_ESCAPE = 27"},
	"VK_ABNT_C1": {"scope": "lua","prefix": "VK_ABNT_C1 (193)","body": ["VK_ABNT_C1"],"description": "VK_ABNT_C1 = 193"},
	"VK_MULTIPLY": {"scope": "lua","prefix": "VK_MULTIPLY (106)","body": ["VK_MULTIPLY"],"description": "VK_MULTIPLY = 106"},
	"VK_RBUTTON": {"scope": "lua","prefix": "VK_RBUTTON (2)","body": ["VK_RBUTTON"],"description": "VK_RBUTTON = 2"},
	"VK_XBUTTON2": {"scope": "lua","prefix": "VK_XBUTTON2 (6)","body": ["VK_XBUTTON2"],"description": "VK_XBUTTON2 = 6"},
	"VK_NUMPAD8": {"scope": "lua","prefix": "VK_NUMPAD8 (104)","body": ["VK_NUMPAD8"],"description": "VK_NUMPAD8 = 104"},
	"VK_M": {"scope": "lua","prefix": "VK_M (77)","body": ["VK_M"],"description": "VK_M = 77"},
	"VK_APPS": {"scope": "lua","prefix": "VK_APPS (93)","body": ["VK_APPS"],"description": "VK_APPS = 93"},
	"VK_OEM_1": {"scope": "lua","prefix": "VK_OEM_1 (186)","body": ["VK_OEM_1"],"description": "VK_OEM_1 = 186"},
	"VK_OEM_ATTN": {"scope": "lua","prefix": "VK_OEM_ATTN (240)","body": ["VK_OEM_ATTN"],"description": "VK_OEM_ATTN = 240"},
	"VK_F14": {"scope": "lua","prefix": "VK_F14 (125)","body": ["VK_F14"],"description": "VK_F14 = 125"},
	"VK_F18": {"scope": "lua","prefix": "VK_F18 (129)","body": ["VK_F18"],"description": "VK_F18 = 129"},
	"VK_NUMPAD0": {"scope": "lua","prefix": "VK_NUMPAD0 (96)","body": ["VK_NUMPAD0"],"description": "VK_NUMPAD0 = 96"},
	"VK_MEDIA_PLAY_PAUSE": {"scope": "lua","prefix": "VK_MEDIA_PLAY_PAUSE (179)","body": ["VK_MEDIA_PLAY_PAUSE"],"description": "VK_MEDIA_PLAY_PAUSE = 179"},
	"VK_RSHIFT": {"scope": "lua","prefix": "VK_RSHIFT (161)","body": ["VK_RSHIFT"],"description": "VK_RSHIFT = 161"},
	"VK_6": {"scope": "lua","prefix": "VK_6 (54)","body": ["VK_6"],"description": "VK_6 = 54"},
	"VK_NUMPAD9": {"scope": "lua","prefix": "VK_NUMPAD9 (105)","body": ["VK_NUMPAD9"],"description": "VK_NUMPAD9 = 105"},
	"VK_NEXT": {"scope": "lua","prefix": "VK_NEXT (34)","body": ["VK_NEXT"],"description": "VK_NEXT = 34"},
	"VK_NUMPAD5": {"scope": "lua","prefix": "VK_NUMPAD5 (101)","body": ["VK_NUMPAD5"],"description": "VK_NUMPAD5 = 101"},
	"VK_KANJI": {"scope": "lua","prefix": "VK_KANJI (25)","body": ["VK_KANJI"],"description": "VK_KANJI = 25"},
	"VK_F8": {"scope": "lua","prefix": "VK_F8 (119)","body": ["VK_F8"],"description": "VK_F8 = 119"},
	"VK_OEM_6": {"scope": "lua","prefix": "VK_OEM_6 (221)","body": ["VK_OEM_6"],"description": "VK_OEM_6 = 221"},
	"VK_END": {"scope": "lua","prefix": "VK_END (35)","body": ["VK_END"],"description": "VK_END = 35"},
	"VK_7": {"scope": "lua","prefix": "VK_7 (55)","body": ["VK_7"],"description": "VK_7 = 55"},
	"VK_OEM_PLUS": {"scope": "lua","prefix": "VK_OEM_PLUS (187)","body": ["VK_OEM_PLUS"],"description": "VK_OEM_PLUS = 187"},
	"VK_HELP": {"scope": "lua","prefix": "VK_HELP (47)","body": ["VK_HELP"],"description": "VK_HELP = 47"},
	"VK_JUNJA": {"scope": "lua","prefix": "VK_JUNJA (23)","body": ["VK_JUNJA"],"description": "VK_JUNJA = 23"},
	"VK_MEDIA_PREV_TRACK": {"scope": "lua","prefix": "VK_MEDIA_PREV_TRACK (177)","body": ["VK_MEDIA_PREV_TRACK"],"description": "VK_MEDIA_PREV_TRACK = 177"},
	"VK_N": {"scope": "lua","prefix": "VK_N (78)","body": ["VK_N"],"description": "VK_N = 78"},
	"VK_PRINT": {"scope": "lua","prefix": "VK_PRINT (42)","body": ["VK_PRINT"],"description": "VK_PRINT = 42"},
	"VK_SNAPSHOT": {"scope": "lua","prefix": "VK_SNAPSHOT (44)","body": ["VK_SNAPSHOT"],"description": "VK_SNAPSHOT = 44"},
	"VK_ACCEPT": {"scope": "lua","prefix": "VK_ACCEPT (30)","body": ["VK_ACCEPT"],"description": "VK_ACCEPT = 30"},
	"VK_G": {"scope": "lua","prefix": "VK_G (71)","body": ["VK_G"],"description": "VK_G = 71"},
	"VK_D": {"scope": "lua","prefix": "VK_D (68)","body": ["VK_D"],"description": "VK_D = 68"},
	"VK_OEM_5": {"scope": "lua","prefix": "VK_OEM_5 (220)","body": ["VK_OEM_5"],"description": "VK_OEM_5 = 220"},
	"VK_OEM_FJ_ROYA": {"scope": "lua","prefix": "VK_OEM_FJ_ROYA (150)","body": ["VK_OEM_FJ_ROYA"],"description": "VK_OEM_FJ_ROYA = 150"},
	"VK_R": {"scope": "lua","prefix": "VK_R (82)","body": ["VK_R"],"description": "VK_R = 82"},
	"VK_CANCEL": {"scope": "lua","prefix": "VK_CANCEL (3)","body": ["VK_CANCEL"],"description": "VK_CANCEL = 3"},
	"VK_NUMPAD7": {"scope": "lua","prefix": "VK_NUMPAD7 (103)","body": ["VK_NUMPAD7"],"description": "VK_NUMPAD7 = 103"},
	"VK_OEM_CLEAR": {"scope": "lua","prefix": "VK_OEM_CLEAR (254)","body": ["VK_OEM_CLEAR"],"description": "VK_OEM_CLEAR = 254"},
	"VK_OEM_WSCTRL": {"scope": "lua","prefix": "VK_OEM_WSCTRL (238)","body": ["VK_OEM_WSCTRL"],"description": "VK_OEM_WSCTRL = 238"},
	"VK_PA1": {"scope": "lua","prefix": "VK_PA1 (253)","body": ["VK_PA1"],"description": "VK_PA1 = 253"},
	"VK_ZOOM": {"scope": "lua","prefix": "VK_ZOOM (251)","body": ["VK_ZOOM"],"description": "VK_ZOOM = 251"},
	"VK_2": {"scope": "lua","prefix": "VK_2 (50)","body": ["VK_2"],"description": "VK_2 = 50"},
	"VK_PLAY": {"scope": "lua","prefix": "VK_PLAY (250)","body": ["VK_PLAY"],"description": "VK_PLAY = 250"},
	"VK_EREOF": {"scope": "lua","prefix": "VK_EREOF (249)","body": ["VK_EREOF"],"description": "VK_EREOF = 249"},
	"VK_OEM_7": {"scope": "lua","prefix": "VK_OEM_7 (222)","body": ["VK_OEM_7"],"description": "VK_OEM_7 = 222"},
	"VK_Y": {"scope": "lua","prefix": "VK_Y (89)","body": ["VK_Y"],"description": "VK_Y = 89"},
	"VK_OEM_ENLW": {"scope": "lua","prefix": "VK_OEM_ENLW (244)","body": ["VK_OEM_ENLW"],"description": "VK_OEM_ENLW = 244"},
	"VK_A": {"scope": "lua","prefix": "VK_A (65)","body": ["VK_A"],"description": "VK_A = 65"},
	"VK_OEM_BACKTAB": {"scope": "lua","prefix": "VK_OEM_BACKTAB (245)","body": ["VK_OEM_BACKTAB"],"description": "VK_OEM_BACKTAB = 245"},
	"VK_V": {"scope": "lua","prefix": "VK_V (86)","body": ["VK_V"],"description": "VK_V = 86"},
	"VK_SPACE": {"scope": "lua","prefix": "VK_SPACE (32)","body": ["VK_SPACE"],"description": "VK_SPACE = 32"},
	"VK_F17": {"scope": "lua","prefix": "VK_F17 (128)","body": ["VK_F17"],"description": "VK_F17 = 128"},
	"VK_OEM_AUTO": {"scope": "lua","prefix": "VK_OEM_AUTO (243)","body": ["VK_OEM_AUTO"],"description": "VK_OEM_AUTO = 243"},
	"VK_OEM_FINISH": {"scope": "lua","prefix": "VK_OEM_FINISH (241)","body": ["VK_OEM_FINISH"],"description": "VK_OEM_FINISH = 241"},
	"VK_OEM_CUSEL": {"scope": "lua","prefix": "VK_OEM_CUSEL (239)","body": ["VK_OEM_CUSEL"],"description": "VK_OEM_CUSEL = 239"},
	"VK_OEM_PA3": {"scope": "lua","prefix": "VK_OEM_PA3 (237)","body": ["VK_OEM_PA3"],"description": "VK_OEM_PA3 = 237"},
	"VK_OEM_PA1": {"scope": "lua","prefix": "VK_OEM_PA1 (235)","body": ["VK_OEM_PA1"],"description": "VK_OEM_PA1 = 235"},
	"VK_OEM_JUMP": {"scope": "lua","prefix": "VK_OEM_JUMP (234)","body": ["VK_OEM_JUMP"],"description": "VK_OEM_JUMP = 234"},
	"VK_F3": {"scope": "lua","prefix": "VK_F3 (114)","body": ["VK_F3"],"description": "VK_F3 = 114"},
	"VK_PACKET": {"scope": "lua","prefix": "VK_PACKET (231)","body": ["VK_PACKET"],"description": "VK_PACKET = 231"},
	"VK_3": {"scope": "lua","prefix": "VK_3 (51)","body": ["VK_3"],"description": "VK_3 = 51"},
	"VK_F9": {"scope": "lua","prefix": "VK_F9 (120)","body": ["VK_F9"],"description": "VK_F9 = 120"},
	"VK_J": {"scope": "lua","prefix": "VK_J (74)","body": ["VK_J"],"description": "VK_J = 74"},
	"VK_ICO_CLEAR": {"scope": "lua","prefix": "VK_ICO_CLEAR (230)","body": ["VK_ICO_CLEAR"],"description": "VK_ICO_CLEAR = 230"},
	"VK_PROCESSKEY": {"scope": "lua","prefix": "VK_PROCESSKEY (229)","body": ["VK_PROCESSKEY"],"description": "VK_PROCESSKEY = 229"},
	"VK_SHIFT": {"scope": "lua","prefix": "VK_SHIFT (16)","body": ["VK_SHIFT"],"description": "VK_SHIFT = 16"},
	"VK_ICO_HELP": {"scope": "lua","prefix": "VK_ICO_HELP (227)","body": ["VK_ICO_HELP"],"description": "VK_ICO_HELP = 227"},
	"VK_ABNT_C2": {"scope": "lua","prefix": "VK_ABNT_C2 (194)","body": ["VK_ABNT_C2"],"description": "VK_ABNT_C2 = 194"},
	"VK_OEM_102": {"scope": "lua","prefix": "VK_OEM_102 (226)","body": ["VK_OEM_102"],"description": "VK_OEM_102 = 226"},
	"VK_EXSEL": {"scope": "lua","prefix": "VK_EXSEL (248)","body": ["VK_EXSEL"],"description": "VK_EXSEL = 248"},
	"VK_LMENU": {"scope": "lua","prefix": "VK_LMENU (164)","body": ["VK_LMENU"],"description": "VK_LMENU = 164"},
	"VK_SUBTRACT": {"scope": "lua","prefix": "VK_SUBTRACT (109)","body": ["VK_SUBTRACT"],"description": "VK_SUBTRACT = 109"},
	"VK_NUMPAD4": {"scope": "lua","prefix": "VK_NUMPAD4 (100)","body": ["VK_NUMPAD4"],"description": "VK_NUMPAD4 = 100"},
	"VK_OEM_4": {"scope": "lua","prefix": "VK_OEM_4 (219)","body": ["VK_OEM_4"],"description": "VK_OEM_4 = 219"},
	"VK_DELETE": {"scope": "lua","prefix": "VK_DELETE (46)","body": ["VK_DELETE"],"description": "VK_DELETE = 46"},
	"VK_9": {"scope": "lua","prefix": "VK_9 (57)","body": ["VK_9"],"description": "VK_9 = 57"},
	"VK_OEM_3": {"scope": "lua","prefix": "VK_OEM_3 (192)","body": ["VK_OEM_3"],"description": "VK_OEM_3 = 192"},
	"VK_OEM_2": {"scope": "lua","prefix": "VK_OEM_2 (191)","body": ["VK_OEM_2"],"description": "VK_OEM_2 = 191"},
	"VK_O": {"scope": "lua","prefix": "VK_O (79)","body": ["VK_O"],"description": "VK_O = 79"},
	"VK_CLEAR": {"scope": "lua","prefix": "VK_CLEAR (12)","body": ["VK_CLEAR"],"description": "VK_CLEAR = 12"},
	"VK_OEM_COMMA": {"scope": "lua","prefix": "VK_OEM_COMMA (188)","body": ["VK_OEM_COMMA"],"description": "VK_OEM_COMMA = 188"},
	"VK_LAUNCH_APP2": {"scope": "lua","prefix": "VK_LAUNCH_APP2 (183)","body": ["VK_LAUNCH_APP2"],"description": "VK_LAUNCH_APP2 = 183"},
	"VK_1": {"scope": "lua","prefix": "VK_1 (49)","body": ["VK_1"],"description": "VK_1 = 49"},
	"VK_MEDIA_STOP": {"scope": "lua","prefix": "VK_MEDIA_STOP (178)","body": ["VK_MEDIA_STOP"],"description": "VK_MEDIA_STOP = 178"},
	"VK_LAUNCH_MEDIA_SELECT": {"scope": "lua","prefix": "VK_LAUNCH_MEDIA_SELECT (181)","body": ["VK_LAUNCH_MEDIA_SELECT"],"description": "VK_LAUNCH_MEDIA_SELECT = 181"},
	"VK_LAUNCH_APP1": {"scope": "lua","prefix": "VK_LAUNCH_APP1 (182)","body": ["VK_LAUNCH_APP1"],"description": "VK_LAUNCH_APP1 = 182"},
	"VK_VOLUME_UP": {"scope": "lua","prefix": "VK_VOLUME_UP (175)","body": ["VK_VOLUME_UP"],"description": "VK_VOLUME_UP = 175"},
	"VK_BACK": {"scope": "lua","prefix": "VK_BACK (8)","body": ["VK_BACK"],"description": "VK_BACK = 8"},
	"VK_F4": {"scope": "lua","prefix": "VK_F4 (115)","body": ["VK_F4"],"description": "VK_F4 = 115"},
	"VK_F7": {"scope": "lua","prefix": "VK_F7 (118)","body": ["VK_F7"],"description": "VK_F7 = 118"},
	"VK_CAPITAL": {"scope": "lua","prefix": "VK_CAPITAL (20)","body": ["VK_CAPITAL"],"description": "VK_CAPITAL = 20"},
	"VK_MEDIA_NEXT_TRACK": {"scope": "lua","prefix": "VK_MEDIA_NEXT_TRACK (176)","body": ["VK_MEDIA_NEXT_TRACK"],"description": "VK_MEDIA_NEXT_TRACK = 176"},
	"VK_VOLUME_DOWN": {"scope": "lua","prefix": "VK_VOLUME_DOWN (174)","body": ["VK_VOLUME_DOWN"],"description": "VK_VOLUME_DOWN = 174"},
	"VK_VOLUME_MUTE": {"scope": "lua","prefix": "VK_VOLUME_MUTE (173)","body": ["VK_VOLUME_MUTE"],"description": "VK_VOLUME_MUTE = 173"},
	"VK_BROWSER_FAVORITES": {"scope": "lua","prefix": "VK_BROWSER_FAVORITES (171)","body": ["VK_BROWSER_FAVORITES"],"description": "VK_BROWSER_FAVORITES = 171"},
	"VK_BROWSER_SEARCH": {"scope": "lua","prefix": "VK_BROWSER_SEARCH (170)","body": ["VK_BROWSER_SEARCH"],"description": "VK_BROWSER_SEARCH = 170"},
	"VK_DIVIDE": {"scope": "lua","prefix": "VK_DIVIDE (111)","body": ["VK_DIVIDE"],"description": "VK_DIVIDE = 111"},
	"VK_NUMPAD2": {"scope": "lua","prefix": "VK_NUMPAD2 (98)","body": ["VK_NUMPAD2"],"description": "VK_NUMPAD2 = 98"},
	"VK_MENU": {"scope": "lua","prefix": "VK_MENU (18)","body": ["VK_MENU"],"description": "VK_MENU = 18"},
	"VK_F15": {"scope": "lua","prefix": "VK_F15 (126)","body": ["VK_F15"],"description": "VK_F15 = 126"},
	"VK_SLEEP": {"scope": "lua","prefix": "VK_SLEEP (95)","body": ["VK_SLEEP"],"description": "VK_SLEEP = 95"},
	"VK_BROWSER_BACK": {"scope": "lua","prefix": "VK_BROWSER_BACK (166)","body": ["VK_BROWSER_BACK"],"description": "VK_BROWSER_BACK = 166"},
	"VK_RMENU": {"scope": "lua","prefix": "VK_RMENU (165)","body": ["VK_RMENU"],"description": "VK_RMENU = 165"},
	"VK_LCONTROL": {"scope": "lua","prefix": "VK_LCONTROL (162)","body": ["VK_LCONTROL"],"description": "VK_LCONTROL = 162"},
	"VK_LSHIFT": {"scope": "lua","prefix": "VK_LSHIFT (160)","body": ["VK_LSHIFT"],"description": "VK_LSHIFT = 160"},
	"VK_OEM_FJ_MASSHOU": {"scope": "lua","prefix": "VK_OEM_FJ_MASSHOU (147)","body": ["VK_OEM_FJ_MASSHOU"],"description": "VK_OEM_FJ_MASSHOU = 147"},
	"VK_Z": {"scope": "lua","prefix": "VK_Z (90)","body": ["VK_Z"],"description": "VK_Z = 90"},
	"VK_SCROLL": {"scope": "lua","prefix": "VK_SCROLL (145)","body": ["VK_SCROLL"],"description": "VK_SCROLL = 145"},
	"VK_HOME": {"scope": "lua","prefix": "VK_HOME (36)","body": ["VK_HOME"],"description": "VK_HOME = 36"},
	"VK_MODECHANGE": {"scope": "lua","prefix": "VK_MODECHANGE (31)","body": ["VK_MODECHANGE"],"description": "VK_MODECHANGE = 31"},
	"VK_X": {"scope": "lua","prefix": "VK_X (88)","body": ["VK_X"],"description": "VK_X = 88"},
	"VK_T": {"scope": "lua","prefix": "VK_T (84)","body": ["VK_T"],"description": "VK_T = 84"},
	"VK_NONCONVERT": {"scope": "lua","prefix": "VK_NONCONVERT (29)","body": ["VK_NONCONVERT"],"description": "VK_NONCONVERT = 29"},
	"VK_F12": {"scope": "lua","prefix": "VK_F12 (123)","body": ["VK_F12"],"description": "VK_F12 = 123"},
	"VK_ADD": {"scope": "lua","prefix": "VK_ADD (107)","body": ["VK_ADD"],"description": "VK_ADD = 107"},
	"VK_RWIN": {"scope": "lua","prefix": "VK_RWIN (92)","body": ["VK_RWIN"],"description": "VK_RWIN = 92"},
	"VK_C": {"scope": "lua","prefix": "VK_C (67)","body": ["VK_C"],"description": "VK_C = 67"},
	"VK_F": {"scope": "lua","prefix": "VK_F (70)","body": ["VK_F"],"description": "VK_F = 70"},
	"VK_Q": {"scope": "lua","prefix": "VK_Q (81)","body": ["VK_Q"],"description": "VK_Q = 81"},
	"VK_F22": {"scope": "lua","prefix": "VK_F22 (133)","body": ["VK_F22"],"description": "VK_F22 = 133"},
	"VK_F21": {"scope": "lua","prefix": "VK_F21 (132)","body": ["VK_F21"],"description": "VK_F21 = 132"},
	"VK_I": {"scope": "lua","prefix": "VK_I (73)","body": ["VK_I"],"description": "VK_I = 73"},
	"VK_F20": {"scope": "lua","prefix": "VK_F20 (131)","body": ["VK_F20"],"description": "VK_F20 = 131"},
	"VK_RETURN": {"scope": "lua","prefix": "VK_RETURN (13)","body": ["VK_RETURN"],"description": "VK_RETURN = 13"},
	"VK_F19": {"scope": "lua","prefix": "VK_F19 (130)","body": ["VK_F19"],"description": "VK_F19 = 130"},
	"VK_XBUTTON1": {"scope": "lua","prefix": "VK_XBUTTON1 (5)","body": ["VK_XBUTTON1"],"description": "VK_XBUTTON1 = 5"},
	"VK_F16": {"scope": "lua","prefix": "VK_F16 (127)","body": ["VK_F16"],"description": "VK_F16 = 127"},
	"VK_F13": {"scope": "lua","prefix": "VK_F13 (124)","body": ["VK_F13"],"description": "VK_F13 = 124"},
	"VK_CONTROL": {"scope": "lua","prefix": "VK_CONTROL (17)","body": ["VK_CONTROL"],"description": "VK_CONTROL = 17"},
	"VK_F6": {"scope": "lua","prefix": "VK_F6 (117)","body": ["VK_F6"],"description": "VK_F6 = 117"},
	"VK_SEPARATOR": {"scope": "lua","prefix": "VK_SEPARATOR (108)","body": ["VK_SEPARATOR"],"description": "VK_SEPARATOR = 108"},
	"VK_F24": {"scope": "lua","prefix": "VK_F24 (135)","body": ["VK_F24"],"description": "VK_F24 = 135"},
	"VK_DECIMAL": {"scope": "lua","prefix": "VK_DECIMAL (110)","body": ["VK_DECIMAL"],"description": "VK_DECIMAL = 110"},
	"VK_F2": {"scope": "lua","prefix": "VK_F2 (113)","body": ["VK_F2"],"description": "VK_F2 = 113"},
	"VK_NUMPAD6": {"scope": "lua","prefix": "VK_NUMPAD6 (102)","body": ["VK_NUMPAD6"],"description": "VK_NUMPAD6 = 102"},
	"VK_NUMPAD3": {"scope": "lua","prefix": "VK_NUMPAD3 (99)","body": ["VK_NUMPAD3"],"description": "VK_NUMPAD3 = 99"},
	"VK_B": {"scope": "lua","prefix": "VK_B (66)","body": ["VK_B"],"description": "VK_B = 66"},
	"VK_TAB": {"scope": "lua","prefix": "VK_TAB (9)","body": ["VK_TAB"],"description": "VK_TAB = 9"},
	"VK_BROWSER_REFRESH": {"scope": "lua","prefix": "VK_BROWSER_REFRESH (168)","body": ["VK_BROWSER_REFRESH"],"description": "VK_BROWSER_REFRESH = 168"},
	"VK_NUMPAD1": {"scope": "lua","prefix": "VK_NUMPAD1 (97)","body": ["VK_NUMPAD1"],"description": "VK_NUMPAD1 = 97"},
	"VK_BROWSER_FORWARD": {"scope": "lua","prefix": "VK_BROWSER_FORWARD (167)","body": ["VK_BROWSER_FORWARD"],"description": "VK_BROWSER_FORWARD = 167"},
	"VK_LWIN": {"scope": "lua","prefix": "VK_LWIN (91)","body": ["VK_LWIN"],"description": "VK_LWIN = 91"},
	"VK_LEFT": {"scope": "lua","prefix": "VK_LEFT (37)","body": ["VK_LEFT"],"description": "VK_LEFT = 37"},
	"VK_NUMLOCK": {"scope": "lua","prefix": "VK_NUMLOCK (144)","body": ["VK_NUMLOCK"],"description": "VK_NUMLOCK = 144"},
	"VK_W": {"scope": "lua","prefix": "VK_W (87)","body": ["VK_W"],"description": "VK_W = 87"},
	"VK_P": {"scope": "lua","prefix": "VK_P (80)","body": ["VK_P"],"description": "VK_P = 80"},
	"VK_OEM_MINUS": {"scope": "lua","prefix": "VK_OEM_MINUS (189)","body": ["VK_OEM_MINUS"],"description": "VK_OEM_MINUS = 189"},
	"VK_L": {"scope": "lua","prefix": "VK_L (76)","body": ["VK_L"],"description": "VK_L = 76"},
	"VK_H": {"scope": "lua","prefix": "VK_H (72)","body": ["VK_H"],"description": "VK_H = 72"},
	"VK_E": {"scope": "lua","prefix": "VK_E (69)","body": ["VK_E"],"description": "VK_E = 69"},
	"VK_FINAL": {"scope": "lua","prefix": "VK_FINAL (24)","body": ["VK_FINAL"],"description": "VK_FINAL = 24"},
	"VK_4": {"scope": "lua","prefix": "VK_4 (52)","body": ["VK_4"],"description": "VK_4 = 52"},
	"VK_EXECUTE": {"scope": "lua","prefix": "VK_EXECUTE (43)","body": ["VK_EXECUTE"],"description": "VK_EXECUTE = 43"},
	"VK_F1": {"scope": "lua","prefix": "VK_F1 (112)","body": ["VK_F1"],"description": "VK_F1 = 112"},
	"VK_INSERT": {"scope": "lua","prefix": "VK_INSERT (45)","body": ["VK_INSERT"],"description": "VK_INSERT = 45"},
	"VK_UP": {"scope": "lua","prefix": "VK_UP (38)","body": ["VK_UP"],"description": "VK_UP = 38"},

	// lib\SAMPFUNCS.lua
	"PACKET_NO_FREE_INCOMING_CONNECTIONS": {"scope": "lua","prefix": "PACKET_NO_FREE_INCOMING_CONNECTIONS (31)","body": ["31"],"description": "PACKET_NO_FREE_INCOMING_CONNECTIONS = 31"},
	"RPC_SCRSETVEHICLEPARAMSFORPLAYER": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEPARAMSFORPLAYER (161)","body": ["161"],"description": "RPC_SCRSETVEHICLEPARAMSFORPLAYER = 161"},
	"RPC_SCRSETPLAYERFACINGANGLE": {"scope": "lua","prefix": "RPC_SCRSETPLAYERFACINGANGLE (19)","body": ["19"],"description": "RPC_SCRSETPLAYERFACINGANGLE = 19"},
	"RPC_SCRWORLDPLAYERREMOVE": {"scope": "lua","prefix": "RPC_SCRWORLDPLAYERREMOVE (163)","body": ["163"],"description": "RPC_SCRWORLDPLAYERREMOVE = 163"},
	"RPC_SCRGIVEPLAYERMONEY": {"scope": "lua","prefix": "RPC_SCRGIVEPLAYERMONEY (18)","body": ["18"],"description": "RPC_SCRGIVEPLAYERMONEY = 18"},
	"RPC_SCRREMOVEBUILDINGFORPLAYER": {"scope": "lua","prefix": "RPC_SCRREMOVEBUILDINGFORPLAYER (43)","body": ["43"],"description": "RPC_SCRREMOVEBUILDINGFORPLAYER = 43"},
	"RPC_SCRPUTPLAYERINVEHICLE": {"scope": "lua","prefix": "RPC_SCRPUTPLAYERINVEHICLE (70)","body": ["70"],"description": "RPC_SCRPUTPLAYERINVEHICLE = 70"},
	"PACKET_REQUEST_STATIC_DATA": {"scope": "lua","prefix": "PACKET_REQUEST_STATIC_DATA (10)","body": ["10"],"description": "PACKET_REQUEST_STATIC_DATA = 10"},
	"RPC_NPCJOIN": {"scope": "lua","prefix": "RPC_NPCJOIN (54)","body": ["54"],"description": "RPC_NPCJOIN = 54"},
	"RPC_SCRSETPLAYERSKILLLEVEL": {"scope": "lua","prefix": "RPC_SCRSETPLAYERSKILLLEVEL (34)","body": ["34"],"description": "RPC_SCRSETPLAYERSKILLLEVEL = 34"},
	"PACKET_ADVERTISE_SYSTEM": {"scope": "lua","prefix": "PACKET_ADVERTISE_SYSTEM (56)","body": ["56"],"description": "PACKET_ADVERTISE_SYSTEM = 56"},
	"RPC_SCRSETCAMERABEHINDPLAYER": {"scope": "lua","prefix": "RPC_SCRSETCAMERABEHINDPLAYER (162)","body": ["162"],"description": "RPC_SCRSETCAMERABEHINDPLAYER = 162"},
	"PACKET_TIMESTAMP": {"scope": "lua","prefix": "PACKET_TIMESTAMP (40)","body": ["40"],"description": "PACKET_TIMESTAMP = 40"},
	"RPC_SCRWORLDPLAYERADD": {"scope": "lua","prefix": "RPC_SCRWORLDPLAYERADD (32)","body": ["32"],"description": "RPC_SCRWORLDPLAYERADD = 32"},
	"RPC_SCRPLAYAUDIOSTREAM": {"scope": "lua","prefix": "RPC_SCRPLAYAUDIOSTREAM (41)","body": ["41"],"description": "RPC_SCRPLAYAUDIOSTREAM = 41"},
	"RPC_SCRUPDATE3DTEXTLABEL": {"scope": "lua","prefix": "RPC_SCRUPDATE3DTEXTLABEL (58)","body": ["58"],"description": "RPC_SCRUPDATE3DTEXTLABEL = 58"},
	"PACKET_CONNECTION_BANNED": {"scope": "lua","prefix": "PACKET_CONNECTION_BANNED (36)","body": ["36"],"description": "PACKET_CONNECTION_BANNED = 36"},
	"PACKET_MODIFIED_PACKET": {"scope": "lua","prefix": "PACKET_MODIFIED_PACKET (38)","body": ["38"],"description": "PACKET_MODIFIED_PACKET = 38"},
	"PACKET_MARKERS_SYNC": {"scope": "lua","prefix": "PACKET_MARKERS_SYNC (208)","body": ["208"],"description": "PACKET_MARKERS_SYNC = 208"},
	"RPC_EDITATTACHEDOBJECT": {"scope": "lua","prefix": "RPC_EDITATTACHEDOBJECT (116)","body": ["116"],"description": "RPC_EDITATTACHEDOBJECT = 116"},
	"RPC_SCRSHOWTEXTDRAW": {"scope": "lua","prefix": "RPC_SCRSHOWTEXTDRAW (134)","body": ["134"],"description": "RPC_SCRSHOWTEXTDRAW = 134"},
	"RPC_SCRSETPLAYERTIME": {"scope": "lua","prefix": "RPC_SCRSETPLAYERTIME (29)","body": ["29"],"description": "RPC_SCRSETPLAYERTIME = 29"},
	"PACKET_DETECT_LOST_CONNECTIONS": {"scope": "lua","prefix": "PACKET_DETECT_LOST_CONNECTIONS (23)","body": ["23"],"description": "PACKET_DETECT_LOST_CONNECTIONS = 23"},
	"PACKET_INVALID_PASSWORD": {"scope": "lua","prefix": "PACKET_INVALID_PASSWORD (37)","body": ["37"],"description": "PACKET_INVALID_PASSWORD = 37"},
	"RPC_SETINTERIORID": {"scope": "lua","prefix": "RPC_SETINTERIORID (118)","body": ["118"],"description": "RPC_SETINTERIORID = 118"},
	"RPC_SCRDESTROYOBJECT": {"scope": "lua","prefix": "RPC_SCRDESTROYOBJECT (47)","body": ["47"],"description": "RPC_SCRDESTROYOBJECT = 47"},
	"RPC_SCRSETPLAYERWANTEDLEVEL": {"scope": "lua","prefix": "RPC_SCRSETPLAYERWANTEDLEVEL (133)","body": ["133"],"description": "RPC_SCRSETPLAYERWANTEDLEVEL = 133"},
	"RPC_REQUESTSPAWN": {"scope": "lua","prefix": "RPC_REQUESTSPAWN (129)","body": ["129"],"description": "RPC_REQUESTSPAWN = 129"},
	"RPC_SCRSETPLAYERATTACHEDOBJECT": {"scope": "lua","prefix": "RPC_SCRSETPLAYERATTACHEDOBJECT (113)","body": ["113"],"description": "RPC_SCRSETPLAYERATTACHEDOBJECT = 113"},
	"PACKET_BROADCAST_PINGS": {"scope": "lua","prefix": "PACKET_BROADCAST_PINGS (14)","body": ["14"],"description": "PACKET_BROADCAST_PINGS = 14"},
	"RPC_SCRGANGZONEFLASH": {"scope": "lua","prefix": "RPC_SCRGANGZONEFLASH (121)","body": ["121"],"description": "RPC_SCRGANGZONEFLASH = 121"},
	"RPC_SERVERCOMMAND": {"scope": "lua","prefix": "RPC_SERVERCOMMAND (50)","body": ["50"],"description": "RPC_SERVERCOMMAND = 50"},
	"RPC_SCRGAMEMODERESTART": {"scope": "lua","prefix": "RPC_SCRGAMEMODERESTART (40)","body": ["40"],"description": "RPC_SCRGAMEMODERESTART = 40"},
	"RPC_SCRSETPLAYERWORLDBOUNDS": {"scope": "lua","prefix": "RPC_SCRSETPLAYERWORLDBOUNDS (17)","body": ["17"],"description": "RPC_SCRSETPLAYERWORLDBOUNDS = 17"},
	"PACKET_CONNECTION_ATTEMPT_FAILED": {"scope": "lua","prefix": "PACKET_CONNECTION_ATTEMPT_FAILED (29)","body": ["29"],"description": "PACKET_CONNECTION_ATTEMPT_FAILED = 29"},
	"RPC_SCRCLEARANIMATIONS": {"scope": "lua","prefix": "RPC_SCRCLEARANIMATIONS (87)","body": ["87"],"description": "RPC_SCRCLEARANIMATIONS = 87"},
	"RPC_SCRCREATEOBJECT": {"scope": "lua","prefix": "RPC_SCRCREATEOBJECT (44)","body": ["44"],"description": "RPC_SCRCREATEOBJECT = 44"},
	"RPC_CLIENTJOIN": {"scope": "lua","prefix": "RPC_CLIENTJOIN (25)","body": ["25"],"description": "RPC_CLIENTJOIN = 25"},
	"RPC_SCRSETPLAYERTEAM": {"scope": "lua","prefix": "RPC_SCRSETPLAYERTEAM (69)","body": ["69"],"description": "RPC_SCRSETPLAYERTEAM = 69"},
	"RPC_SPAWN": {"scope": "lua","prefix": "RPC_SPAWN (52)","body": ["52"],"description": "RPC_SPAWN = 52"},
	"RPC_SCRSETPLAYERNAME": {"scope": "lua","prefix": "RPC_SCRSETPLAYERNAME (11)","body": ["11"],"description": "RPC_SCRSETPLAYERNAME = 11"},
	"RPC_SCRWORLDVEHICLEREMOVE": {"scope": "lua","prefix": "RPC_SCRWORLDVEHICLEREMOVE (165)","body": ["165"],"description": "RPC_SCRWORLDVEHICLEREMOVE = 165"},
	"RPC_SCRSHOWPLAYERNAMETAGFORPLAYER": {"scope": "lua","prefix": "RPC_SCRSHOWPLAYERNAMETAGFORPLAYER (80)","body": ["80"],"description": "RPC_SCRSHOWPLAYERNAMETAGFORPLAYER = 80"},
	"RPC_SCRWORLDPLAYERDEATH": {"scope": "lua","prefix": "RPC_SCRWORLDPLAYERDEATH (166)","body": ["166"],"description": "RPC_SCRWORLDPLAYERDEATH = 166"},
	"RPC_SCRSERVERQUIT": {"scope": "lua","prefix": "RPC_SCRSERVERQUIT (138)","body": ["138"],"description": "RPC_SCRSERVERQUIT = 138"},
	"RPC_MAPMARKER": {"scope": "lua","prefix": "RPC_MAPMARKER (119)","body": ["119"],"description": "RPC_MAPMARKER = 119"},
	"RPC_SCRSETPLAYERPOSFINDZ": {"scope": "lua","prefix": "RPC_SCRSETPLAYERPOSFINDZ (13)","body": ["13"],"description": "RPC_SCRSETPLAYERPOSFINDZ = 13"},
	"PACKET_BULLET_SYNC": {"scope": "lua","prefix": "PACKET_BULLET_SYNC (206)","body": ["206"],"description": "PACKET_BULLET_SYNC = 206"},
	"RPC_SCRPLAYERSPECTATEVEHICLE": {"scope": "lua","prefix": "RPC_SCRPLAYERSPECTATEVEHICLE (127)","body": ["127"],"description": "RPC_SCRPLAYERSPECTATEVEHICLE = 127"},
	"RPC_SCRSETPLAYERARMEDWEAPON": {"scope": "lua","prefix": "RPC_SCRSETPLAYERARMEDWEAPON (67)","body": ["67"],"description": "RPC_SCRSETPLAYERARMEDWEAPON = 67"},
	"RPC_SCRCREATEPICKUP": {"scope": "lua","prefix": "RPC_SCRCREATEPICKUP (95)","body": ["95"],"description": "RPC_SCRCREATEPICKUP = 95"},
	"PACKET_WEAPONS_UPDATE": {"scope": "lua","prefix": "PACKET_WEAPONS_UPDATE (204)","body": ["204"],"description": "PACKET_WEAPONS_UPDATE = 204"},
	"PACKET_REMOTE_STATIC_DATA": {"scope": "lua","prefix": "PACKET_REMOTE_STATIC_DATA (46)","body": ["46"],"description": "PACKET_REMOTE_STATIC_DATA = 46"},
	"RPC_SCRSETVEHICLEPARAMSEX": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEPARAMSEX (24)","body": ["24"],"description": "RPC_SCRSETVEHICLEPARAMSEX = 24"},
	"PACKET_DISCONNECTION_NOTIFICATION": {"scope": "lua","prefix": "PACKET_DISCONNECTION_NOTIFICATION (32)","body": ["32"],"description": "PACKET_DISCONNECTION_NOTIFICATION = 32"},
	"PACKET_SECURED_CONNECTION_RESPONSE": {"scope": "lua","prefix": "PACKET_SECURED_CONNECTION_RESPONSE (15)","body": ["15"],"description": "PACKET_SECURED_CONNECTION_RESPONSE = 15"},
	"GAMESTATE_DISCONNECTED": {"scope": "lua","prefix": "GAMESTATE_DISCONNECTED (5)","body": ["5"],"description": "GAMESTATE_DISCONNECTED = 5"},
	"RPC_SCRSETNUMBERPLATE": {"scope": "lua","prefix": "RPC_SCRSETNUMBERPLATE (123)","body": ["123"],"description": "RPC_SCRSETNUMBERPLATE = 123"},
	"RPC_SCRSETPLAYERDRUNKLEVEL": {"scope": "lua","prefix": "RPC_SCRSETPLAYERDRUNKLEVEL (35)","body": ["35"],"description": "RPC_SCRSETPLAYERDRUNKLEVEL = 35"},
	"RPC_SCRCREATE3DTEXTLABEL": {"scope": "lua","prefix": "RPC_SCRCREATE3DTEXTLABEL (36)","body": ["36"],"description": "RPC_SCRCREATE3DTEXTLABEL = 36"},
	"GAMESTATE_RESTARTING": {"scope": "lua","prefix": "GAMESTATE_RESTARTING (4)","body": ["4"],"description": "GAMESTATE_RESTARTING = 4"},
	"RPC_SCRSETPLAYERSPECIALACTION": {"scope": "lua","prefix": "RPC_SCRSETPLAYERSPECIALACTION (88)","body": ["88"],"description": "RPC_SCRSETPLAYERSPECIALACTION = 88"},
	"GAMESTATE_CONNECTED": {"scope": "lua","prefix": "GAMESTATE_CONNECTED (3)","body": ["3"],"description": "GAMESTATE_CONNECTED = 3"},
	"GAMESTATE_AWAIT_JOIN": {"scope": "lua","prefix": "GAMESTATE_AWAIT_JOIN (2)","body": ["2"],"description": "GAMESTATE_AWAIT_JOIN = 2"},
	"PACKET_AIM_SYNC": {"scope": "lua","prefix": "PACKET_AIM_SYNC (203)","body": ["203"],"description": "PACKET_AIM_SYNC = 203"},
	"RPC_SCRRESETPLAYERWEAPONS": {"scope": "lua","prefix": "RPC_SCRRESETPLAYERWEAPONS (21)","body": ["21"],"description": "RPC_SCRRESETPLAYERWEAPONS = 21"},
	"RPC_SCRCHATBUBBLE": {"scope": "lua","prefix": "RPC_SCRCHATBUBBLE (59)","body": ["59"],"description": "RPC_SCRCHATBUBBLE = 59"},
	"RPC_SCRINITGAME": {"scope": "lua","prefix": "RPC_SCRINITGAME (139)","body": ["139"],"description": "RPC_SCRINITGAME = 139"},
	"RPC_SCRPLAYERSPECTATEPLAYER": {"scope": "lua","prefix": "RPC_SCRPLAYERSPECTATEPLAYER (126)","body": ["126"],"description": "RPC_SCRPLAYERSPECTATEPLAYER = 126"},
	"RPC_SCRTEXTDRAWHIDEFORPLAYER": {"scope": "lua","prefix": "RPC_SCRTEXTDRAWHIDEFORPLAYER (135)","body": ["135"],"description": "RPC_SCRTEXTDRAWHIDEFORPLAYER = 135"},
	"GAMESTATE_NONE": {"scope": "lua","prefix": "GAMESTATE_NONE (0)","body": ["0"],"description": "GAMESTATE_NONE = 0"},
	"RPC_SCRDEATHMESSAGE": {"scope": "lua","prefix": "RPC_SCRDEATHMESSAGE (55)","body": ["55"],"description": "RPC_SCRDEATHMESSAGE = 55"},
	"PACKET_SPECTATOR_SYNC": {"scope": "lua","prefix": "PACKET_SPECTATOR_SYNC (212)","body": ["212"],"description": "PACKET_SPECTATOR_SYNC = 212"},
	"RPC_SCRTOGGLEPLAYERCONTROLLABLE": {"scope": "lua","prefix": "RPC_SCRTOGGLEPLAYERCONTROLLABLE (15)","body": ["15"],"description": "RPC_SCRTOGGLEPLAYERCONTROLLABLE = 15"},
	"RPC_SCRTEXTDRAWSETSTRING": {"scope": "lua","prefix": "RPC_SCRTEXTDRAWSETSTRING (105)","body": ["105"],"description": "RPC_SCRTEXTDRAWSETSTRING = 105"},
	"RPC_CLICKPLAYER": {"scope": "lua","prefix": "RPC_CLICKPLAYER (23)","body": ["23"],"description": "RPC_CLICKPLAYER = 23"},
	"RPC_SCRSOMEUPDATE": {"scope": "lua","prefix": "RPC_SCRSOMEUPDATE (60)","body": ["60"],"description": "RPC_SCRSOMEUPDATE = 60"},
	"PACKET_PASSENGER_SYNC": {"scope": "lua","prefix": "PACKET_PASSENGER_SYNC (211)","body": ["211"],"description": "PACKET_PASSENGER_SYNC = 211"},
	"RPC_SCRSETPLAYERHEALTH": {"scope": "lua","prefix": "RPC_SCRSETPLAYERHEALTH (14)","body": ["14"],"description": "RPC_SCRSETPLAYERHEALTH = 14"},
	"RPC_SCRSETPLAYERSHOPNAME": {"scope": "lua","prefix": "RPC_SCRSETPLAYERSHOPNAME (33)","body": ["33"],"description": "RPC_SCRSETPLAYERSHOPNAME = 33"},
	"PACKET_NEW_INCOMING_CONNECTION": {"scope": "lua","prefix": "PACKET_NEW_INCOMING_CONNECTION (30)","body": ["30"],"description": "PACKET_NEW_INCOMING_CONNECTION = 30"},
	"RPC_MENUQUIT": {"scope": "lua","prefix": "RPC_MENUQUIT (140)","body": ["140"],"description": "RPC_MENUQUIT = 140"},
	"PACKET_TRAILER_SYNC": {"scope": "lua","prefix": "PACKET_TRAILER_SYNC (210)","body": ["210"],"description": "PACKET_TRAILER_SYNC = 210"},
	"RPC_SCRIPTCASH": {"scope": "lua","prefix": "RPC_SCRIPTCASH (31)","body": ["31"],"description": "RPC_SCRIPTCASH = 31"},
	"RPC_SCRLINKVEHICLETOINTERIOR": {"scope": "lua","prefix": "RPC_SCRLINKVEHICLETOINTERIOR (65)","body": ["65"],"description": "RPC_SCRLINKVEHICLETOINTERIOR = 65"},
	"PACKET_PING_OPEN_CONNECTIONS": {"scope": "lua","prefix": "PACKET_PING_OPEN_CONNECTIONS (8)","body": ["8"],"description": "PACKET_PING_OPEN_CONNECTIONS = 8"},
	"RPC_SCRPLAYSOUND": {"scope": "lua","prefix": "RPC_SCRPLAYSOUND (16)","body": ["16"],"description": "RPC_SCRPLAYSOUND = 16"},
	"RPC_MENUSELECT": {"scope": "lua","prefix": "RPC_MENUSELECT (132)","body": ["132"],"description": "RPC_MENUSELECT = 132"},
	"PACKET_UNOCCUPIED_SYNC": {"scope": "lua","prefix": "PACKET_UNOCCUPIED_SYNC (209)","body": ["209"],"description": "PACKET_UNOCCUPIED_SYNC = 209"},
	"PACKET_PLAYER_SYNC": {"scope": "lua","prefix": "PACKET_PLAYER_SYNC (207)","body": ["207"],"description": "PACKET_PLAYER_SYNC = 207"},
	"PACKET_STATS_UPDATE": {"scope": "lua","prefix": "PACKET_STATS_UPDATE (205)","body": ["205"],"description": "PACKET_STATS_UPDATE = 205"},
	"PACKET_SECURED_CONNECTION_CONFIRMATION": {"scope": "lua","prefix": "PACKET_SECURED_CONNECTION_CONFIRMATION (16)","body": ["16"],"description": "PACKET_SECURED_CONNECTION_CONFIRMATION = 16"},
	"RPC_SCRSETPLAYERAMMO": {"scope": "lua","prefix": "RPC_SCRSETPLAYERAMMO (145)","body": ["145"],"description": "RPC_SCRSETPLAYERAMMO = 145"},
	"PACKET_RCON_RESPONCE": {"scope": "lua","prefix": "PACKET_RCON_RESPONCE (202)","body": ["202"],"description": "PACKET_RCON_RESPONCE = 202"},
	"PACKET_RCON_COMMAND": {"scope": "lua","prefix": "PACKET_RCON_COMMAND (201)","body": ["201"],"description": "PACKET_RCON_COMMAND = 201"},
	"RPC_EXITVEHICLE": {"scope": "lua","prefix": "RPC_EXITVEHICLE (154)","body": ["154"],"description": "RPC_EXITVEHICLE = 154"},
	"PACKET_AUTH_KEY": {"scope": "lua","prefix": "PACKET_AUTH_KEY (12)","body": ["12"],"description": "PACKET_AUTH_KEY = 12"},
	"RPC_SRVNETSTATS": {"scope": "lua","prefix": "RPC_SRVNETSTATS (102)","body": ["102"],"description": "RPC_SRVNETSTATS = 102"},
	"PACKET_REMOTE_EXISTING_CONNECTION": {"scope": "lua","prefix": "PACKET_REMOTE_EXISTING_CONNECTION (45)","body": ["45"],"description": "PACKET_REMOTE_EXISTING_CONNECTION = 45"},
	"PACKET_REMOTE_CONNECTION_LOST": {"scope": "lua","prefix": "PACKET_REMOTE_CONNECTION_LOST (43)","body": ["43"],"description": "PACKET_REMOTE_CONNECTION_LOST = 43"},
	"RPC_SCRSTOPAUDIOSTREAM": {"scope": "lua","prefix": "RPC_SCRSTOPAUDIOSTREAM (42)","body": ["42"],"description": "RPC_SCRSTOPAUDIOSTREAM = 42"},
	"RPC_PICKEDUPPICKUP": {"scope": "lua","prefix": "RPC_PICKEDUPPICKUP (131)","body": ["131"],"description": "RPC_PICKEDUPPICKUP = 131"},
	"PACKET_REMOTE_NEW_INCOMING_CONNECTION": {"scope": "lua","prefix": "PACKET_REMOTE_NEW_INCOMING_CONNECTION (44)","body": ["44"],"description": "PACKET_REMOTE_NEW_INCOMING_CONNECTION = 44"},
	"PACKET_REMOTE_DISCONNECTION_NOTIFICATION": {"scope": "lua","prefix": "PACKET_REMOTE_DISCONNECTION_NOTIFICATION (42)","body": ["42"],"description": "PACKET_REMOTE_DISCONNECTION_NOTIFICATION = 42"},
	"PACKET_RECEIVED_STATIC_DATA": {"scope": "lua","prefix": "PACKET_RECEIVED_STATIC_DATA (41)","body": ["41"],"description": "PACKET_RECEIVED_STATIC_DATA = 41"},
	"RPC_CLICKTEXTDRAW": {"scope": "lua","prefix": "RPC_CLICKTEXTDRAW (83)","body": ["83"],"description": "RPC_CLICKTEXTDRAW = 83"},
	"PACKET_INITIALIZE_ENCRYPTION": {"scope": "lua","prefix": "PACKET_INITIALIZE_ENCRYPTION (35)","body": ["35"],"description": "PACKET_INITIALIZE_ENCRYPTION = 35"},
	"RPC_SCRINTERPOLATECAMERA": {"scope": "lua","prefix": "RPC_SCRINTERPOLATECAMERA (82)","body": ["82"],"description": "RPC_SCRINTERPOLATECAMERA = 82"},
	"RPC_SCRSERVERJOIN": {"scope": "lua","prefix": "RPC_SCRSERVERJOIN (137)","body": ["137"],"description": "RPC_SCRSERVERJOIN = 137"},
	"RPC_CHAT": {"scope": "lua","prefix": "RPC_CHAT (101)","body": ["101"],"description": "RPC_CHAT = 101"},
	"PACKET_CONNECTION_REQUEST_ACCEPTED": {"scope": "lua","prefix": "PACKET_CONNECTION_REQUEST_ACCEPTED (34)","body": ["34"],"description": "PACKET_CONNECTION_REQUEST_ACCEPTED = 34"},
	"PACKET_CONNECTION_LOST": {"scope": "lua","prefix": "PACKET_CONNECTION_LOST (33)","body": ["33"],"description": "PACKET_CONNECTION_LOST = 33"},
	"RPC_SCRSTOPOBJECT": {"scope": "lua","prefix": "RPC_SCRSTOPOBJECT (122)","body": ["122"],"description": "RPC_SCRSTOPOBJECT = 122"},
	"RPC_DEATH": {"scope": "lua","prefix": "RPC_DEATH (53)","body": ["53"],"description": "RPC_DEATH = 53"},
	"RPC_SCRSETOBJECTROT": {"scope": "lua","prefix": "RPC_SCRSETOBJECTROT (46)","body": ["46"],"description": "RPC_SCRSETOBJECTROT = 46"},
	"PACKET_RSA_PUBLIC_KEY_MISMATCH": {"scope": "lua","prefix": "PACKET_RSA_PUBLIC_KEY_MISMATCH (28)","body": ["28"],"description": "PACKET_RSA_PUBLIC_KEY_MISMATCH = 28"},
	"RPC_SCRFORCECLASSSELECTION": {"scope": "lua","prefix": "RPC_SCRFORCECLASSSELECTION (74)","body": ["74"],"description": "RPC_SCRFORCECLASSSELECTION = 74"},
	"RPC_SCRSETPLAYERCAMERAPOS": {"scope": "lua","prefix": "RPC_SCRSETPLAYERCAMERAPOS (157)","body": ["157"],"description": "RPC_SCRSETPLAYERCAMERAPOS = 157"},
	"PACKET_RPC_REPLY": {"scope": "lua","prefix": "PACKET_RPC_REPLY (21)","body": ["21"],"description": "PACKET_RPC_REPLY = 21"},
	"RPC_SCRDISABLERACECHECKPOINT": {"scope": "lua","prefix": "RPC_SCRDISABLERACECHECKPOINT (39)","body": ["39"],"description": "RPC_SCRDISABLERACECHECKPOINT = 39"},
	"RPC_SCRTOGGLECLOCK": {"scope": "lua","prefix": "RPC_SCRTOGGLECLOCK (30)","body": ["30"],"description": "RPC_SCRTOGGLECLOCK = 30"},
	"RPC_GIVETAKEDAMAGE": {"scope": "lua","prefix": "RPC_GIVETAKEDAMAGE (115)","body": ["115"],"description": "RPC_GIVETAKEDAMAGE = 115"},
	"RPC_SCRATTACHTRAILERTOVEHICLE": {"scope": "lua","prefix": "RPC_SCRATTACHTRAILERTOVEHICLE (148)","body": ["148"],"description": "RPC_SCRATTACHTRAILERTOVEHICLE = 148"},
	"RPC_WEAPONPICKUPDESTROY": {"scope": "lua","prefix": "RPC_WEAPONPICKUPDESTROY (97)","body": ["97"],"description": "RPC_WEAPONPICKUPDESTROY = 97"},
	"PACKET_OPEN_CONNECTION_REQUEST": {"scope": "lua","prefix": "PACKET_OPEN_CONNECTION_REQUEST (24)","body": ["24"],"description": "PACKET_OPEN_CONNECTION_REQUEST = 24"},
	"PACKET_RPC": {"scope": "lua","prefix": "PACKET_RPC (20)","body": ["20"],"description": "PACKET_RPC = 20"},
	"RPC_SCRSETPLAYERINTERIOR": {"scope": "lua","prefix": "RPC_SCRSETPLAYERINTERIOR (156)","body": ["156"],"description": "RPC_SCRSETPLAYERINTERIOR = 156"},
	"PACKET_SET_RANDOM_NUMBER_SEED": {"scope": "lua","prefix": "PACKET_SET_RANDOM_NUMBER_SEED (19)","body": ["19"],"description": "PACKET_SET_RANDOM_NUMBER_SEED = 19"},
	"PACKET_RPC_MAPPING": {"scope": "lua","prefix": "PACKET_RPC_MAPPING (17)","body": ["17"],"description": "PACKET_RPC_MAPPING = 17"},
	"RPC_SCRDISPLAYGAMETEXT": {"scope": "lua","prefix": "RPC_SCRDISPLAYGAMETEXT (73)","body": ["73"],"description": "RPC_SCRDISPLAYGAMETEXT = 73"},
	"PACKET_VEHICLE_SYNC": {"scope": "lua","prefix": "PACKET_VEHICLE_SYNC (200)","body": ["200"],"description": "PACKET_VEHICLE_SYNC = 200"},
	"RPC_SCRREMOVEPLAYERFROMVEHICLE": {"scope": "lua","prefix": "RPC_SCRREMOVEPLAYERFROMVEHICLE (71)","body": ["71"],"description": "RPC_SCRREMOVEPLAYERFROMVEHICLE = 71"},
	"RPC_CLIENTCHECK": {"scope": "lua","prefix": "RPC_CLIENTCHECK (103)","body": ["103"],"description": "RPC_CLIENTCHECK = 103"},
	"PACKET_CONNECTION_REQUEST": {"scope": "lua","prefix": "PACKET_CONNECTION_REQUEST (11)","body": ["11"],"description": "PACKET_CONNECTION_REQUEST = 11"},
	"RPC_SCRSETPLAYERARMOUR": {"scope": "lua","prefix": "RPC_SCRSETPLAYERARMOUR (66)","body": ["66"],"description": "RPC_SCRSETPLAYERARMOUR = 66"},
	"RPC_SCRATTACHCAMERATOOBJECT": {"scope": "lua","prefix": "RPC_SCRATTACHCAMERATOOBJECT (81)","body": ["81"],"description": "RPC_SCRATTACHCAMERATOOBJECT = 81"},
	"PACKET_CONNECTED_PONG": {"scope": "lua","prefix": "PACKET_CONNECTED_PONG (9)","body": ["9"],"description": "PACKET_CONNECTED_PONG = 9"},
	"PACKET_PING": {"scope": "lua","prefix": "PACKET_PING (7)","body": ["7"],"description": "PACKET_PING = 7"},
	"PACKET_INTERNAL_PING": {"scope": "lua","prefix": "PACKET_INTERNAL_PING (6)","body": ["6"],"description": "PACKET_INTERNAL_PING = 6"},
	"RPC_SCRWORLDVEHICLEADD": {"scope": "lua","prefix": "RPC_SCRWORLDVEHICLEADD (164)","body": ["164"],"description": "RPC_SCRWORLDVEHICLEADD = 164"},
	"RPC_SCRSETVEHICLEZANGLE": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEZANGLE (160)","body": ["160"],"description": "RPC_SCRSETVEHICLEZANGLE = 160"},
	"RPC_SCRENABLESTUNTBONUSFORPLAYER": {"scope": "lua","prefix": "RPC_SCRENABLESTUNTBONUSFORPLAYER (104)","body": ["104"],"description": "RPC_SCRENABLESTUNTBONUSFORPLAYER = 104"},
	"RPC_SCRSETPLAYERCAMERALOOKAT": {"scope": "lua","prefix": "RPC_SCRSETPLAYERCAMERALOOKAT (158)","body": ["158"],"description": "RPC_SCRSETPLAYERCAMERALOOKAT = 158"},
	"RPC_SCRGANGZONESTOPFLASH": {"scope": "lua","prefix": "RPC_SCRGANGZONESTOPFLASH (85)","body": ["85"],"description": "RPC_SCRGANGZONESTOPFLASH = 85"},
	"RPC_ENTERVEHICLE": {"scope": "lua","prefix": "RPC_ENTERVEHICLE (26)","body": ["26"],"description": "RPC_ENTERVEHICLE = 26"},
	"RPC_SCRCANCELEDIT": {"scope": "lua","prefix": "RPC_SCRCANCELEDIT (28)","body": ["28"],"description": "RPC_SCRCANCELEDIT = 28"},
	"RPC_SCRSETPLAYERSKIN": {"scope": "lua","prefix": "RPC_SCRSETPLAYERSKIN (153)","body": ["153"],"description": "RPC_SCRSETPLAYERSKIN = 153"},
	"RPC_SCRGANGZONEDESTROY": {"scope": "lua","prefix": "RPC_SCRGANGZONEDESTROY (120)","body": ["120"],"description": "RPC_SCRGANGZONEDESTROY = 120"},
	"RPC_ENTEREDITOBJECT": {"scope": "lua","prefix": "RPC_ENTEREDITOBJECT (27)","body": ["27"],"description": "RPC_ENTEREDITOBJECT = 27"},
	"RPC_SCRSETPLAYERFIGHTINGSTYLE": {"scope": "lua","prefix": "RPC_SCRSETPLAYERFIGHTINGSTYLE (89)","body": ["89"],"description": "RPC_SCRSETPLAYERFIGHTINGSTYLE = 89"},
	"RPC_SCRDETACHTRAILERFROMVEHICLE": {"scope": "lua","prefix": "RPC_SCRDETACHTRAILERFROMVEHICLE (149)","body": ["149"],"description": "RPC_SCRDETACHTRAILERFROMVEHICLE = 149"},
	"RPC_SCRSHOWMENU": {"scope": "lua","prefix": "RPC_SCRSHOWMENU (77)","body": ["77"],"description": "RPC_SCRSHOWMENU = 77"},
	"RPC_SCRDESTROYPICKUP": {"scope": "lua","prefix": "RPC_SCRDESTROYPICKUP (63)","body": ["63"],"description": "RPC_SCRDESTROYPICKUP = 63"},
	"RPC_SCRSETPLAYERMAPICON": {"scope": "lua","prefix": "RPC_SCRSETPLAYERMAPICON (56)","body": ["56"],"description": "RPC_SCRSETPLAYERMAPICON = 56"},
	"RPC_SCRCREATEEXPLOSION": {"scope": "lua","prefix": "RPC_SCRCREATEEXPLOSION (79)","body": ["79"],"description": "RPC_SCRCREATEEXPLOSION = 79"},
	"PACKET_OPEN_CONNECTION_REPLY": {"scope": "lua","prefix": "PACKET_OPEN_CONNECTION_REPLY (25)","body": ["25"],"description": "PACKET_OPEN_CONNECTION_REPLY = 25"},
	"RPC_SCRSETVEHICLEHEALTH": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEHEALTH (147)","body": ["147"],"description": "RPC_SCRSETVEHICLEHEALTH = 147"},
	"RPC_SCRSETGRAVITY": {"scope": "lua","prefix": "RPC_SCRSETGRAVITY (146)","body": ["146"],"description": "RPC_SCRSETGRAVITY = 146"},
	"RPC_SCRREMOVEPLAYERMAPICON": {"scope": "lua","prefix": "RPC_SCRREMOVEPLAYERMAPICON (144)","body": ["144"],"description": "RPC_SCRREMOVEPLAYERMAPICON = 144"},
	"GAMESTATE_WAIT_CONNECT": {"scope": "lua","prefix": "GAMESTATE_WAIT_CONNECT (1)","body": ["1"],"description": "GAMESTATE_WAIT_CONNECT = 1"},
	"RPC_SCRDISABLECHECKPOINT": {"scope": "lua","prefix": "RPC_SCRDISABLECHECKPOINT (37)","body": ["37"],"description": "RPC_SCRDISABLECHECKPOINT = 37"},
	"PACKET_PONG": {"scope": "lua","prefix": "PACKET_PONG (39)","body": ["39"],"description": "PACKET_PONG = 39"},
	"RPC_SCRPLAYCRIMEREPORT": {"scope": "lua","prefix": "RPC_SCRPLAYCRIMEREPORT (112)","body": ["112"],"description": "RPC_SCRPLAYCRIMEREPORT = 112"},
	"RPC_SCRGANGZONECREATE": {"scope": "lua","prefix": "RPC_SCRGANGZONECREATE (108)","body": ["108"],"description": "RPC_SCRGANGZONECREATE = 108"},
	"RPC_SCRSETPLAYERCOLOR": {"scope": "lua","prefix": "RPC_SCRSETPLAYERCOLOR (72)","body": ["72"],"description": "RPC_SCRSETPLAYERCOLOR = 72"},
	"RPC_SCRSETCHECKPOINT": {"scope": "lua","prefix": "RPC_SCRSETCHECKPOINT (107)","body": ["107"],"description": "RPC_SCRSETCHECKPOINT = 107"},
	"RPC_SCRAPPLYANIMATION": {"scope": "lua","prefix": "RPC_SCRAPPLYANIMATION (86)","body": ["86"],"description": "RPC_SCRAPPLYANIMATION = 86"},
	"RPC_SCRSETVEHICLEPOS": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEPOS (159)","body": ["159"],"description": "RPC_SCRSETVEHICLEPOS = 159"},
	"RPC_SCRSETVEHICLEVELOCITY": {"scope": "lua","prefix": "RPC_SCRSETVEHICLEVELOCITY (91)","body": ["91"],"description": "RPC_SCRSETVEHICLEVELOCITY = 91"},
	"RPC_SCRMOVEOBJECT": {"scope": "lua","prefix": "RPC_SCRMOVEOBJECT (99)","body": ["99"],"description": "RPC_SCRMOVEOBJECT = 99"},
	"RPC_UPDATESCORESPINGSIPS": {"scope": "lua","prefix": "RPC_UPDATESCORESPINGSIPS (155)","body": ["155"],"description": "RPC_UPDATESCORESPINGSIPS = 155"},
	"RPC_SCRSETWORLDTIME": {"scope": "lua","prefix": "RPC_SCRSETWORLDTIME (94)","body": ["94"],"description": "RPC_SCRSETWORLDTIME = 94"},
	"RPC_SCRSHOWDIALOG": {"scope": "lua","prefix": "RPC_SCRSHOWDIALOG (61)","body": ["61"],"description": "RPC_SCRSHOWDIALOG = 61"},
	"RPC_SCRRESETPLAYERMONEY": {"scope": "lua","prefix": "RPC_SCRRESETPLAYERMONEY (20)","body": ["20"],"description": "RPC_SCRRESETPLAYERMONEY = 20"},
	"RPC_SCRCLIENTMESSAGE": {"scope": "lua","prefix": "RPC_SCRCLIENTMESSAGE (93)","body": ["93"],"description": "RPC_SCRCLIENTMESSAGE = 93"},
	"RPC_SCRSETPLAYERVELOCITY": {"scope": "lua","prefix": "RPC_SCRSETPLAYERVELOCITY (90)","body": ["90"],"description": "RPC_SCRSETPLAYERVELOCITY = 90"},
	"RPC_SCRSETOBJECTMATERIAL": {"scope": "lua","prefix": "RPC_SCRSETOBJECTMATERIAL (84)","body": ["84"],"description": "RPC_SCRSETOBJECTMATERIAL = 84"},
	"RPC_SCRHIDEMENU": {"scope": "lua","prefix": "RPC_SCRHIDEMENU (78)","body": ["78"],"description": "RPC_SCRHIDEMENU = 78"},
	"RPC_SCRSETWEATHER": {"scope": "lua","prefix": "RPC_SCRSETWEATHER (152)","body": ["152"],"description": "RPC_SCRSETWEATHER = 152"},
	"RPC_SCRINITMENU": {"scope": "lua","prefix": "RPC_SCRINITMENU (76)","body": ["76"],"description": "RPC_SCRINITMENU = 76"},
	"RPC_SCRATTACHOBJECTTOPLAYER": {"scope": "lua","prefix": "RPC_SCRATTACHOBJECTTOPLAYER (75)","body": ["75"],"description": "RPC_SCRATTACHOBJECTTOPLAYER = 75"},
	"RPC_REQUESTCLASS": {"scope": "lua","prefix": "RPC_REQUESTCLASS (128)","body": ["128"],"description": "RPC_REQUESTCLASS = 128"},
	"RPC_SCRTOGGLEPLAYERSPECTATING": {"scope": "lua","prefix": "RPC_SCRTOGGLEPLAYERSPECTATING (124)","body": ["124"],"description": "RPC_SCRTOGGLEPLAYERSPECTATING = 124"},
	"RPC_SCRREMOVEVEHICLECOMPONENT": {"scope": "lua","prefix": "RPC_SCRREMOVEVEHICLECOMPONENT (57)","body": ["57"],"description": "RPC_SCRREMOVEVEHICLECOMPONENT = 57"},
	"RPC_SCRSETRACECHECKPOINT": {"scope": "lua","prefix": "RPC_SCRSETRACECHECKPOINT (38)","body": ["38"],"description": "RPC_SCRSETRACECHECKPOINT = 38"},
	"RPC_SCRSETOBJECTPOS": {"scope": "lua","prefix": "RPC_SCRSETOBJECTPOS (45)","body": ["45"],"description": "RPC_SCRSETOBJECTPOS = 45"},
	"RPC_SCMEVENT": {"scope": "lua","prefix": "RPC_SCMEVENT (96)","body": ["96"],"description": "RPC_SCMEVENT = 96"},
	"RPC_EDITOBJECT": {"scope": "lua","prefix": "RPC_EDITOBJECT (117)","body": ["117"],"description": "RPC_EDITOBJECT = 117"},
	"PACKET_CONNECTION_COOKIE": {"scope": "lua","prefix": "PACKET_CONNECTION_COOKIE (26)","body": ["26"],"description": "PACKET_CONNECTION_COOKIE = 26"},
	"RPC_SCRGIVEPLAYERWEAPON": {"scope": "lua","prefix": "RPC_SCRGIVEPLAYERWEAPON (22)","body": ["22"],"description": "RPC_SCRGIVEPLAYERWEAPON = 22"},
	"RPC_SCRSETPLAYERPOS": {"scope": "lua","prefix": "RPC_SCRSETPLAYERPOS (12)","body": ["12"],"description": "RPC_SCRSETPLAYERPOS = 12"},
	"RPC_DAMAGEVEHICLE": {"scope": "lua","prefix": "RPC_DAMAGEVEHICLE (106)","body": ["106"],"description": "RPC_DAMAGEVEHICLE = 106"},
	"RPC_VEHICLEDESTROYED": {"scope": "lua","prefix": "RPC_VEHICLEDESTROYED (136)","body": ["136"],"description": "RPC_VEHICLEDESTROYED = 136"},
	"RPC_SCRSETSPAWNINFO": {"scope": "lua","prefix": "RPC_SCRSETSPAWNINFO (68)","body": ["68"],"description": "RPC_SCRSETSPAWNINFO = 68"},
	"RPC_DIALOGRESPONSE": {"scope": "lua","prefix": "RPC_DIALOGRESPONSE (62)","body": ["62"],"description": "RPC_DIALOGRESPONSE = 62"},
	"DIALOG_STYLE_LIST": {"scope": "lua","prefix": "DIALOG_STYLE_LIST (2)","body": ["2"],"description": "DIALOG_STYLE_LIST = 2"},
	"DIALOG_STYLE_TABLIST": {"scope": "lua","prefix": "DIALOG_STYLE_TABLIST (4)","body": ["4"],"description": "DIALOG_STYLE_TABLIST = 4"},
	"DIALOG_STYLE_MSGBOX": {"scope": "lua","prefix": "DIALOG_STYLE_MSGBOX (0)","body": ["0"],"description": "DIALOG_STYLE_MSGBOX = 0"},
	"DIALOG_STYLE_PASSWORD": {"scope": "lua","prefix": "DIALOG_STYLE_PASSWORD (3)","body": ["3"],"description": "DIALOG_STYLE_PASSWORD = 3"},
	"DIALOG_STYLE_INPUT": {"scope": "lua","prefix": "DIALOG_STYLE_INPUT (1)","body": ["1"],"description": "DIALOG_STYLE_INPUT = 1"},
	"DIALOG_STYLE_TABLIST_HEADERS": {"scope": "lua","prefix": "DIALOG_STYLE_TABLIST_HEADERS (5)","body": ["5"],"description": "DIALOG_STYLE_TABLIST_HEADERS = 5"},	
	// EVENTS
	"onD3DDeviceLost": {
		"scope": "lua",
		"prefix": "onD3DDeviceLost",
		"body": [
			"function onD3DDeviceLost()",
			"\t$0",
			"end"
		],
		"description": "onD3DDeviceLost"
	},
	
	"onD3DDeviceReset": {
		"scope": "lua",
		"prefix": "onD3DDeviceReset",
		"body": [
			"function onD3DDeviceReset()",
			"\t$0",
			"end"
		],
		"description": "onD3DDeviceReset"
	},
	
	"onD3DPresent": {
		"scope": "lua",
		"prefix": "onD3DPresent",
		"body": [
			"function onD3DPresent()",
			"\t$0",
			"end"
		],
		"description": "onD3DPresent"
	},

	"sampRegisterChatCommand || Зарегестрировать чат-команду": {
		"scope": "lua",
		"prefix": "sampRegisterChatCommand || Зарегестрировать чат-команду",
		"body": [
			"sampRegisterChatCommand('$0', function(arg)",
    		"    $1",
    		"end)"
		],
		"description": "Зарегестрировать чат-команду"
	},
	// TEMPLATES
	
	"Функция main": {
		"scope": "lua",
		"prefix": "/main",
		"body": [
			"function main()",
			"    while not isSampAvailable() do wait(0) end",
			"\t\t$0",
			"    while true do",
			"        wait(0)",
			"\t\t$1",
			"    end",
			"end",
		],
		"description": "Создает функцию main"
	},
	
	"lib.requests": {
		"scope": "lua",
		"prefix": "lib.requests",
		"body": ["local requests = require('requests')"],
		"description": "lib.requests"
	},
	"lib.mimgui": {
		"scope": "lua",
		"prefix": "lib.mimgui;",
		"body": ["local imgui = require('mimgui')"],
		"description": "lib.mimgui"
	},
	"lib.memory": {
		"scope": "lua",
		"prefix": "lib.memory",
		"body": ["local memory = require('memory')"],
		"description": "lib.memory"
	},
	"lib.ffi": {
		"scope": "lua",
		"prefix": "lib.ffi",
		"body": ["local ffi = require('ffi')"],
		"description": "lib.ffi"
	},
	"ffi.string": {
		"scope": "lua",
		"prefix": "ffi.string",
		"body": ["ffi.string"],
		"description": "ffi.string"
	},
	"ffi.sizeof": {
		"scope": "lua",
		"prefix": "ffi.sizeof",
		"body": ["ffi.sizeof"],
		"description": "ffi.sizeof"
	},
	"for line": {
		"scope": "lua",
		"prefix": "for line",
		"body": [
		"for line in ${0:text}:gmatch('[^\\n]+') do",
		"    ",
		"end",
		],
		"description": "for line"
	},

	"addEventHandler || Добавить обработчик событий": {
		"scope": "lua",
		"prefix": "addEventHandler",
		"body": [
			"addEventHandler('${0:EventName}', function(${1:arg})",
			"    $0",
			"end)"
		],
		"description": "Добавить обработчик событий"
	},
	"Функция для работы с JSON": {
		"scope": "lua",
		"prefix": "/json",
		"body": [
			"function json(filePath)",
			"    local class, filePath = {}, getWorkingDirectory()..'\\config\\'..(filePath:find('(.+).json') and filePath or filePath..'.json')",
			"    if not doesDirectoryExist(getWorkingDirectory()..'\\config') then createDirectory(getWorkingDirectory()..'\\config') end",
			"    function class:Save(tbl)",
			"        if tbl then",
			"            local F = io.open(filePath, 'w')",
			"            F:write(encodeJson(tbl) or {})",
			"            F:close()",
			"            return true, 'ok'",
			"        end",
			"        return false, 'table = nil'",
			"    end",
			"    function class:Load(defaultTable)",
			"        if not doesFileExist(filePath) then class:Save(defaultTable or {}) end",
			"        local F = io.open(filePath, 'r+')",
			"        local TABLE = decodeJson(F:read() or {})",
			"        F:close()",
			"        for def_k, def_v in next, defaultTable do if TABLE[def_k] == nil then TABLE[def_k] = def_v end end",
			"        return TABLE",
			"    end",
			"    return class",
			"end"
		],
		"description": "Функция для работы с JSON"
	},

	"onExitScript || выполняется в скрипте перед его нормальным завершением": {
		"scope": "lua",
		"prefix": "onExitScript",
		"body": [
			"function onExitScript(quitGame)",
			"    $0",
			"end"
		],
		"description": "выполняется в скрипте перед его нормальным завершением"
	},
	"onScriptMessage || вызывается когда любой скрипт добавляет новое сообщение в лог": {
		"scope": "lua",
		"prefix": "onScriptMessage",
		"body": [
			"function onScriptMessage(msg, scr) ",
			"    $0",
			"end"
		],
		"description": "вызывается когда любой скрипт добавляет новое сообщение в лог"
	},
	"onSystemMessage || вызывается когда MoonLoader добавляет новое сообщение в лог": {
		"scope": "lua",
		"prefix": "onSystemMessage",
		"body": [
			"function onSystemMessage(msg, type, scr) ",
			"    $0",
			"end"
		],
		"description": "вызывается когда MoonLoader добавляет новое сообщение в лог"
	},
	"onQuitGame || выполняется перед выходом из игры": {
		"scope": "lua",
		"prefix": "onQuitGame",
		"body": [
			"function onQuitGame() ",
			"    $0",
			"end"
		],
		"description": "выполняется перед выходом из игры"
	},
	"onSystemInitialized || выполняется после загрузки всех скриптов, но перед входом в основной цикл": {
		"scope": "lua",
		"prefix": "onSystemInitialized",
		"body": [
			"function onSystemInitialized() ",
			"    $0",
			"end"
		],
		"description": "выполняется после загрузки всех скриптов, но перед входом в основной цикл"
	},
	"onScriptLoad || выполняется при загрузке нового скрипта": {
		"scope": "lua",
		"prefix": "onScriptLoad",
		"body": [
			"function onScriptLoad(scr) ",
			"    $0",
			"end"
		],
		"description": "выполняется при загрузке нового скрипта"
	},
	"onScriptTerminate || вызывается перед выгрузкой любого скрипта. выполняется раньше, чем 'onExitScript'": {
		"scope": "lua",
		"prefix": "onScriptTerminate",
		"body": [
			"function onScriptTerminate(scr, quitGame) ",
			"    $0",
			"end"
		],
		"description": "вызывается перед выгрузкой любого скрипта. выполняется раньше, чем 'onExitScript'"
	},
	"onReceiveRpc || получение RPC": {
		"scope": "lua",
		"prefix": "onReceiveRpc",
		"body": [
			"function onReceiveRpc(id, bs) ",
			"    $0",
			"end"
		],
		"description": "получение RPC"
	},
	"onReceivePacket || получение пакета": {
		"scope": "lua",
		"prefix": "onReceivePacket",
		"body": [
			"function onReceivePacket(id, bs) ",
			"    $0",
			"end"
		],
		"description": "получение пакета"
	},
	"onSendRpc || отправка RPC": {
		"scope": "lua",
		"prefix": "onSendRpc",
		"body": [
			"function onSendRpc(id, bs, priority, reliability, orderingChannel, shiftTs) ",
			"    $0",
			"end"
		],
		"description": "отправка RPC"
	},
	"onSendPacket || отправка пакета": {
		"scope": "lua",
		"prefix": "onSendPacket",
		"body": [
			"function onSendPacket(id, bs, priority, reliability, orderingChannel) ",
			"    $0",
			"end"
		],
		"description": "отправка пакета"
	},
	
	"imgui.OutlineText || (custom) текст с обводкой": {
		"scope": "lua",
		"prefix": "imgui.OutlineText",
		"body": [
			"function imgui.OutlineText(text, outlineSize, textColor, outlineColor)",
			"    local outlineSize = outlineSize or 1",
			"    local c = imgui.GetCursorPos()",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x - outlineSize, c.y)) -- left",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x + outlineSize, c.y)) -- right",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x, c.y - outlineSize)) -- bottom",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x, c.y + outlineSize)) -- upper",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x - outlineSize, c.y + outlineSize)) -- upper-left",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x + outlineSize, c.y + outlineSize)) -- upper-right",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x - outlineSize, c.y - outlineSize)) -- bottom-left",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(imgui.ImVec2(c.x + outlineSize, c.y - outlineSize)) -- bottom-right",
			"    imgui.TextColored(outlineColor or imgui.ImVec4(0, 0, 0, 0.3), text)",
			"    imgui.SetCursorPos(c)",
			"    imgui.TextColored(textColor or imgui.ImVec4(1, 1, 1, 1), text)",
			"end"
		],
		"description": "текст с обводкой"
	},

	"Шаблон mimgui окна": {
	    "scope": "lua",
	    "prefix": "/mimgui || Шаблон mimgui окна",
	    "body": [
	        "local imgui = require 'mimgui'",
	        "local encoding = require 'encoding'",
	        "encoding.default = 'CP1251'",
	        "u8 = encoding.UTF8",
	        "",
	        "local renderWindow = imgui.new.bool(true)",
	        "",
	        "imgui.OnInitialize(function()",
	        "    imgui.GetIO().IniFilename = nil",
	        "end)",
	        "",
	        "local newFrame = imgui.OnFrame(",
	        "    function() return renderWindow[0] end,",
	        "    function(player)",
	        "        local resX, resY = getScreenResolution()",
	        "        local sizeX, sizeY = 300, 300",
	        "        imgui.SetNextWindowPos(imgui.ImVec2(resX / 2, resY / 2), imgui.Cond.FirstUseEver, imgui.ImVec2(0.5, 0.5))",
	        "        imgui.SetNextWindowSize(imgui.ImVec2(sizeX, sizeY), imgui.Cond.FirstUseEver)",
	        "        if imgui.Begin('Main Window', renderWindow)",
	        "            $0     ",
	        "            imgui.End()",
	        "        end",
	        "    end",
	        ")",
	        "",
	        "function main()",
	        "    while not isSampAvailable() do wait(0) end",
	        "    sampRegisterChatCommand('mimgui', function()",
	        "        renderWindow[0] = not renderWindow[0]",
	        "    end)",
	        "    wait(-1)",
	        "end",
	    ],
	    "description": "Шаблон mimgui окна"
	},
	"Заготовка inicfg": {
	    "scope": "lua",
	    "prefix": "/inicfg || Заготовка inicfg",
	    "body": [
	        "local inicfg = require 'inicfg'",
	        "local directIni = '${0:filename}.ini'",
	        "local ini = inicfg.load(inicfg.load({",
	        "    main = {",
	        "        enabled = true",
	        "    },",
	        "}, directIni))",
	        "inicfg.save(ini, directIni)",
	        "",
	        "local SaveCfg = function()",
	        "    ini.main.enabled = false",
	        "    inicfg.save(ini, directIni)",
	        "end"
	    ],
	    "description": "Заготовка inicfg"
	},
	"Добавить сообщение в чат": {
	    "scope": "lua",
	    "prefix": "Добавить сообщение в чат",
	    "body": [
			"sampAddChatMessage(${0:text}, -1)"
		],
	    "description": "Добавить сообщение в чат"
	},
	"imgui.CenterText function": {
	    "scope": "lua",
	    "prefix": "/imgui.CenterText",
	    "body": [
	        "function imgui.CenterText(text)",
	        "    imgui.SetCursorPosX(imgui.GetWindowSize().x / 2 - imgui.CalcTextSize(text).x / 2)",
	        "    imgui.Text(text)",
	        "end"
	    ],
	    "description": "imgui.CenterText function"
	},
	"ARGB functions": {
	    "scope": "lua",
	    "prefix": "/argb",
	    "body": [
	        "function join_argb(a, r, g, b)",
	        "    local argb = b  -- b",
	        "    argb = bit.bor(argb, bit.lshift(g, 8))  -- g",
	        "    argb = bit.bor(argb, bit.lshift(r, 16)) -- r",
	        "    argb = bit.bor(argb, bit.lshift(a, 24)) -- a",
	        "    return argb",
	        "end",
	        "",
	        "function explode_argb(argb)",
	        "    local a = bit.band(bit.rshift(argb, 24), 0xFF)",
	        "    local r = bit.band(bit.rshift(argb, 16), 0xFF)",
	        "    local g = bit.band(bit.rshift(argb, 8), 0xFF)",
	        "    local b = bit.band(argb, 0xFF)",
	        "    return a, r, g, b",
	        "end",
	        "",
	        "function argb_to_rgba(argb)",
	        "    local a, r, g, b = explode_argb(argb)",
	        "    return join_argb(r, g, b, a)",
	        "end"
	    ],
	    "description": "ARGB functions"
	},

	// NN
	"lib.moonloader": {
		"scope": "lua",
		"prefix": "require('lib.moonloader')",
		"body": ["require('lib.moonloader')"],
		"description": "require('lib.moonloader')"
	},
	"PLAYER_PED || Хендл вашего персонажа": {
		"scope": "lua",
		"prefix": "PLAYER_PED || Хендл вашего персонажа",
		"body": ["PLAYER_PED"],
		"description": "Хендл вашего персонажа"
	},
	"myid() || Айди вашего персонажа": {
		"scope": "lua",
		"prefix": "myid() || Айди вашего персонажа",
		"body": ["select(2, sampGetPlayerIdByCharHandle(PLAYER_PED))"],
		"description": "Айди вашего персонажа"
	},

	//ThisScript
	"имя скрипта, заданное функцией 'script_name'. Если имя не задано используется название файла": {
		"scope": "lua",
		"prefix": "thisScript().name | имя скрипта, заданное функцией 'script_name'. Если имя не задано используется название файла",
		"body": [
			"thisScript().name"
		],
		"description": "thisScript().name\n\nимя скрипта, заданное функцией 'script_name'. Если имя не задано используется название файла"
	},
	"описание скрипта, указанное функцией 'script_description'. Пустая строка, если не указано": {
		"scope": "lua",
		"prefix": "thisScript().description | описание скрипта, указанное функцией 'script_description'. Пустая строка, если не указано",
		"body": [
			"thisScript().description"
		],
		"description": "thisScript().description\n\nописание скрипта, указанное функцией 'script_description'. Пустая строка, если не указано"
	},
	"числовая версия скрипта. 0, если не указано": {
		"scope": "lua",
		"prefix": "thisScript().version_num | числовая версия скрипта. 0, если не указано",
		"body": [
			"thisScript().version_num"
		],
		"description": "thisScript().version_num\n\nчисловая версия скрипта. 0, если не указано"
	},
	"текстовая версия скрипта. Будет использована числовая версия, если не задано": {
		"scope": "lua",
		"prefix": "thisScript().version | текстовая версия скрипта. Будет использована числовая версия, если не задано",
		"body": [
			"thisScript().version"
		],
		"description": "thisScript().version\n\nтекстовая версия скрипта. Будет использована числовая версия, если не задано"
	},
	"список авторов скрипта. Пустой, если не указаны": {
		"scope": "lua",
		"prefix": "thisScript().authors | список авторов скрипта. Пустой, если не указаны",
		"body": [
			"thisScript().authors"
		],
		"description": "thisScript().authors\n\nсписок авторов скрипта. Пустой, если не указаны"
	},
	"список зависимостей скрипта. Пустой, если не указаны": {
		"scope": "lua",
		"prefix": "thisScript().dependencies | список зависимостей скрипта. Пустой, если не указаны",
		"body": [
			"thisScript().dependencies"
		],
		"description": "thisScript().dependencies\n\nсписок зависимостей скрипта. Пустой, если не указаны"
	},
	"полный путь к файлу скрипта": {
		"scope": "lua",
		"prefix": "thisScript().path | полный путь к файлу скрипта",
		"body": [
			"thisScript().path"
		],
		"description": "thisScript().path\n\nполный путь к файлу скрипта"
	},
	"название файла скрипта, включая расширение": {
		"scope": "lua",
		"prefix": "thisScript().filename | название файла скрипта, включая расширение",
		"body": [
			"thisScript().filename"
		],
		"description": "thisScript().filename\n\nназвание файла скрипта, включая расширение"
	},
	"полный путь директории, из который был загружен скрипт": {
		"scope": "lua",
		"prefix": "thisScript().directory | полный путь директории, из который был загружен скрипт",
		"body": [
			"thisScript().directory"
		],
		"description": "thisScript().directory\n\nполный путь директории, из который был загружен скрипт"
	},
	"статус активности потока (приостановлен/активен)": {
		"scope": "lua",
		"prefix": "thisScript().frozen | статус активности потока (приостановлен/активен)",
		"body": [
			"thisScript().frozen"
		],
		"description": "thisScript().frozen\n\nстатус активности потока (приостановлен/активен)"
	},
	"статус существования потока. Есть случаи, когда поток уже завершён, а lua-объект скрипта ещё существует. Свойство dead проверяет объект скрипта на валидность": {
		"scope": "lua",
		"prefix": "thisScript().dead | статус существования потока. Есть случаи, когда поток уже завершён, а lua-объект скрипта ещё существует. Свойство dead проверяет объект скрипта на валидность",
		"body": [
			"thisScript().dead"
		],
		"description": "thisScript().dead\n\nстатус существования потока. Есть случаи, когда поток уже завершён, а lua-объект скрипта ещё существует. Свойство dead проверяет объект скрипта на валидность"
	},
	"экспортируемые скриптом значения. Можно получить и функцией import": {
		"scope": "lua",
		"prefix": "thisScript().exports | экспортируемые скриптом значения. Можно получить и функцией import",
		"body": [
			"thisScript().exports"
		],
		"description": "thisScript().exports\n\nэкспортируемые скриптом значения. Можно получить и функцией import"
	},
	"уникальный идентификатор скрипта": {
		"scope": "lua",
		"prefix": "thisScript().id | уникальный идентификатор скрипта",
		"body": [
			"thisScript().id"
		],
		"description": "thisScript().id\n\nуникальный идентификатор скрипта"
	},
	"web-адрес скрипта": {
		"scope": "lua",
		"prefix": "thisScript().url | web-адрес скрипта",
		"body": [
			"thisScript().url"
		],
		"description": "thisScript().url\n\nweb-адрес скрипта"
	},
	"список свойств, заданных директивой script_properties": {
		"scope": "lua",
		"prefix": "thisScript().properties | список свойств, заданных директивой script_properties",
		"body": [
			"thisScript().properties"
		],
		"description": "thisScript().properties\n\nсписок свойств, заданных директивой script_properties"
	},
	"приостанавливает поток скрипта": {
		"scope": "lua",
		"prefix": "thisScript():pause() | приостанавливает поток скрипта",
		"body": [
			"thisScript():pause()"
		],
		"description": "thisScript():pause()\n\nприостанавливает поток скрипта"
	},
	"снимает остановленный поток с паузы": {
		"scope": "lua",
		"prefix": "thisScript():resume() | снимает остановленный поток с паузы",
		"body": [
			"thisScript():resume()"
		],
		"description": "thisScript():resume()\n\nснимает остановленный поток с паузы"
	},
	"выгружает скрипт": {
		"scope": "lua",
		"prefix": "thisScript():unload() | выгружает скрипт",
		"body": [
			"thisScript():unload()"
		],
		"description": "thisScript():unload()\n\nвыгружает скрипт"
	},
	"перезагружает скрипт": {
		"scope": "lua",
		"prefix": "thisScript():reload() | перезагружает скрипт",
		"body": [
			"thisScript():reload()"
		],
		"description": "thisScript():reload()\n\nперезагружает скрипт"
	},

	// REFERENCE
	"isCursorActive || Проверяет, активен ли курсор": {
		"scope": "lua",
		"prefix": "isCursorActive || Проверяет, активен ли курсор",
		"body": [
			"${1:bool result} = isCursorActive(${0:})"
		],
		"description": "isCursorActive - Проверяет, активен ли курсор\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"getPickupPointerHandle || Возвращает хэндл пикапа по указателю на экземляр класса CPickup.": {
		"scope": "lua",
		"prefix": "getPickupPointerHandle || Возвращает хэндл пикапа по указателю на экземляр класса CPickup.",
		"body": [
			"${1:int handle} = getPickupPointerHandle(${0:Pickup pickup})"
		],
		"description": "getPickupPointerHandle - Возвращает хэндл пикапа по указателю на экземляр класса CPickup.\nПринимаемые значения:\nint handle указатель\n\nВозвращаемые значения:\nPickup pickup хэндл пикапа\n"
	},
	"getPickupPointer || Возвращает указатель на структуру пикапа": {
		"scope": "lua",
		"prefix": "getPickupPointer || Возвращает указатель на структуру пикапа",
		"body": [
			"${1:int pointer} = getPickupPointer(${0:Pickup pickup})"
		],
		"description": "getPickupPointer - Возвращает указатель на структуру пикапа\nПринимаемые значения:\nPickup pickup хэндл\n\nВозвращаемые значения:\nint pointer указатель\n"
	},
	"getPickupType || Возвращает тип пикапа": {
		"scope": "lua",
		"prefix": "getPickupType || Возвращает тип пикапа",
		"body": [
			"${1:int type} = getPickupType(${0:Pickup pickup})"
		],
		"description": "getPickupType - Возвращает тип пикапа\nПринимаемые значения:\nPickup pickup хэндл пикапа\n\nВозвращаемые значения:\nint type тип пикапа\n"
	},
	"getPickupModel || Возвращает модель пикапа": {
		"scope": "lua",
		"prefix": "getPickupModel || Возвращает модель пикапа",
		"body": [
			"${1:int model} = getPickupModel(${0:Pickup pickup})"
		],
		"description": "getPickupModel - Возвращает модель пикапа\nПринимаемые значения:\nPickup pickup хэндл пикапа\n\nВозвращаемые значения:\nint model модель\n"
	},
	"getObjectQuaternion || Возвращает кватернион вращения объекта": {
		"scope": "lua",
		"prefix": "getObjectQuaternion || Возвращает кватернион вращения объекта",
		"body": [
			"${1:float x, float y, float z, float w} = getObjectQuaternion(${0:Object object})"
		],
		"description": "getObjectQuaternion - Возвращает кватернион вращения объекта\nПринимаемые значения:\nObject object объект\n\nВозвращаемые значения:\nfloat x, float y, float z, float w кватернион\n"
	},
	"setObjectQuaternion || Задаёт кватернион вращения объекта": {
		"scope": "lua",
		"prefix": "setObjectQuaternion || Задаёт кватернион вращения объекта",
		"body": [
			"setObjectQuaternion(${0:Object object, float x, float y, float z, float w})"
		],
		"description": "setObjectQuaternion - Задаёт кватернион вращения объекта\nПринимаемые значения:\nObject object объект, float x, float y, float z, float w кватернион\n\nВозвращаемые значения:\n\n"
	},
	"getVehicleQuaternion || Возвращает кватернион вращения транспортного средства": {
		"scope": "lua",
		"prefix": "getVehicleQuaternion || Возвращает кватернион вращения транспортного средства",
		"body": [
			"${1:float x, float y, float z, float w} = getVehicleQuaternion(${0:Vehicle car})"
		],
		"description": "getVehicleQuaternion - Возвращает кватернион вращения транспортного средства\nПринимаемые значения:\nVehicle car транспорт\n\nВозвращаемые значения:\nfloat x, float y, float z, float w кватернион\n"
	},
	"setVehicleQuaternion || Задаёт кватернион вращения транспортного средства": {
		"scope": "lua",
		"prefix": "setVehicleQuaternion || Задаёт кватернион вращения транспортного средства",
		"body": [
			"setVehicleQuaternion(${0:Vehicle car, float x, float y, float z, float w})"
		],
		"description": "setVehicleQuaternion - Задаёт кватернион вращения транспортного средства\nПринимаемые значения:\nVehicle car транспорт, float x, float y, float z, float w кватернион\n\nВозвращаемые значения:\n\n"
	},
	"getCharQuaternion || Возвращает кватернион вращения персонажа": {
		"scope": "lua",
		"prefix": "getCharQuaternion || Возвращает кватернион вращения персонажа",
		"body": [
			"${1:float x, float y, float z, float w} = getCharQuaternion(${0:Ped ped})"
		],
		"description": "getCharQuaternion - Возвращает кватернион вращения персонажа\nПринимаемые значения:\nPed ped персонаж\n\nВозвращаемые значения:\nfloat x, float y, float z, float w кватернион\n"
	},
	"setCharQuaternion || Задаёт кватернион вращения персонажа": {
		"scope": "lua",
		"prefix": "setCharQuaternion || Задаёт кватернион вращения персонажа",
		"body": [
			"setCharQuaternion(${0:Ped ped, float x, float y, float z, float w})"
		],
		"description": "setCharQuaternion - Задаёт кватернион вращения персонажа\nПринимаемые значения:\nPed ped персонаж, float x, float y, float z, float w кватернион\n\nВозвращаемые значения:\n\n"
	},
	"loadAudioStream || Загружает аудио из файла или по веб-адресу": {
		"scope": "lua",
		"prefix": "loadAudioStream || Загружает аудио из файла или по веб-адресу",
		"body": [
			"${1:AudioStream handle} = loadAudioStream(${0:zstring audio})"
		],
		"description": "loadAudioStream - Загружает аудио из файла или по веб-адресу\nПринимаемые значения:\nzstring audio путь к файлу или Web-адрес\n\nВозвращаемые значения:\nAudioStream handle аудиопоток\n"
	},
	"setAudioStreamState || Задаёт новый статус аудиопотоку": {
		"scope": "lua",
		"prefix": "setAudioStreamState || Задаёт новый статус аудиопотоку",
		"body": [
			"setAudioStreamState(${0:AudioStream handle, int state})"
		],
		"description": "setAudioStreamState - Задаёт новый статус аудиопотоку\nПринимаемые значения:\nAudioStream handle аудиопоток, int state состояние\n\nВозвращаемые значения:\n\n"
	},
	"releaseAudioStream || Освобождает загруженный аудиопоток. Использовать не необходимо, т.к. аудиопотоки освобождаются автоматически сборщиком мусора.": {
		"scope": "lua",
		"prefix": "releaseAudioStream || Освобождает загруженный аудиопоток. Использовать не необходимо, т.к. аудиопотоки освобождаются автоматически сборщиком мусора.",
		"body": [
			"releaseAudioStream(${0:AudioStream handle})"
		],
		"description": "releaseAudioStream - Освобождает загруженный аудиопоток. Использовать не необходимо, т.к. аудиопотоки освобождаются автоматически сборщиком мусора.\nПринимаемые значения:\nAudioStream handle аудиопоток\n\nВозвращаемые значения:\n\n"
	},
	"getAudioStreamLength || Возвращает длительность аудиопотока в секундах": {
		"scope": "lua",
		"prefix": "getAudioStreamLength || Возвращает длительность аудиопотока в секундах",
		"body": [
			"${1:double length} = getAudioStreamLength(${0:AudioStream handle})"
		],
		"description": "getAudioStreamLength - Возвращает длительность аудиопотока в секундах\nПринимаемые значения:\nAudioStream handle аудиопоток\n\nВозвращаемые значения:\ndouble length длительность\n"
	},
	"getAudioStreamState || Возвращает статус аудиопотока": {
		"scope": "lua",
		"prefix": "getAudioStreamState || Возвращает статус аудиопотока",
		"body": [
			"${1:int state} = getAudioStreamState(${0:AudioStream handle})"
		],
		"description": "getAudioStreamState - Возвращает статус аудиопотока\nПринимаемые значения:\nAudioStream handle аудиопоток\n\nВозвращаемые значения:\nint state статус\n"
	},
	"getAudioStreamVolume || Возвращает громкость аудиопотока": {
		"scope": "lua",
		"prefix": "getAudioStreamVolume || Возвращает громкость аудиопотока",
		"body": [
			"${1:float volume} = getAudioStreamVolume(${0:AudioStream audio})"
		],
		"description": "getAudioStreamVolume - Возвращает громкость аудиопотока\nПринимаемые значения:\nAudioStream audio аудиопоток\n\nВозвращаемые значения:\nfloat volume громкость\n"
	},
	"setAudioStreamVolume || Устанавливает громкость аудиопотока": {
		"scope": "lua",
		"prefix": "setAudioStreamVolume || Устанавливает громкость аудиопотока",
		"body": [
			"setAudioStreamVolume(${0:AudioStream audio, float volume})"
		],
		"description": "setAudioStreamVolume - Устанавливает громкость аудиопотока\nПринимаемые значения:\nAudioStream audio аудиопоток, float volume громкость\n\nВозвращаемые значения:\n\n"
	},
	"setAudioStreamLooped || Переключает статус зацикленности аудиопотока": {
		"scope": "lua",
		"prefix": "setAudioStreamLooped || Переключает статус зацикленности аудиопотока",
		"body": [
			"setAudioStreamLooped(${0:AudioStream audio, bool loop})"
		],
		"description": "setAudioStreamLooped - Переключает статус зацикленности аудиопотока\nПринимаемые значения:\nAudioStream audio аудиопоток, bool loop зациклить\n\nВозвращаемые значения:\n\n"
	},
	"load3dAudioStream || Загружает аудиопоток с поддержкой объёмного (3D) звука": {
		"scope": "lua",
		"prefix": "load3dAudioStream || Загружает аудиопоток с поддержкой объёмного (3D) звука",
		"body": [
			"${1:AudioStream handle} = load3dAudioStream(${0:zstring audio})"
		],
		"description": "load3dAudioStream - Загружает аудиопоток с поддержкой объёмного (3D) звука\nПринимаемые значения:\nzstring audio путь к файлу или веб-адрес\n\nВозвращаемые значения:\nAudioStream handle загруженный аудиопоток\n"
	},
	"setPlay3dAudioStreamAtCoordinates || Устанавливает 3D-аудиопотоку позицию в мире игры": {
		"scope": "lua",
		"prefix": "setPlay3dAudioStreamAtCoordinates || Устанавливает 3D-аудиопотоку позицию в мире игры",
		"body": [
			"setPlay3dAudioStreamAtCoordinates(${0:AudioStream handle, float posX, float posY, float posZ})"
		],
		"description": "setPlay3dAudioStreamAtCoordinates - Устанавливает 3D-аудиопотоку позицию в мире игры\nПринимаемые значения:\nAudioStream handle аудиопоток, float posX, posY, posZ координаты\n\nВозвращаемые значения:\n\n"
	},
	"setPlay3dAudioStreamAtObject || Прикрепляет 3D-звук к объекту": {
		"scope": "lua",
		"prefix": "setPlay3dAudioStreamAtObject || Прикрепляет 3D-звук к объекту",
		"body": [
			"setPlay3dAudioStreamAtObject(${0:AudioStream audio, Object object})"
		],
		"description": "setPlay3dAudioStreamAtObject - Прикрепляет 3D-звук к объекту\nПринимаемые значения:\nAudioStream audio аудиопоток, Object object объект\n\nВозвращаемые значения:\n\n"
	},
	"setPlay3dAudioStreamAtChar || Прикрепляет 3D-звук к персонажу": {
		"scope": "lua",
		"prefix": "setPlay3dAudioStreamAtChar || Прикрепляет 3D-звук к персонажу",
		"body": [
			"setPlay3dAudioStreamAtChar(${0:AudioStream audio, Ped ped})"
		],
		"description": "setPlay3dAudioStreamAtChar - Прикрепляет 3D-звук к персонажу\nПринимаемые значения:\nAudioStream audio аудиопоток, Ped ped персонаж\n\nВозвращаемые значения:\n\n"
	},
	"setPlay3dAudioStreamAtCar || Прикрепляет 3D-звук к транспортному средству": {
		"scope": "lua",
		"prefix": "setPlay3dAudioStreamAtCar || Прикрепляет 3D-звук к транспортному средству",
		"body": [
			"setPlay3dAudioStreamAtCar(${0:AudioStream audio, Vehicle car})"
		],
		"description": "setPlay3dAudioStreamAtCar - Прикрепляет 3D-звук к транспортному средству\nПринимаемые значения:\nAudioStream audio аудиопоток, Vehicle car транспорт\n\nВозвращаемые значения:\n\n"
	},
	"loadAudioStreamFromMemory || Загружает аудиопоток из файла в памяти процесса": {
		"scope": "lua",
		"prefix": "loadAudioStreamFromMemory || Загружает аудиопоток из файла в памяти процесса",
		"body": [
			"${1:AudioStream handle} = loadAudioStreamFromMemory(${0:uint address, uint size})"
		],
		"description": "loadAudioStreamFromMemory - Загружает аудиопоток из файла в памяти процесса\nПринимаемые значения:\nuint address адрес памяти, uint size размер файла\n\nВозвращаемые значения:\nAudioStream handle загруженный аудиопоток\n"
	},
	"load3dAudioStreamFromMemory || Загружает аудиопоток с объёмным звучанием из файла в памяти процесса": {
		"scope": "lua",
		"prefix": "load3dAudioStreamFromMemory || Загружает аудиопоток с объёмным звучанием из файла в памяти процесса",
		"body": [
			"${1:AudioStream handle} = load3dAudioStreamFromMemory(${0:uint address, uint size})"
		],
		"description": "load3dAudioStreamFromMemory - Загружает аудиопоток с объёмным звучанием из файла в памяти процесса\nПринимаемые значения:\nuint address адрес памяти, uint size размер\n\nВозвращаемые значения:\nAudioStream handle загруженный аудиопоток\n"
	},
	"renderDrawLine || Отображает на экране линию от точки pos1x, pos1y до точки pos2x, pos2y": {
		"scope": "lua",
		"prefix": "renderDrawLine || Отображает на экране линию от точки pos1x, pos1y до точки pos2x, pos2y",
		"body": [
			"renderDrawLine(${0:float pos1x, float pos1y, float pos2x, float pos2y, float width, uint color})"
		],
		"description": "renderDrawLine - Отображает на экране линию от точки pos1x, pos1y до точки pos2x, pos2y\nПринимаемые значения:\nfloat pos1x, pos1y координаты первой точки, float pos2y, pos2y координаты второй точки, float width ширина линии, uint color цвет линии в формате ARGB\n\nВозвращаемые значения:\n\n"
	},
	"renderDrawBox || Рисует прямоугольник в указанных координатах с определённым размером": {
		"scope": "lua",
		"prefix": "renderDrawBox || Рисует прямоугольник в указанных координатах с определённым размером",
		"body": [
			"renderDrawBox(${0:float posX, float posY, float sizeX, float sizeY, uint color})"
		],
		"description": "renderDrawBox - Рисует прямоугольник в указанных координатах с определённым размером\nПринимаемые значения:\nfloat posX, posY координаты, float sizeX, sizeY размер, uint color цвет в ARGB\n\nВозвращаемые значения:\n\n"
	},
	"renderDrawBoxWithBorder || Рисует прямоугольник с границей": {
		"scope": "lua",
		"prefix": "renderDrawBoxWithBorder || Рисует прямоугольник с границей",
		"body": [
			"renderDrawBoxWithBorder(${0:float posX, float posY, float sizeX, float sizeY, uint color, float bsize, uint bcolor})"
		],
		"description": "renderDrawBoxWithBorder - Рисует прямоугольник с границей\nПринимаемые значения:\nfloat posX, posY координаты, float sizeX, sizeY размер, uint color цвет в ARGB, float bsize толщина границы, uint bcolor цвет границы в ARGB\n\nВозвращаемые значения:\n\n"
	},
	"renderGetFontDrawTextLength || Вычисляет ширину заданного текста для загруженного шрифта и возвращает результат в пикселях.": {
		"scope": "lua",
		"prefix": "renderGetFontDrawTextLength || Вычисляет ширину заданного текста для загруженного шрифта и возвращает результат в пикселях.",
		"body": [
			"${1:float length} = renderGetFontDrawTextLength(${0:DxFont font, zstring text [, bool ignoreColorTags=false]})"
		],
		"description": "renderGetFontDrawTextLength - Вычисляет ширину заданного текста для загруженного шрифта и возвращает результат в пикселях.\nПринимаемые значения:\nDxFont font шрифт, zstring text текст, bool ignoreColorTags=false пропуск цветовых тегов\n\nВозвращаемые значения:\nfloat length ширина в пикселях\n"
	},
	"renderGetFontDrawHeight || Возвращает высоту загруженного шрифта в пикселях": {
		"scope": "lua",
		"prefix": "renderGetFontDrawHeight || Возвращает высоту загруженного шрифта в пикселях",
		"body": [
			"${1:float height} = renderGetFontDrawHeight(${0:DxFont font})"
		],
		"description": "renderGetFontDrawHeight - Возвращает высоту загруженного шрифта в пикселях\nПринимаемые значения:\nDxFont font шрифт\n\nВозвращаемые значения:\nfloat height высота\n"
	},
	"renderGetFontCharIndexAt || Возвращает индекс символа в тексте по позиции в пикселях": {
		"scope": "lua",
		"prefix": "renderGetFontCharIndexAt || Возвращает индекс символа в тексте по позиции в пикселях",
		"body": [
			"${1:uint index} = renderGetFontCharIndexAt(${0:DxFont font, string text, float x [, bool ignoreColorTags=false]})"
		],
		"description": "renderGetFontCharIndexAt - Возвращает индекс символа в тексте по позиции в пикселях\nПринимаемые значения:\nDxFont font шрифт, string text текст, float x смещение в пикселях, bool ignoreColorTags=false пропуск цветовых тегов\n\nВозвращаемые значения:\nuint index индекс символа\n"
	},
	"renderCreateFont || Загружает установленный в системе шрифт по названию. Можно задать стиль шрифта и требуемую кодировку.": {
		"scope": "lua",
		"prefix": "renderCreateFont || Загружает установленный в системе шрифт по названию. Можно задать стиль шрифта и требуемую кодировку.",
		"body": [
			"${1:DxFont font} = renderCreateFont(${0:zstring font, int height, uint flags [, uint charset]})"
		],
		"description": "renderCreateFont - Загружает установленный в системе шрифт по названию. Можно задать стиль шрифта и требуемую кодировку.\nПринимаемые значения:\nzstring font название, int height высота, uint flags флаги, uint charset кодировка\n\nВозвращаемые значения:\nDxFont font шрифт\n"
	},
	"renderReleaseFont || Освобождает объект шрифта. Загруженные шрифты выгружаются автоматически сборщиком мусора, так что использование этой функции необязательно, она существует лишь для обеспечения совместимости со старыми версиями.": {
		"scope": "lua",
		"prefix": "renderReleaseFont || Освобождает объект шрифта. Загруженные шрифты выгружаются автоматически сборщиком мусора, так что использование этой функции необязательно, она существует лишь для обеспечения совместимости со старыми версиями.",
		"body": [
			"renderReleaseFont(${0:DxFont font})"
		],
		"description": "renderReleaseFont - Освобождает объект шрифта. Загруженные шрифты выгружаются автоматически сборщиком мусора, так что использование этой функции необязательно, она существует лишь для обеспечения совместимости со старыми версиями.\nПринимаемые значения:\nDxFont font шрифт\n\nВозвращаемые значения:\n\n"
	},
	"renderFontDrawText || Отображает текст на экране, используя загруженный шрифт. Поддерживает цветовые теги в формате {RRGGBB} и {AARRGGBB}, и символ переноса строки \\\\n.": {
		"scope": "lua",
		"prefix": "renderFontDrawText || Отображает текст на экране, используя загруженный шрифт. Поддерживает цветовые теги в формате {RRGGBB} и {AARRGGBB}, и символ переноса строки \\\\n.",
		"body": [
			"renderFontDrawText(${0:DxFont font, zstring text, float posX, float posY, uint color [, bool ignoreColorTags=false]})"
		],
		"description": "renderFontDrawText - Отображает текст на экране, используя загруженный шрифт. Поддерживает цветовые теги в формате {RRGGBB} и {AARRGGBB}, и символ переноса строки \\\\n.\nПринимаемые значения:\nDxFont font шрифт, zstring text текст, float posX, posY координаты, uint color цвет в ARGB, bool ignoreColorTags=false если задано, true , цветовые теги не станут обрабатываться\n\nВозвращаемые значения:\n\n"
	},
	"renderDrawPolygon || Отображает многоугольник в указанных координатах с заданным вращением и количеством углов": {
		"scope": "lua",
		"prefix": "renderDrawPolygon || Отображает многоугольник в указанных координатах с заданным вращением и количеством углов",
		"body": [
			"renderDrawPolygon(${0:float posX, float posY, float sizeX, float sizeY, int corners, float rotation, uint color})"
		],
		"description": "renderDrawPolygon - Отображает многоугольник в указанных координатах с заданным вращением и количеством углов\nПринимаемые значения:\nfloat posX, float posY координаты центра, float sizeX, float sizeY размер, int corners количество вершин, float rotation вращение в градусах, uint color цвет фигуры в формате ARGB\n\nВозвращаемые значения:\n\n"
	},
	"renderLoadTextureFromFile || Загружает текстуру из файла": {
		"scope": "lua",
		"prefix": "renderLoadTextureFromFile || Загружает текстуру из файла",
		"body": [
			"${1:DxTexture texture} = renderLoadTextureFromFile(${0:zstring file})"
		],
		"description": "renderLoadTextureFromFile - Загружает текстуру из файла\nПринимаемые значения:\nzstring file путь к файлу\n\nВозвращаемые значения:\nDxTexture texture текстура\n"
	},
	"renderReleaseTexture || Освобождает загруженную текстуру. Применять необязательно, т.к. все загруженные текстуры освобождаются сборщиком мусора. Функция оставлена для обеспечения совместимости со старыми версиями.": {
		"scope": "lua",
		"prefix": "renderReleaseTexture || Освобождает загруженную текстуру. Применять необязательно, т.к. все загруженные текстуры освобождаются сборщиком мусора. Функция оставлена для обеспечения совместимости со старыми версиями.",
		"body": [
			"renderReleaseTexture(${0:DxTexture texture})"
		],
		"description": "renderReleaseTexture - Освобождает загруженную текстуру. Применять необязательно, т.к. все загруженные текстуры освобождаются сборщиком мусора. Функция оставлена для обеспечения совместимости со старыми версиями.\nПринимаемые значения:\nDxTexture texture текстура\n\nВозвращаемые значения:\n\n"
	},
	"renderDrawTexture || Отображает загруженную текстуру по заданным координатам, с указанным размером и вращением": {
		"scope": "lua",
		"prefix": "renderDrawTexture || Отображает загруженную текстуру по заданным координатам, с указанным размером и вращением",
		"body": [
			"renderDrawTexture(${0:DxTexture texture, float posX, float posY, float sizeX, float sizeY, float rotation, uint color})"
		],
		"description": "renderDrawTexture - Отображает загруженную текстуру по заданным координатам, с указанным размером и вращением\nПринимаемые значения:\nDxTexture texture текстура, float posX, posY координаты, float sizeX, sizeY размер, float rotation вращение, uint color цвет в ARGB\n\nВозвращаемые значения:\n\n"
	},
	"renderBegin || Начало рисования фигуры определённым методом., Возможные значения type:": {
		"scope": "lua",
		"prefix": "renderBegin || Начало рисования фигуры определённым методом., Возможные значения type:",
		"body": [
			"renderBegin(${0:int type})"
		],
		"description": "renderBegin - Начало рисования фигуры определённым методом., Возможные значения type:\nПринимаемые значения:\nint type метод\n\nВозвращаемые значения:\n\n"
	},
	"renderEnd || Завершение рисования фигуры.": {
		"scope": "lua",
		"prefix": "renderEnd || Завершение рисования фигуры.",
		"body": [
			"renderEnd(${0:})"
		],
		"description": "renderEnd - Завершение рисования фигуры.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"renderColor || Задаёт цвет фигуры. Должна быть вызвана перед добавлением вершины": {
		"scope": "lua",
		"prefix": "renderColor || Задаёт цвет фигуры. Должна быть вызвана перед добавлением вершины",
		"body": [
			"renderColor(${0:uint color})"
		],
		"description": "renderColor - Задаёт цвет фигуры. Должна быть вызвана перед добавлением вершины\nПринимаемые значения:\nuint color цвет в ARGB\n\nВозвращаемые значения:\n\n"
	},
	"renderVertex || Добавляет вершину в фигуру по абсолютным координатам": {
		"scope": "lua",
		"prefix": "renderVertex || Добавляет вершину в фигуру по абсолютным координатам",
		"body": [
			"renderVertex(${0:float vX, float vY})"
		],
		"description": "renderVertex - Добавляет вершину в фигуру по абсолютным координатам\nПринимаемые значения:\nfloat vX, float vY координаты\n\nВозвращаемые значения:\n\n"
	},
	"renderSetTexCoord || Указывает, какая точка текстуры будет прикреплена к следующей вершине. Координаты точки задаются в диапазоне от '0.0' до '1.0', относительно размеров всей текстуры. Должна быть вызвана перед каждым добавлением вершины, к которой нужно прикрепить текстуру. Без вызова renderBindTexture не будет иметь эффекта": {
		"scope": "lua",
		"prefix": "renderSetTexCoord || Указывает, какая точка текстуры будет прикреплена к следующей вершине. Координаты точки задаются в диапазоне от '0.0' до '1.0', относительно размеров всей текстуры. Должна быть вызвана перед каждым добавлением вершины, к которой нужно прикрепить текстуру. Без вызова renderBindTexture не будет иметь эффекта",
		"body": [
			"renderSetTexCoord(${0:float posX, float posY})"
		],
		"description": "renderSetTexCoord - Указывает, какая точка текстуры будет прикреплена к следующей вершине. Координаты точки задаются в диапазоне от '0.0' до '1.0', относительно размеров всей текстуры. Должна быть вызвана перед каждым добавлением вершины, к которой нужно прикрепить текстуру. Без вызова renderBindTexture не будет иметь эффекта\nПринимаемые значения:\nfloat posX, posY относительные координаты текстуры\n\nВозвращаемые значения:\n\n"
	},
	"renderBindTexture || Задаёт фигуре текстуру. Каждой фигуре может быть задана только одна текстура. Значение nil сбросит заданную текстуру., Эта функция должна быть использована совместно с renderSetTexCoord": {
		"scope": "lua",
		"prefix": "renderBindTexture || Задаёт фигуре текстуру. Каждой фигуре может быть задана только одна текстура. Значение nil сбросит заданную текстуру., Эта функция должна быть использована совместно с renderSetTexCoord",
		"body": [
			"renderBindTexture(${0:DxTexture texture})"
		],
		"description": "renderBindTexture - Задаёт фигуре текстуру. Каждой фигуре может быть задана только одна текстура. Значение nil сбросит заданную текстуру., Эта функция должна быть использована совместно с renderSetTexCoord\nПринимаемые значения:\nDxTexture texture текстура\n\nВозвращаемые значения:\n\n"
	},
	"renderGetTextureStruct || Возвращает указатель на объект IDirect3DTexture9, принадлежащий текстуре": {
		"scope": "lua",
		"prefix": "renderGetTextureStruct || Возвращает указатель на объект IDirect3DTexture9, принадлежащий текстуре",
		"body": [
			"${1:uint struct} = renderGetTextureStruct(${0:DxTexture texture})"
		],
		"description": "renderGetTextureStruct - Возвращает указатель на объект IDirect3DTexture9, принадлежащий текстуре\nПринимаемые значения:\nDxTexture texture текстура\n\nВозвращаемые значения:\nuint struct указатель\n"
	},
	"renderGetTextureSprite || Возвращает указатель на объект ID3DXSprite, принадлежащий текстуре": {
		"scope": "lua",
		"prefix": "renderGetTextureSprite || Возвращает указатель на объект ID3DXSprite, принадлежащий текстуре",
		"body": [
			"${1:uint sprite} = renderGetTextureSprite(${0:DxTexture texture})"
		],
		"description": "renderGetTextureSprite - Возвращает указатель на объект ID3DXSprite, принадлежащий текстуре\nПринимаемые значения:\nDxTexture texture текстура\n\nВозвращаемые значения:\nuint sprite указатель\n"
	},
	"renderGetTextureSize || Возвращает размеры изображения": {
		"scope": "lua",
		"prefix": "renderGetTextureSize || Возвращает размеры изображения",
		"body": [
			"${1:uint sizeX, uint sizeY} = renderGetTextureSize(${0:DxTexture texture})"
		],
		"description": "renderGetTextureSize - Возвращает размеры изображения\nПринимаемые значения:\nDxTexture texture текстура\n\nВозвращаемые значения:\nuint sizeX ширина, uint sizeY высота\n"
	},
	"renderSetRenderState || Устанавливает значение рендерстейта., Подробнее о рендерстейтах: MSDN": {
		"scope": "lua",
		"prefix": "renderSetRenderState || Устанавливает значение рендерстейта., Подробнее о рендерстейтах: MSDN",
		"body": [
			"renderSetRenderState(${0:int state, uint value})"
		],
		"description": "renderSetRenderState - Устанавливает значение рендерстейта., Подробнее о рендерстейтах: MSDN\nПринимаемые значения:\nint state тип, uint value новое значение\n\nВозвращаемые значения:\n\n"
	},
	"renderLoadTextureFromFileInMemory || Загружает текстуру из файла в памяти процесса": {
		"scope": "lua",
		"prefix": "renderLoadTextureFromFileInMemory || Загружает текстуру из файла в памяти процесса",
		"body": [
			"${1:DxTexture texture} = renderLoadTextureFromFileInMemory(${0:uint pointer, uint size})"
		],
		"description": "renderLoadTextureFromFileInMemory - Загружает текстуру из файла в памяти процесса\nПринимаемые значения:\nuint pointer адрес памяти, uint size размер файла\n\nВозвращаемые значения:\nDxTexture texture текстура\n"
	},
	"script_version_number || Задаёт числовую версию скрипта. Предназначена преимущественно для системы проверки обновлений.": {
		"scope": "lua",
		"prefix": "script_version_number || Задаёт числовую версию скрипта. Предназначена преимущественно для системы проверки обновлений.",
		"body": [
			"script_version_number(${0:int version})"
		],
		"description": "script_version_number - Задаёт числовую версию скрипта. Предназначена преимущественно для системы проверки обновлений.\nПринимаемые значения:\nint version версия\n\nВозвращаемые значения:\n\n"
	},
	"script_version || Задаёт текстовую версию скрипта.": {
		"scope": "lua",
		"prefix": "script_version || Задаёт текстовую версию скрипта.",
		"body": [
			"script_version(${0:string version})"
		],
		"description": "script_version - Задаёт текстовую версию скрипта.\nПринимаемые значения:\nstring version версия\n\nВозвращаемые значения:\n\n"
	},
	"script_name || Задаёт название скрипта. Если название не задать, то в качестве названия будет выступать имя файла скрипта.": {
		"scope": "lua",
		"prefix": "script_name || Задаёт название скрипта. Если название не задать, то в качестве названия будет выступать имя файла скрипта.",
		"body": [
			"script_name(${0:string name})"
		],
		"description": "script_name - Задаёт название скрипта. Если название не задать, то в качестве названия будет выступать имя файла скрипта.\nПринимаемые значения:\nstring name название\n\nВозвращаемые значения:\n\n"
	},
	"script_description || Задаёт описание скрипта.": {
		"scope": "lua",
		"prefix": "script_description || Задаёт описание скрипта.",
		"body": [
			"script_description(${0:string description})"
		],
		"description": "script_description - Задаёт описание скрипта.\nПринимаемые значения:\nstring description текст описания\n\nВозвращаемые значения:\n\n"
	},
	"script_authors || Задаёт нескольких авторов скрипта. Имеет аналог с более подходящим названием для указания одного автора - script_author.": {
		"scope": "lua",
		"prefix": "script_authors || Задаёт нескольких авторов скрипта. Имеет аналог с более подходящим названием для указания одного автора - script_author.",
		"body": [
			"script_authors(${0:string author, ...})"
		],
		"description": "script_authors - Задаёт нескольких авторов скрипта. Имеет аналог с более подходящим названием для указания одного автора - script_author.\nПринимаемые значения:\nstring authors, ... авторы скрипта\n\nВозвращаемые значения:\n\n"
	},
	"script_author || Задаёт автора или нескольких авторов скрипта. Имеет аналог с более подходящим названием для указания нескольких авторов - script_authors.": {
		"scope": "lua",
		"prefix": "script_author || Задаёт автора или нескольких авторов скрипта. Имеет аналог с более подходящим названием для указания нескольких авторов - script_authors.",
		"body": [
			"script_author(${0:string author, ...})"
		],
		"description": "script_author - Задаёт автора или нескольких авторов скрипта. Имеет аналог с более подходящим названием для указания нескольких авторов - script_authors.\nПринимаемые значения:\nstring author автор скрипта\n\nВозвращаемые значения:\n\n"
	},
	"script_dependencies || Задаёт зависимости скрипта. На текущий момент предназначен только для вывода. В будущем получит дополнительную функциональность.": {
		"scope": "lua",
		"prefix": "script_dependencies || Задаёт зависимости скрипта. На текущий момент предназначен только для вывода. В будущем получит дополнительную функциональность.",
		"body": [
			"script_dependencies(${0:string name, ...})"
		],
		"description": "script_dependencies - Задаёт зависимости скрипта. На текущий момент предназначен только для вывода. В будущем получит дополнительную функциональность.\nПринимаемые значения:\nstring name, ... зависимости\n\nВозвращаемые значения:\n\n"
	},
	"script_moonloader || Задаёт минимальную требуемую версию MoonLoader. Если версия не соответствует, выводит сообщение об ошибке, но не прекращает работу скрипта.": {
		"scope": "lua",
		"prefix": "script_moonloader || Задаёт минимальную требуемую версию MoonLoader. Если версия не соответствует, выводит сообщение об ошибке, но не прекращает работу скрипта.",
		"body": [
			"script_moonloader(${0:int version})"
		],
		"description": "script_moonloader - Задаёт минимальную требуемую версию MoonLoader. Если версия не соответствует, выводит сообщение об ошибке, но не прекращает работу скрипта.\nПринимаемые значения:\nint version версия\n\nВозвращаемые значения:\n\n"
	},
	"thisScript || Возвращает luascript скрипта, из которого была вызвана функция.": {
		"scope": "lua",
		"prefix": "thisScript || Возвращает luascript скрипта, из которого была вызвана функция.",
		"body": [
			"${1:LuaScript s} = thisScript(${0:})"
		],
		"description": "thisScript - Возвращает luascript скрипта, из которого была вызвана функция.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nLuaScript s скрипт\n"
	},
	"wait || Приостанавливает выполнение сопрограммы main на заданное время в миллисекундах. Может быть вызвана только изнутри main и скриптовых потоков., Если функция вызвана изнутри main и значение time равно -1, то скрипт будет приостановлен на бесконечный период времени,, это может быть использовано для прекращения активного исполнения скрипта, но чтобы он продолжал работать и обрабатывать события.": {
		"scope": "lua",
		"prefix": "wait || Приостанавливает выполнение сопрограммы main на заданное время в миллисекундах. Может быть вызвана только изнутри main и скриптовых потоков., Если функция вызвана изнутри main и значение time равно -1, то скрипт будет приостановлен на бесконечный период времени,, это может быть использовано для прекращения активного исполнения скрипта, но чтобы он продолжал работать и обрабатывать события.",
		"body": [
			"wait(${0:int time})"
		],
		"description": "wait - Приостанавливает выполнение сопрограммы main на заданное время в миллисекундах. Может быть вызвана только изнутри main и скриптовых потоков., Если функция вызвана изнутри main и значение time равно -1, то скрипт будет приостановлен на бесконечный период времени,, это может быть использовано для прекращения активного исполнения скрипта, но чтобы он продолжал работать и обрабатывать события.\nПринимаемые значения:\nint time время в миллисекундах\n\nВозвращаемые значения:\n\n"
	},
	"print || Перезаписанная стандартная функция 'print', выводит текст в файл moonloader.log и вызывает событие onScriptMessage.": {
		"scope": "lua",
		"prefix": "print || Перезаписанная стандартная функция 'print', выводит текст в файл moonloader.log и вызывает событие onScriptMessage.",
		"body": [
			"print(${0:any value, …})"
		],
		"description": "print - Перезаписанная стандартная функция 'print', выводит текст в файл moonloader.log и вызывает событие onScriptMessage.\nПринимаемые значения:\nany value значение любого типа, ... ещё значения любого типа\n\nВозвращаемые значения:\n\n"
	},
	"getGameGlobal || Возвращает значение глобальной переменной игры по её индексу. Для получения дробного значения дополнительно используется функция representIntAsFloat.": {
		"scope": "lua",
		"prefix": "getGameGlobal || Возвращает значение глобальной переменной игры по её индексу. Для получения дробного значения дополнительно используется функция representIntAsFloat.",
		"body": [
			"${1:int value} = getGameGlobal(${0:int index})"
		],
		"description": "getGameGlobal - Возвращает значение глобальной переменной игры по её индексу. Для получения дробного значения дополнительно используется функция representIntAsFloat.\nПринимаемые значения:\nint index номер переменной\n\nВозвращаемые значения:\nint value значение\n"
	},
	"setGameGlobal || Задаёт значение глобальной переменной игры по её индексу. Для записи дробного значения дополнительно используется функция representFloatAsInt.": {
		"scope": "lua",
		"prefix": "setGameGlobal || Задаёт значение глобальной переменной игры по её индексу. Для записи дробного значения дополнительно используется функция representFloatAsInt.",
		"body": [
			"setGameGlobal(${0:int index, int value})"
		],
		"description": "setGameGlobal - Задаёт значение глобальной переменной игры по её индексу. Для записи дробного значения дополнительно используется функция representFloatAsInt.\nПринимаемые значения:\nint index номер переменной, int value значение\n\nВозвращаемые значения:\n\n"
	},
	"getGameGlobalPtr || Возвращает адрес глобальной переменной игры по индексу.": {
		"scope": "lua",
		"prefix": "getGameGlobalPtr || Возвращает адрес глобальной переменной игры по индексу.",
		"body": [
			"${1:int ptr} = getGameGlobalPtr(${0:int index})"
		],
		"description": "getGameGlobalPtr - Возвращает адрес глобальной переменной игры по индексу.\nПринимаемые значения:\nint index номер переменной\n\nВозвращаемые значения:\nint ptr адрес\n"
	},
	"isSampfuncsLoaded || Проверяет плагин SAMPFUNCS на подключенность к игре.": {
		"scope": "lua",
		"prefix": "isSampfuncsLoaded || Проверяет плагин SAMPFUNCS на подключенность к игре.",
		"body": [
			"${1:bool loaded} = isSampfuncsLoaded(${0:})"
		],
		"description": "isSampfuncsLoaded - Проверяет плагин SAMPFUNCS на подключенность к игре.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool loaded статус\n"
	},
	"isCleoLoaded || Проверяет плагин CLEO на подключенность к игре.": {
		"scope": "lua",
		"prefix": "isCleoLoaded || Проверяет плагин CLEO на подключенность к игре.",
		"body": [
			"${1:bool loaded} = isCleoLoaded(${0:})"
		],
		"description": "isCleoLoaded - Проверяет плагин CLEO на подключенность к игре.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool loaded статус\n"
	},
	"isSampLoaded || Проверяет, запущен ли SA:MP.": {
		"scope": "lua",
		"prefix": "isSampLoaded || Проверяет, запущен ли SA:MP.",
		"body": [
			"${1:bool loaded} = isSampLoaded(${0:})"
		],
		"description": "isSampLoaded - Проверяет, запущен ли SA:MP.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool loaded результат\n"
	},
	"isKeyDown || Проверяет, зажата ли клавиша.": {
		"scope": "lua",
		"prefix": "isKeyDown || Проверяет, зажата ли клавиша.",
		"body": [
			"${1:bool state} = isKeyDown(${0:int keyId})"
		],
		"description": "isKeyDown - Проверяет, зажата ли клавиша.\nПринимаемые значения:\nint keyId виртуальный ид клавиши\n\nВозвращаемые значения:\nbool state статус\n"
	},
	"reloadScripts || Выгружает все загруженные скрипты и загружает заново из рабочей директории, учитывая добавленные и убранные.": {
		"scope": "lua",
		"prefix": "reloadScripts || Выгружает все загруженные скрипты и загружает заново из рабочей директории, учитывая добавленные и убранные.",
		"body": [
			"reloadScripts(${0:})"
		],
		"description": "reloadScripts - Выгружает все загруженные скрипты и загружает заново из рабочей директории, учитывая добавленные и убранные.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"isOpcodesAvailable || Проверяет, доступны ли функции опкодов для использования.": {
		"scope": "lua",
		"prefix": "isOpcodesAvailable || Проверяет, доступны ли функции опкодов для использования.",
		"body": [
			"${1:bool status} = isOpcodesAvailable(${0:})"
		],
		"description": "isOpcodesAvailable - Проверяет, доступны ли функции опкодов для использования.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool status статус\n"
	},
	"representFloatAsInt || Представляет значение числа с плавающей точкой как целое.": {
		"scope": "lua",
		"prefix": "representFloatAsInt || Представляет значение числа с плавающей точкой как целое.",
		"body": [
			"${1:int i} = representFloatAsInt(${0:float f})"
		],
		"description": "representFloatAsInt - Представляет значение числа с плавающей точкой как целое.\nПринимаемые значения:\nfloat f число с плавающей точкой\n\nВозвращаемые значения:\nint i число с плавающей точкой в представлении целого\n"
	},
	"representIntAsFloat || Представляет значение целого в виде числа с плавающей точкой.": {
		"scope": "lua",
		"prefix": "representIntAsFloat || Представляет значение целого в виде числа с плавающей точкой.",
		"body": [
			"${1:float i} = representIntAsFloat(${0:int i})"
		],
		"description": "representIntAsFloat - Представляет значение целого в виде числа с плавающей точкой.\nПринимаемые значения:\nint i целое значение\n\nВозвращаемые значения:\nfloat i число с плавающей точкой\n"
	},
	"setGxtEntry || Создаёт или перезаписывает существующую GXT-запись.": {
		"scope": "lua",
		"prefix": "setGxtEntry || Создаёт или перезаписывает существующую GXT-запись.",
		"body": [
			"setGxtEntry(${0:string key, string text})"
		],
		"description": "setGxtEntry - Создаёт или перезаписывает существующую GXT-запись.\nПринимаемые значения:\nstring key ключ GXT-записи, string text текст\n\nВозвращаемые значения:\n\n"
	},
	"setFreeGxtEntry || Создаёт [новую]{.ul} GXT-запись с уникальным ключём и возвращает его. Для изменения используйте функцию setGxtEntry.": {
		"scope": "lua",
		"prefix": "setFreeGxtEntry || Создаёт [новую]{.ul} GXT-запись с уникальным ключём и возвращает его. Для изменения используйте функцию setGxtEntry.",
		"body": [
			"${1:string key} = setFreeGxtEntry(${0:string text})"
		],
		"description": "setFreeGxtEntry - Создаёт [новую]{.ul} GXT-запись с уникальным ключём и возвращает его. Для изменения используйте функцию setGxtEntry.\nПринимаемые значения:\nstring text текст\n\nВозвращаемые значения:\nstring key ключ созданной записи\n"
	},
	"getFreeGxtKey || Генерирует и возвращает [новый]{.ul} уникальный ключ для создания GXT-записи.": {
		"scope": "lua",
		"prefix": "getFreeGxtKey || Генерирует и возвращает [новый]{.ul} уникальный ключ для создания GXT-записи.",
		"body": [
			"${1:string key} = getFreeGxtKey(${0:})"
		],
		"description": "getFreeGxtKey - Генерирует и возвращает [новый]{.ul} уникальный ключ для создания GXT-записи.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nstring key сгенерированный GXT ключ\n"
	},
	"getGxtText || Возвращает текст GXT-записи по ключу, поиск производится включая записи игры. Возвращает пустую строку, если запись не существует.": {
		"scope": "lua",
		"prefix": "getGxtText || Возвращает текст GXT-записи по ключу, поиск производится включая записи игры. Возвращает пустую строку, если запись не существует.",
		"body": [
			"${1:string text} = getGxtText(${0:string key})"
		],
		"description": "getGxtText - Возвращает текст GXT-записи по ключу, поиск производится включая записи игры. Возвращает пустую строку, если запись не существует.\nПринимаемые значения:\nstring key ключ GXT-записи\n\nВозвращаемые значения:\nstring text текст\n"
	},
	"clearGxtEntry || Удаляет GXT-запись по ключу, не затрагивает игровые записи.": {
		"scope": "lua",
		"prefix": "clearGxtEntry || Удаляет GXT-запись по ключу, не затрагивает игровые записи.",
		"body": [
			"clearGxtEntry(${0:string key})"
		],
		"description": "clearGxtEntry - Удаляет GXT-запись по ключу, не затрагивает игровые записи.\nПринимаемые значения:\nstring key ключ GXT-записи\n\nВозвращаемые значения:\n\n"
	},
	"isPauseMenuActive || Проверяет, открыто ли игровое меню паузы.": {
		"scope": "lua",
		"prefix": "isPauseMenuActive || Проверяет, открыто ли игровое меню паузы.",
		"body": [
			"${1:bool active} = isPauseMenuActive(${0:})"
		],
		"description": "isPauseMenuActive - Проверяет, открыто ли игровое меню паузы.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool active статус\n"
	},
	"isGameWindowForeground || Проверяет, находится ли окно игры на переднем плане.": {
		"scope": "lua",
		"prefix": "isGameWindowForeground || Проверяет, находится ли окно игры на переднем плане.",
		"body": [
			"${1:bool foreground} = isGameWindowForeground(${0:})"
		],
		"description": "isGameWindowForeground - Проверяет, находится ли окно игры на переднем плане.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool foreground результат\n"
	},
	"getGameVersion || Возвращает информацию о версии игры": {
		"scope": "lua",
		"prefix": "getGameVersion || Возвращает информацию о версии игры",
		"body": [
			"${1:int major, int minor, int majorRev, int minorRev, int game, int region, bool steam, bool cracked} = getGameVersion(${0:})"
		],
		"description": "getGameVersion - Возвращает информацию о версии игры\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint major, int minor, int majorRev, int minorRev версия, int game часть серии, int region регион, bool steam Steam-версия, bool cracked взломана\n"
	},
	"getMoonloaderVersion || Возвращает номер версии MoonLoader.": {
		"scope": "lua",
		"prefix": "getMoonloaderVersion || Возвращает номер версии MoonLoader.",
		"body": [
			"${1:int version} = getMoonloaderVersion(${0:})"
		],
		"description": "getMoonloaderVersion - Возвращает номер версии MoonLoader.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint version версия\n"
	},
	"localClock || Возвращает значение внутреннего таймера в виде дробного в формате 'секунды.миллисекунды'. В отличие от системного таймера os.clock(), этот таймер работает только если игра активна (не свёрнута и находится на переднем плане).": {
		"scope": "lua",
		"prefix": "localClock || Возвращает значение внутреннего таймера в виде дробного в формате 'секунды.миллисекунды'. В отличие от системного таймера os.clock(), этот таймер работает только если игра активна (не свёрнута и находится на переднем плане).",
		"body": [
			"${1:double time} = localClock(${0:})"
		],
		"description": "localClock - Возвращает значение внутреннего таймера в виде дробного в формате 'секунды.миллисекунды'. В отличие от системного таймера os.clock(), этот таймер работает только если игра активна (не свёрнута и находится на переднем плане).\nПринимаемые значения:\n\n\nВозвращаемые значения:\ndouble time время\n"
	},
	"freeTextures || Освобождает все загруженные функцией loadSprite текстуры, принадлежащие вызвавшему скрипту.": {
		"scope": "lua",
		"prefix": "freeTextures || Освобождает все загруженные функцией loadSprite текстуры, принадлежащие вызвавшему скрипту.",
		"body": [
			"freeTextures(${0:})"
		],
		"description": "freeTextures - Освобождает все загруженные функцией loadSprite текстуры, принадлежащие вызвавшему скрипту.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"getWorkingDirectory || Возвращает полный путь к рабочей директории MoonLoader.": {
		"scope": "lua",
		"prefix": "getWorkingDirectory || Возвращает полный путь к рабочей директории MoonLoader.",
		"body": [
			"${1:string path} = getWorkingDirectory(${0:})"
		],
		"description": "getWorkingDirectory - Возвращает полный путь к рабочей директории MoonLoader.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nstring path путь\n"
	},
	"getGameDirectory || Возвращает полный путь к директории игры.": {
		"scope": "lua",
		"prefix": "getGameDirectory || Возвращает полный путь к директории игры.",
		"body": [
			"${1:string path} = getGameDirectory(${0:})"
		],
		"description": "getGameDirectory - Возвращает полный путь к директории игры.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nstring path путь\n"
	},
	"useRenderCommands || Активирует или отключает рендер текста и текстур опкодами игры. Аналог опкода 03F0.": {
		"scope": "lua",
		"prefix": "useRenderCommands || Активирует или отключает рендер текста и текстур опкодами игры. Аналог опкода 03F0.",
		"body": [
			"useRenderCommands(${0:bool enable})"
		],
		"description": "useRenderCommands - Активирует или отключает рендер текста и текстур опкодами игры. Аналог опкода 03F0.\nПринимаемые значения:\nbool enable статус\n\nВозвращаемые значения:\n\n"
	},
	"writeMemory || Записывает значение в память процесса по указанному адресу. Аналог опкода CLEO 0A8C.": {
		"scope": "lua",
		"prefix": "writeMemory || Записывает значение в память процесса по указанному адресу. Аналог опкода CLEO 0A8C.",
		"body": [
			"writeMemory(${0:int address, int size, int value, bool virtualProtect})"
		],
		"description": "writeMemory - Записывает значение в память процесса по указанному адресу. Аналог опкода CLEO 0A8C.\nПринимаемые значения:\nint address адрес памяти, int size размер (от 1 до 4), int value размер (от 1 до 4), bool virtualProtect флаг снятия протекции\n\nВозвращаемые значения:\n\n"
	},
	"readMemory || Читает значение из памяти процесса по указанному адресу. Аналог опкода CLEO 0A8D.": {
		"scope": "lua",
		"prefix": "readMemory || Читает значение из памяти процесса по указанному адресу. Аналог опкода CLEO 0A8D.",
		"body": [
			"${1:int value} = readMemory(${0:int address, int size, bool virtualProtect})"
		],
		"description": "readMemory - Читает значение из памяти процесса по указанному адресу. Аналог опкода CLEO 0A8D.\nПринимаемые значения:\nint address адрес памяти, int size размер (от 1 до 4), bool virtualProtect флаг снятия протекции\n\nВозвращаемые значения:\nint value значение\n"
	},
	"loadDynamicLibrary || Загружает динамическую библиотеку по названию и возвращает её хендл (адрес). Аналог опкода CLEO 0AA2.": {
		"scope": "lua",
		"prefix": "loadDynamicLibrary || Загружает динамическую библиотеку по названию и возвращает её хендл (адрес). Аналог опкода CLEO 0AA2.",
		"body": [
			"${1:bool result, int handle} = loadDynamicLibrary(${0:string library})"
		],
		"description": "loadDynamicLibrary - Загружает динамическую библиотеку по названию и возвращает её хендл (адрес). Аналог опкода CLEO 0AA2.\nПринимаемые значения:\nstring library название библиотеки\n\nВозвращаемые значения:\nbool result результат выполнения, int handle хендл библиотеки\n"
	},
	"freeDynamicLibrary || Выгружает динамическую библиотеку по её хендлу. Аналог опкода CLEO 0AA3.": {
		"scope": "lua",
		"prefix": "freeDynamicLibrary || Выгружает динамическую библиотеку по её хендлу. Аналог опкода CLEO 0AA3.",
		"body": [
			"freeDynamicLibrary(${0:int handle})"
		],
		"description": "freeDynamicLibrary - Выгружает динамическую библиотеку по её хендлу. Аналог опкода CLEO 0AA3.\nПринимаемые значения:\nint handle хендл библиотеки\n\nВозвращаемые значения:\n\n"
	},
	"getDynamicLibraryProcedure || Получает адрес экспортируемой функции по названию и хендлу библиотеки. Аналог опкода CLEO 0AA4.": {
		"scope": "lua",
		"prefix": "getDynamicLibraryProcedure || Получает адрес экспортируемой функции по названию и хендлу библиотеки. Аналог опкода CLEO 0AA4.",
		"body": [
			"${1:bool result, int proc} = getDynamicLibraryProcedure(${0:string proc, int handle})"
		],
		"description": "getDynamicLibraryProcedure - Получает адрес экспортируемой функции по названию и хендлу библиотеки. Аналог опкода CLEO 0AA4.\nПринимаемые значения:\nstring proc имя функции, int handle хендл библиотеки\n\nВозвращаемые значения:\nbool result результат выполнения, int proc адрес функции\n"
	},
	"doesFileExist || Проверяет файл на существование. Аналог опкода CLEO 0AAB.": {
		"scope": "lua",
		"prefix": "doesFileExist || Проверяет файл на существование. Аналог опкода CLEO 0AAB.",
		"body": [
			"${1:bool result} = doesFileExist(${0:string file})"
		],
		"description": "doesFileExist - Проверяет файл на существование. Аналог опкода CLEO 0AAB.\nПринимаемые значения:\nstring file путь\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"doesDirectoryExist || Проверяет директорию на существование. Аналог опкода CLEO 0AE4.": {
		"scope": "lua",
		"prefix": "doesDirectoryExist || Проверяет директорию на существование. Аналог опкода CLEO 0AE4.",
		"body": [
			"${1:bool result} = doesDirectoryExist(${0:string directory})"
		],
		"description": "doesDirectoryExist - Проверяет директорию на существование. Аналог опкода CLEO 0AE4.\nПринимаемые значения:\nstring directory путь\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"createDirectory || Создаёт иерархию директорий для указанного пути. Аналог опкода CLEO 0AE5.": {
		"scope": "lua",
		"prefix": "createDirectory || Создаёт иерархию директорий для указанного пути. Аналог опкода CLEO 0AE5.",
		"body": [
			"${1:bool result} = createDirectory(${0:string directory})"
		],
		"description": "createDirectory - Создаёт иерархию директорий для указанного пути. Аналог опкода CLEO 0AE5.\nПринимаемые значения:\nstring directory путь\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"popFloat || Извлекает верхнее значение из стека FPU и возвращает его. Аналог опкода CLEO 0AE9.": {
		"scope": "lua",
		"prefix": "popFloat || Извлекает верхнее значение из стека FPU и возвращает его. Аналог опкода CLEO 0AE9.",
		"body": [
			"${1:float val} = popFloat(${0:})"
		],
		"description": "popFloat - Извлекает верхнее значение из стека FPU и возвращает его. Аналог опкода CLEO 0AE9.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nfloat val значение\n"
	},
	"isGameVersionOriginal || Проверяет версию игры, если версия игры 1.0 US, то вернет true.": {
		"scope": "lua",
		"prefix": "isGameVersionOriginal || Проверяет версию игры, если версия игры 1.0 US, то вернет true.",
		"body": [
			"${1:bool result} = isGameVersionOriginal(${0:})"
		],
		"description": "isGameVersionOriginal - Проверяет версию игры, если версия игры 1.0 US, то вернет true.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"allocateMemory || Выделяет память и возвращает указатель на выделенную область.": {
		"scope": "lua",
		"prefix": "allocateMemory || Выделяет память и возвращает указатель на выделенную область.",
		"body": [
			"${1:int memory} = allocateMemory(${0:int size})"
		],
		"description": "allocateMemory - Выделяет память и возвращает указатель на выделенную область.\nПринимаемые значения:\nint size количество выделяемой памяти в байтах\n\nВозвращаемые значения:\nint memory указатель на выделенную память\n"
	},
	"freeMemory || Освобождает выделенную память.": {
		"scope": "lua",
		"prefix": "freeMemory || Освобождает выделенную память.",
		"body": [
			"freeMemory(${0:int memory})"
		],
		"description": "freeMemory - Освобождает выделенную память.\nПринимаемые значения:\nint memory указатель на выделенный участок памяти\n\nВозвращаемые значения:\n\n"
	},
	"findFirstFile || Начинает поиск файла по указанной маске.": {
		"scope": "lua",
		"prefix": "findFirstFile || Начинает поиск файла по указанной маске.",
		"body": [
			"${1:Filesearch handle, string name} = findFirstFile(${0:string mask})"
		],
		"description": "findFirstFile - Начинает поиск файла по указанной маске.\nПринимаемые значения:\nstring mask путь и маска названия файла (например, moonloader/*.lua)\n\nВозвращаемые значения:\nFilesearch handle хэндл сессии поиска, string name имя файла\n"
	},
	"findNextFile || Продолжает поиск файла по открытой сессии поиска файлов. Сессия поиска создаётся функцией findFirstFile.": {
		"scope": "lua",
		"prefix": "findNextFile || Продолжает поиск файла по открытой сессии поиска файлов. Сессия поиска создаётся функцией findFirstFile.",
		"body": [
			"${1:string file} = findNextFile(${0:Filesearch handle})"
		],
		"description": "findNextFile - Продолжает поиск файла по открытой сессии поиска файлов. Сессия поиска создаётся функцией findFirstFile.\nПринимаемые значения:\nFilesearch handle сессия поиска\n\nВозвращаемые значения:\nstring file имя файла\n"
	},
	"findClose || Закрывает сессию поиска файлов.": {
		"scope": "lua",
		"prefix": "findClose || Закрывает сессию поиска файлов.",
		"body": [
			"findClose(${0:Filesearch handle})"
		],
		"description": "findClose - Закрывает сессию поиска файлов.\nПринимаемые значения:\nFilesearch handle хэндл сессии поиска\n\nВозвращаемые значения:\n\n"
	},
	"findAllRandomCharsInSphere || Ищет случайного персонажа в заданных координатах в пределах указанного радиуса.": {
		"scope": "lua",
		"prefix": "findAllRandomCharsInSphere || Ищет случайного персонажа в заданных координатах в пределах указанного радиуса.",
		"body": [
			"${1:bool result, Ped ped} = findAllRandomCharsInSphere(${0:float posX, float posY, float posZ, float radius, bool findNext, bool skipDead})"
		],
		"description": "findAllRandomCharsInSphere - Ищет случайного персонажа в заданных координатах в пределах указанного радиуса.\nПринимаемые значения:\nfloat posX ,, float posY ,, float posZ координаты, float radius радиус поиска, bool findNext искать следующего. При значении, false всегда будет возвращать хэндл первого персонажа в пуле, bool skipDead пропускать мёртвых\n\nВозвращаемые значения:\nbool result результат поиска, Ped ped хэндл персонажа\n"
	},
	"findAllRandomVehiclesInSphere || Ищет случайное транспортное средство в заданных координатах в пределах указанного радиуса.": {
		"scope": "lua",
		"prefix": "findAllRandomVehiclesInSphere || Ищет случайное транспортное средство в заданных координатах в пределах указанного радиуса.",
		"body": [
			"${1:bool result, Vehicle car} = findAllRandomVehiclesInSphere(${0:float posX, float posY, float posZ, float radius, bool findNext, bool skipWrecked})"
		],
		"description": "findAllRandomVehiclesInSphere - Ищет случайное транспортное средство в заданных координатах в пределах указанного радиуса.\nПринимаемые значения:\nfloat posX ,, float posY ,, float posZ координаты, float radius радиус поиска, bool findNext искать следующее. При значении, false всегда будет возвращать хэндл первой машины в пуле, bool skipWrecked пропускать взорванные\n\nВозвращаемые значения:\nbool result результат поиска, Vehicle car хэндл транспорта\n"
	},
	"findAllRandomObjectsInSphere || Ищет случайный объект в заданных координатах в пределах указанного радиуса.": {
		"scope": "lua",
		"prefix": "findAllRandomObjectsInSphere || Ищет случайный объект в заданных координатах в пределах указанного радиуса.",
		"body": [
			"${1:bool result, Object object} = findAllRandomObjectsInSphere(${0:float posX, float posY, float posZ, float radius, bool findNext})"
		],
		"description": "findAllRandomObjectsInSphere - Ищет случайный объект в заданных координатах в пределах указанного радиуса.\nПринимаемые значения:\nfloat posX ,, float posY ,, float posZ координаты, float radius радиус поиска, bool findNext искать следующий. При значении, false всегда будет возвращать хэндл первого объекта в пуле\n\nВозвращаемые значения:\nbool result результат поиска, Object object хэндл объекта\n"
	},
	"getCharPointer || Возвращает указатель на объект класса CPed по хэндлу персонажа.": {
		"scope": "lua",
		"prefix": "getCharPointer || Возвращает указатель на объект класса CPed по хэндлу персонажа.",
		"body": [
			"${1:int ptr} = getCharPointer(${0:Ped ped})"
		],
		"description": "getCharPointer - Возвращает указатель на объект класса CPed по хэндлу персонажа.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nint ptr указатель\n"
	},
	"getCarPointer || Возвращает указатель на объект класса CVehicle по хэндлу транспортного средства.": {
		"scope": "lua",
		"prefix": "getCarPointer || Возвращает указатель на объект класса CVehicle по хэндлу транспортного средства.",
		"body": [
			"${1:int ptr} = getCarPointer(${0:Vehicle car})"
		],
		"description": "getCarPointer - Возвращает указатель на объект класса CVehicle по хэндлу транспортного средства.\nПринимаемые значения:\nVehicle car хэндл транспорта\n\nВозвращаемые значения:\nint ptr указатель\n"
	},
	"getObjectPointer || Возвращает указатель на экземпляр класса CObject по хэндлу объекта.": {
		"scope": "lua",
		"prefix": "getObjectPointer || Возвращает указатель на экземпляр класса CObject по хэндлу объекта.",
		"body": [
			"${1:int struct} = getObjectPointer(${0:Object object})"
		],
		"description": "getObjectPointer - Возвращает указатель на экземпляр класса CObject по хэндлу объекта.\nПринимаемые значения:\nObject object хэндл объекта\n\nВозвращаемые значения:\nint struct указатель\n"
	},
	"callFunction || Производит вызов функцию по адресу. Все аргументы функции передаются после параметра int pop., Значения, занесённые в таблицу, будут переданы по указателю., Использование в критичных для производительности местах не рекомендуется, в таких случаях вместо этой функции лучше использовать FFI.": {
		"scope": "lua",
		"prefix": "callFunction || Производит вызов функцию по адресу. Все аргументы функции передаются после параметра int pop., Значения, занесённые в таблицу, будут переданы по указателю., Использование в критичных для производительности местах не рекомендуется, в таких случаях вместо этой функции лучше использовать FFI.",
		"body": [
			"${1:int returnValue} = callFunction(${0:int address, int params, int pop, ...})"
		],
		"description": "callFunction - Производит вызов функцию по адресу. Все аргументы функции передаются после параметра int pop., Значения, занесённые в таблицу, будут переданы по указателю., Использование в критичных для производительности местах не рекомендуется, в таких случаях вместо этой функции лучше использовать FFI.\nПринимаемые значения:\nint address адрес функции, int params количество параметров, int pop выравнивание стека (количество аргументов либо 0, в зависимости от вида функции), ... аргументы\n\nВозвращаемые значения:\nint returnValue возвращаемое значение функции\n"
	},
	"callMethod || Производит вызов метода класса по адресу. Все аргументы функции передаются после параметра int pop., Значения, занесённые в таблицу, будут переданы по указателю., Использование в критичных для производительности местах не рекомендуется, в таких случаях вместо этой функции лучше использовать FFI.": {
		"scope": "lua",
		"prefix": "callMethod || Производит вызов метода класса по адресу. Все аргументы функции передаются после параметра int pop., Значения, занесённые в таблицу, будут переданы по указателю., Использование в критичных для производительности местах не рекомендуется, в таких случаях вместо этой функции лучше использовать FFI.",
		"body": [
			"${1:int returnValue} = callMethod(${0:int address, int struct, int params, int pop, ...})"
		],
		"description": "callMethod - Производит вызов метода класса по адресу. Все аргументы функции передаются после параметра int pop., Значения, занесённые в таблицу, будут переданы по указателю., Использование в критичных для производительности местах не рекомендуется, в таких случаях вместо этой функции лучше использовать FFI.\nПринимаемые значения:\nint address адрес функции, int struct указатель на объект, int params количество параметров, int pop выравнивание стека (количество аргументов либо 0, в зависимости от вида функции), ... аргументы\n\nВозвращаемые значения:\nint returnValue возвращаемое значение функции\n"
	},
	"storeClosestEntities || Возвращает хэндлы ближайшего транспорта и персонажа к другому персонажу.": {
		"scope": "lua",
		"prefix": "storeClosestEntities || Возвращает хэндлы ближайшего транспорта и персонажа к другому персонажу.",
		"body": [
			"${1:Vehicle car, Ped ped} = storeClosestEntities(${0:Ped ped})"
		],
		"description": "storeClosestEntities - Возвращает хэндлы ближайшего транспорта и персонажа к другому персонажу.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nVehicle car хэндл ближайшего ТС, Ped ped хэндл ближайшего персонажа\n"
	},
	"switchCarEngine || Задаёт статус двигателя автомобиля.": {
		"scope": "lua",
		"prefix": "switchCarEngine || Задаёт статус двигателя автомобиля.",
		"body": [
			"switchCarEngine(${0:Vehicle car, bool state})"
		],
		"description": "switchCarEngine - Задаёт статус двигателя автомобиля.\nПринимаемые значения:\nVehicle car хэндл машины, bool state статус двигателя\n\nВозвращаемые значения:\n\n"
	},
	"getTargetBlipCoordinates || Проверяет существует ли пользовательская метка на карте и возвращает ее координаты.": {
		"scope": "lua",
		"prefix": "getTargetBlipCoordinates || Проверяет существует ли пользовательская метка на карте и возвращает ее координаты.",
		"body": [
			"${1:bool result, float posX, float posY, float posZ} = getTargetBlipCoordinates(${0:})"
		],
		"description": "getTargetBlipCoordinates - Проверяет существует ли пользовательская метка на карте и возвращает ее координаты.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат проверки, float posX ,, float posY ,, float posZ координаты метки\n"
	},
	"getCarNumberOfGears || Возвращает количество передач автомобиля.": {
		"scope": "lua",
		"prefix": "getCarNumberOfGears || Возвращает количество передач автомобиля.",
		"body": [
			"${1:int gears} = getCarNumberOfGears(${0:Vehicle car})"
		],
		"description": "getCarNumberOfGears - Возвращает количество передач автомобиля.\nПринимаемые значения:\nVehicle car хэндл автомобиля\n\nВозвращаемые значения:\nint gears количество передач\n"
	},
	"getCarCurrentGear || Возвращает текущую передачу автомобиля.": {
		"scope": "lua",
		"prefix": "getCarCurrentGear || Возвращает текущую передачу автомобиля.",
		"body": [
			"${1:int gear} = getCarCurrentGear(${0:Vehicle car})"
		],
		"description": "getCarCurrentGear - Возвращает текущую передачу автомобиля.\nПринимаемые значения:\nVehicle car хэндл автомобиля\n\nВозвращаемые значения:\nint gear передача\n"
	},
	"isCarSirenOn || Проверяет включена ли сирена.": {
		"scope": "lua",
		"prefix": "isCarSirenOn || Проверяет включена ли сирена.",
		"body": [
			"${1:bool state} = isCarSirenOn(${0:Vehicle car})"
		],
		"description": "isCarSirenOn - Проверяет включена ли сирена.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nbool state статус сирены\n"
	},
	"isCarEngineOn || Проверяет заведен ли двигатель машины.": {
		"scope": "lua",
		"prefix": "isCarEngineOn || Проверяет заведен ли двигатель машины.",
		"body": [
			"${1:bool state} = isCarEngineOn(${0:Vehicle car})"
		],
		"description": "isCarEngineOn - Проверяет заведен ли двигатель машины.\nПринимаемые значения:\nVehicle car хендл машины\n\nВозвращаемые значения:\nbool state статус двигателя\n"
	},
	"printHelpString || Выводит в левом верхнем углу панель с текстом на короткое время (как при активации чит-кодов).": {
		"scope": "lua",
		"prefix": "printHelpString || Выводит в левом верхнем углу панель с текстом на короткое время (как при активации чит-кодов).",
		"body": [
			"printHelpString(${0:string text})"
		],
		"description": "printHelpString - Выводит в левом верхнем углу панель с текстом на короткое время (как при активации чит-кодов).\nПринимаемые значения:\nstring text текст (на русском может не выводиться)\n\nВозвращаемые значения:\n\n"
	},
	"printStyledString || Выводит стилизованный текст на определённое время.": {
		"scope": "lua",
		"prefix": "printStyledString || Выводит стилизованный текст на определённое время.",
		"body": [
			"printStyledString(${0:string text, int time, int style})"
		],
		"description": "printStyledString - Выводит стилизованный текст на определённое время.\nПринимаемые значения:\nstring text текст, int time время в миллисекундах, int style стиль (1-7)\n\nВозвращаемые значения:\n\n"
	},
	"printString || Выводит текст в нижней части экрана, добавляя его в очередь, если на момент вызова выводится другой текст.": {
		"scope": "lua",
		"prefix": "printString || Выводит текст в нижней части экрана, добавляя его в очередь, если на момент вызова выводится другой текст.",
		"body": [
			"printString(${0:string text, int time})"
		],
		"description": "printString - Выводит текст в нижней части экрана, добавляя его в очередь, если на момент вызова выводится другой текст.\nПринимаемые значения:\nstring text текст, int time время отображения текста в миллисекундах\n\nВозвращаемые значения:\n\n"
	},
	"printStringNow || Выводит текст в нижней части экрана, минуя очередь.": {
		"scope": "lua",
		"prefix": "printStringNow || Выводит текст в нижней части экрана, минуя очередь.",
		"body": [
			"printStringNow(${0:string text, int time})"
		],
		"description": "printStringNow - Выводит текст в нижней части экрана, минуя очередь.\nПринимаемые значения:\nstring text текст, int time время показа текста\n\nВозвращаемые значения:\n\n"
	},
	"getCharPlayerIsTargeting || Проверяет, целится ли игрок в другого персонажа, и возвращает его хэндл.": {
		"scope": "lua",
		"prefix": "getCharPlayerIsTargeting || Проверяет, целится ли игрок в другого персонажа, и возвращает его хэндл.",
		"body": [
			"${1:bool result, Ped ped} = getCharPlayerIsTargeting(${0:Player player})"
		],
		"description": "getCharPlayerIsTargeting - Проверяет, целится ли игрок в другого персонажа, и возвращает его хэндл.\nПринимаемые значения:\nPlayer player хэндл игрока\n\nВозвращаемые значения:\nbool result результат проверки, Ped ped хэндл персонажа\n"
	},
	"getNameOfVehicleModel || Возвращает сокращенное название модели машины.": {
		"scope": "lua",
		"prefix": "getNameOfVehicleModel || Возвращает сокращенное название модели машины.",
		"body": [
			"${1:GxtString name} = getNameOfVehicleModel(${0:Model model})"
		],
		"description": "getNameOfVehicleModel - Возвращает сокращенное название модели машины.\nПринимаемые значения:\nModel model модель машины\n\nВозвращаемые значения:\nGxtString name название модели (до 7 символов)\n"
	},
	"testCheat || Проверяет был ли введён указанный текст на клавиатуре.": {
		"scope": "lua",
		"prefix": "testCheat || Проверяет был ли введён указанный текст на клавиатуре.",
		"body": [
			"${1:bool result} = testCheat(${0:string text})"
		],
		"description": "testCheat - Проверяет был ли введён указанный текст на клавиатуре.\nПринимаемые значения:\nstring text текст\n\nВозвращаемые значения:\nbool result статус\n"
	},
	"spawnVehicleByCheating || Создаёт транспорт перед игроком. Нет необходимости загружать модель самостоятельно.": {
		"scope": "lua",
		"prefix": "spawnVehicleByCheating || Создаёт транспорт перед игроком. Нет необходимости загружать модель самостоятельно.",
		"body": [
			"${1:bool result} = spawnVehicleByCheating(${0:Model model})"
		],
		"description": "spawnVehicleByCheating - Создаёт транспорт перед игроком. Нет необходимости загружать модель самостоятельно.\nПринимаемые значения:\nModel model модель транспортного средства\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"getCharPointerHandle || Возвращает хэндл персонажа по указателю на экземляр класса CPed.": {
		"scope": "lua",
		"prefix": "getCharPointerHandle || Возвращает хэндл персонажа по указателю на экземляр класса CPed.",
		"body": [
			"${1:Ped handle} = getCharPointerHandle(${0:int ptr})"
		],
		"description": "getCharPointerHandle - Возвращает хэндл персонажа по указателю на экземляр класса CPed.\nПринимаемые значения:\nint ptr указатель\n\nВозвращаемые значения:\nPed handle хэндл персонажа\n"
	},
	"getVehiclePointerHandle || Возвращает хэндл транспортного средства по указателю на экземляр класса CVehicle.": {
		"scope": "lua",
		"prefix": "getVehiclePointerHandle || Возвращает хэндл транспортного средства по указателю на экземляр класса CVehicle.",
		"body": [
			"${1:Vehicle handle} = getVehiclePointerHandle(${0:int ptr})"
		],
		"description": "getVehiclePointerHandle - Возвращает хэндл транспортного средства по указателю на экземляр класса CVehicle.\nПринимаемые значения:\nint ptr указатель\n\nВозвращаемые значения:\nVehicle handle хэндл транспорта\n"
	},
	"getObjectPointerHandle || Возвращает хэндл объект по указателю на экземляр класса CObject.": {
		"scope": "lua",
		"prefix": "getObjectPointerHandle || Возвращает хэндл объект по указателю на экземляр класса CObject.",
		"body": [
			"${1:Object handle} = getObjectPointerHandle(${0:int ptr})"
		],
		"description": "getObjectPointerHandle - Возвращает хэндл объект по указателю на экземляр класса CObject.\nПринимаемые значения:\nint ptr указатель\n\nВозвращаемые значения:\nObject handle хэндл объекта\n"
	},
	"processLineOfSight || Ищет точку соприкосновения в трёхмерном пространстве между двумя координатами, по направлению прямой из позиции origin к target. Имеет флаги, определяющие, какие типы объектов нужно проверять на столкновение., Возвращает таблицу с информацией о точке соприкосновения.": {
		"scope": "lua",
		"prefix": "processLineOfSight || Ищет точку соприкосновения в трёхмерном пространстве между двумя координатами, по направлению прямой из позиции origin к target. Имеет флаги, определяющие, какие типы объектов нужно проверять на столкновение., Возвращает таблицу с информацией о точке соприкосновения.",
		"body": [
			"${1:bool result, table colPoint} = processLineOfSight(${0:float originX, float originY, float originZ, float targetX, float targetY, float targetZ, [bool checkSolid=true], [bool car=false], [bool ped=false], [bool object=false], [bool particle=false], [bool seeThrough=false], [bool ignoreSomeObjects=false], [bool shotThrough=false]})"
		],
		"description": "processLineOfSight - Ищет точку соприкосновения в трёхмерном пространстве между двумя координатами, по направлению прямой из позиции origin к target. Имеет флаги, определяющие, какие типы объектов нужно проверять на столкновение., Возвращает таблицу с информацией о точке соприкосновения.\nПринимаемые значения:\nfloat originX, float originY, float originZ начальная позиция, float targetX, float targetY, float targetZ конечная позиция, bool checkSolid статичные объекты (напр. любые постройки), bool car транспорт, bool ped персонажи, bool object динамические объекты, bool particle визуальные эффекты, bool seeThrough учитывать прозрачные объекты, bool ignoreSomeObjects игнорировать некоторые динамические объекты, bool shotThrough учитывать объекты, простреливаемые насквозь\n\nВозвращаемые значения:\nbool result результат выполнения, table colPoint информация о точке соприкосновения, float pos[1], float pos[2], float pos[3] | позиция точки соприкосновения XYZ |, float normal[1], float normal[2], float normal[3] | вектор нормали к поверхности соприкосновения |, int surfaceType[1], int surfaceType[2] | типы поверхности |, int pieceType[1], int pieceType[2] | типы детали |, float depth | какая-то глубина чего-то |, int entity | указатель на объект сущности, с которой произошло столкновение |, int entityType | тип сущности |\n"
	},
	"setClipboardText || Записывает текст в буфер обмена Windows.": {
		"scope": "lua",
		"prefix": "setClipboardText || Записывает текст в буфер обмена Windows.",
		"body": [
			"${1:bool result} = setClipboardText(${0:string text})"
		],
		"description": "setClipboardText - Записывает текст в буфер обмена Windows.\nПринимаемые значения:\nstring text текст\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"getClipboardText || Читает текст из буфера обмена Windows.": {
		"scope": "lua",
		"prefix": "getClipboardText || Читает текст из буфера обмена Windows.",
		"body": [
			"${1:string text} = getClipboardText(${0:})"
		],
		"description": "getClipboardText - Читает текст из буфера обмена Windows.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nstring text текст\n"
	},
	"getStructElement || Читает значение целого из памяти по адресу и указанному оффсету размером от 1-го до 4-х байт., Для чтения числа с плавающей точкой используйте getStructFloatElement либо representIntAsFloat.": {
		"scope": "lua",
		"prefix": "getStructElement || Читает значение целого из памяти по адресу и указанному оффсету размером от 1-го до 4-х байт., Для чтения числа с плавающей точкой используйте getStructFloatElement либо representIntAsFloat.",
		"body": [
			"${1:int value} = getStructElement(${0:int struct, int offset, int size, [bool unprotect=false]})"
		],
		"description": "getStructElement - Читает значение целого из памяти по адресу и указанному оффсету размером от 1-го до 4-х байт., Для чтения числа с плавающей точкой используйте getStructFloatElement либо representIntAsFloat.\nПринимаемые значения:\nint struct указатель на начало структуры, int offset оффсет, int size размер, bool unprotect снять защиту памяти\n\nВозвращаемые значения:\nint value значение\n"
	},
	"setStructElement || Записывает значение целого в память по адресу и указанному оффсету размером от 1-го до 4-х байт., Для записи числа с плавающей точкой используйте setStructFloatElement либо representFloatAsInt.": {
		"scope": "lua",
		"prefix": "setStructElement || Записывает значение целого в память по адресу и указанному оффсету размером от 1-го до 4-х байт., Для записи числа с плавающей точкой используйте setStructFloatElement либо representFloatAsInt.",
		"body": [
			"setStructElement(${0:int struct, int offset, int size, int value, [bool unprotect=false]})"
		],
		"description": "setStructElement - Записывает значение целого в память по адресу и указанному оффсету размером от 1-го до 4-х байт., Для записи числа с плавающей точкой используйте setStructFloatElement либо representFloatAsInt.\nПринимаемые значения:\nint struct указатель на структуру, int offset оффсет, int size размер, int value значение, bool unprotect снять защиту памяти\n\nВозвращаемые значения:\n\n"
	},
	"convertMatrixToQuaternion || Создаёт кватернион из матрицы вращения.": {
		"scope": "lua",
		"prefix": "convertMatrixToQuaternion || Создаёт кватернион из матрицы вращения.",
		"body": [
			"${1:float w, float x, float y, float z} = convertMatrixToQuaternion(${0:float rightX, float rightY, float rightZ, float frontX, float frontY, float frontZ, float upX, float upY, float upZ})"
		],
		"description": "convertMatrixToQuaternion - Создаёт кватернион из матрицы вращения.\nПринимаемые значения:\nfloat rightX ,, float rightY ,, float rightZ pitch, float frontX ,, float frontY ,, float frontZ roll, float upX ,, float upY ,, float upZ yaw\n\nВозвращаемые значения:\nfloat w ,, float x ,, float y ,, float z кватернион\n"
	},
	"convertQuaternionToMatrix || Создаёт матрицу вращения из кватерниона.": {
		"scope": "lua",
		"prefix": "convertQuaternionToMatrix || Создаёт матрицу вращения из кватерниона.",
		"body": [
			"${1:float rightX, float rightY, float rightZ, float frontX, float frontY, float frontZ, float upX, float upY, float upZ} = convertQuaternionToMatrix(${0:float w, float x, float y, float z})"
		],
		"description": "convertQuaternionToMatrix - Создаёт матрицу вращения из кватерниона.\nПринимаемые значения:\nfloat w ,, float x ,, float y ,, float z кватернион\n\nВозвращаемые значения:\nfloat rightX ,, float rightY ,, float rightZ pitch, float frontX ,, float frontY ,, float frontZ roll, float upX ,, float upY ,, float upZ yaw\n"
	},
	"convert3DCoordsToScreen || Конвертирует игровые 3D координаты в экранные.": {
		"scope": "lua",
		"prefix": "convert3DCoordsToScreen || Конвертирует игровые 3D координаты в экранные.",
		"body": [
			"${1:float wposX, float wposY} = convert3DCoordsToScreen(${0:float posX, float posY, float posZ})"
		],
		"description": "convert3DCoordsToScreen - Конвертирует игровые 3D координаты в экранные.\nПринимаемые значения:\nfloat posX ,, float posY ,, float posZ игровые 3D координаты\n\nВозвращаемые значения:\nfloat wposX ,, float wposY экранные координаты\n"
	},
	"setGameKeyState || Устанавливает статус нажатия игровой клавиши.": {
		"scope": "lua",
		"prefix": "setGameKeyState || Устанавливает статус нажатия игровой клавиши.",
		"body": [
			"setGameKeyState(${0:int key, int state})"
		],
		"description": "setGameKeyState - Устанавливает статус нажатия игровой клавиши.\nПринимаемые значения:\nint key индекс клавиши (также указаны в библиотеке, game.keys ), int state статус(-32768 до 32767), GOLEFT_GORIGHT ,, GOFORWARD_GOBACK ,, ANSWERPHONE_FIREWEAPONALT ,, LOOKBEHIND_LOOKRIGHT и подобных.\n\nВозвращаемые значения:\n\n"
	},
	"getCursorPos || Возвращает позицию курсора.": {
		"scope": "lua",
		"prefix": "getCursorPos || Возвращает позицию курсора.",
		"body": [
			"${1:int posX, int posY} = getCursorPos(${0:})"
		],
		"description": "getCursorPos - Возвращает позицию курсора.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint posX ,, int posY координаты\n"
	},
	"convertWindowScreenCoordsToGameScreenCoords || Конвертирует пиксельные координаты в игровые экранные координаты.": {
		"scope": "lua",
		"prefix": "convertWindowScreenCoordsToGameScreenCoords || Конвертирует пиксельные координаты в игровые экранные координаты.",
		"body": [
			"${1:float gposX, float gposY} = convertWindowScreenCoordsToGameScreenCoords(${0:float wposX, float wposY})"
		],
		"description": "convertWindowScreenCoordsToGameScreenCoords - Конвертирует пиксельные координаты в игровые экранные координаты.\nПринимаемые значения:\nfloat wposX ,, float wposY пиксельные координаты\n\nВозвращаемые значения:\nfloat gposX ,, float gposY игровые координаты\n"
	},
	"convertGameScreenCoordsToWindowScreenCoords || Конвертирует игровые экранные координаты в пиксельные.": {
		"scope": "lua",
		"prefix": "convertGameScreenCoordsToWindowScreenCoords || Конвертирует игровые экранные координаты в пиксельные.",
		"body": [
			"${1:float wposX, float wposY} = convertGameScreenCoordsToWindowScreenCoords(${0:float gposX, float gposY})"
		],
		"description": "convertGameScreenCoordsToWindowScreenCoords - Конвертирует игровые экранные координаты в пиксельные.\nПринимаемые значения:\nfloat gposX ,, float gposY игровые координаты\n\nВозвращаемые значения:\nfloat wposX ,, float wposY пиксельные координаты\n"
	},
	"convertScreenCoordsToWorld3D || Создаёт точку в 3D-пространстве игры из экранных координат и указанной глубины.": {
		"scope": "lua",
		"prefix": "convertScreenCoordsToWorld3D || Создаёт точку в 3D-пространстве игры из экранных координат и указанной глубины.",
		"body": [
			"${1:float posX, float posY, float posZ} = convertScreenCoordsToWorld3D(${0:float posX, float posY, float depth})"
		],
		"description": "convertScreenCoordsToWorld3D - Создаёт точку в 3D-пространстве игры из экранных координат и указанной глубины.\nПринимаемые значения:\nfloat posX ,, float posY экранные координаты, float depth глубина\n\nВозвращаемые значения:\nfloat posX ,, float posY ,, float posZ координаты точки в мире\n"
	},
	"getModuleHandle || Возвращает адрес DLL-модуля по названию.": {
		"scope": "lua",
		"prefix": "getModuleHandle || Возвращает адрес DLL-модуля по названию.",
		"body": [
			"${1:int handle} = getModuleHandle(${0:string module})"
		],
		"description": "getModuleHandle - Возвращает адрес DLL-модуля по названию.\nПринимаемые значения:\nstring module название\n\nВозвращаемые значения:\nint handle адрес\n"
	},
	"getModuleProcAddress || Получает адрес экспортируемой процедуры по названию модуля и процедуры.": {
		"scope": "lua",
		"prefix": "getModuleProcAddress || Получает адрес экспортируемой процедуры по названию модуля и процедуры.",
		"body": [
			"${1:int address} = getModuleProcAddress(${0:string module, string proc})"
		],
		"description": "getModuleProcAddress - Получает адрес экспортируемой процедуры по названию модуля и процедуры.\nПринимаемые значения:\nstring module название модуля, string proc название процедуры\n\nВозвращаемые значения:\nint address адрес\n"
	},
	"setVirtualKeyDown || Эмулирует нажатие виртуальной клавиши.": {
		"scope": "lua",
		"prefix": "setVirtualKeyDown || Эмулирует нажатие виртуальной клавиши.",
		"body": [
			"setVirtualKeyDown(${0:int vkey, bool down})"
		],
		"description": "setVirtualKeyDown - Эмулирует нажатие виртуальной клавиши.\nПринимаемые значения:\nint vkey ID клавиши, bool down статус нажатия: true - нажата, false - отпущена\n\nВозвращаемые значения:\n\n"
	},
	"setCharKeyDown || Эмулирует нажатие символьной клавиши.": {
		"scope": "lua",
		"prefix": "setCharKeyDown || Эмулирует нажатие символьной клавиши.",
		"body": [
			"setCharKeyDown(${0:int ckey, bool down})"
		],
		"description": "setCharKeyDown - Эмулирует нажатие символьной клавиши.\nПринимаемые значения:\nint ckey ID символа, bool down статус нажатия: true - нажата, false - отпущена\n\nВозвращаемые значения:\n\n"
	},
	"isKeyJustPressed || Проверяет была ли клавиша нажата. Псевдоним функции wasKeyPressed.": {
		"scope": "lua",
		"prefix": "isKeyJustPressed || Проверяет была ли клавиша нажата. Псевдоним функции wasKeyPressed.",
		"body": [
			"${1:bool state} = isKeyJustPressed(${0:int key})"
		],
		"description": "isKeyJustPressed - Проверяет была ли клавиша нажата. Псевдоним функции wasKeyPressed.\nПринимаемые значения:\nint key ID клавиши\n\nВозвращаемые значения:\nbool state результат проверки\n"
	},
	"convert3DCoordsToScreenEx || Конвертирует мировые 3D-координаты в экранные. Расширенный вариант функции convert3DCoordsToScreen,, имеет дополнительные аргументы и возвращаемые значения.": {
		"scope": "lua",
		"prefix": "convert3DCoordsToScreenEx || Конвертирует мировые 3D-координаты в экранные. Расширенный вариант функции convert3DCoordsToScreen,, имеет дополнительные аргументы и возвращаемые значения.",
		"body": [
			"${1:bool result, float x, float y, float z, float w, float h} = convert3DCoordsToScreenEx(${0:float posX, float posY, float posZ, [bool checkMin=false], [bool checkMax=false]})"
		],
		"description": "convert3DCoordsToScreenEx - Конвертирует мировые 3D-координаты в экранные. Расширенный вариант функции convert3DCoordsToScreen,, имеет дополнительные аргументы и возвращаемые значения.\nПринимаемые значения:\nfloat posX ,, float posY ,, float posZ - мировые координаты, bool checkMin проверять минимальное расстояние до камеры. false, если не задано, bool checkMax проверять максимальное расстояние до камеры. false, если не задано\n\nВозвращаемые значения:\nbool result результат преобразования, float x ,, float y экранные координаты в пикселях, float z ,, float w ,, float h неизвестно\n"
	},
	"getStructFloatElement || Читает число с плавающей точкой из памяти по адресу и указанному оффсету размером в 4 байта., Для чтения целого используйте функцию getStructElement.": {
		"scope": "lua",
		"prefix": "getStructFloatElement || Читает число с плавающей точкой из памяти по адресу и указанному оффсету размером в 4 байта., Для чтения целого используйте функцию getStructElement.",
		"body": [
			"${1:float value} = getStructFloatElement(${0:int struct, int offset, [bool unprotect=false]})"
		],
		"description": "getStructFloatElement - Читает число с плавающей точкой из памяти по адресу и указанному оффсету размером в 4 байта., Для чтения целого используйте функцию getStructElement.\nПринимаемые значения:\nint struct адрес начала структуры, int offset оффсет, bool unprotect снять защиту памяти\n\nВозвращаемые значения:\nfloat value прочитанное значение\n"
	},
	"setStructFloatElement || Записывает число с плавающей точкой в память по адресу и указанному оффсету., Для записи целого используйте функцию setStructElement.": {
		"scope": "lua",
		"prefix": "setStructFloatElement || Записывает число с плавающей точкой в память по адресу и указанному оффсету., Для записи целого используйте функцию setStructElement.",
		"body": [
			"setStructFloatElement(${0:int struct, int offset, float value, [bool unprotect=false]})"
		],
		"description": "setStructFloatElement - Записывает число с плавающей точкой в память по адресу и указанному оффсету., Для записи целого используйте функцию setStructElement.\nПринимаемые значения:\nint struct адрес начала структуры, int offset оффсет, float value значение, bool unprotect снять защиту памяти\n\nВозвращаемые значения:\n\n"
	},
	"wasKeyPressed || Проверяет была ли клавиша нажата.": {
		"scope": "lua",
		"prefix": "wasKeyPressed || Проверяет была ли клавиша нажата.",
		"body": [
			"${1:bool state} = wasKeyPressed(${0:int key})"
		],
		"description": "wasKeyPressed - Проверяет была ли клавиша нажата.\nПринимаемые значения:\nint key ID клавиши\n\nВозвращаемые значения:\nbool state результат проверки\n"
	},
	"wasKeyReleased || Проверяет была ли клавиша отпущена после нажатия.": {
		"scope": "lua",
		"prefix": "wasKeyReleased || Проверяет была ли клавиша отпущена после нажатия.",
		"body": [
			"${1:bool state} = wasKeyReleased(${0:int key})"
		],
		"description": "wasKeyReleased - Проверяет была ли клавиша отпущена после нажатия.\nПринимаемые значения:\nint key ID клавиши\n\nВозвращаемые значения:\nbool state результат проверки\n"
	},
	"getMousewheelDelta || Получает значение, на сколько делений было прокручено колесо мыши. Значение может быть отрицательным и положительным,, а также нулём, если колесо прокручено не было.": {
		"scope": "lua",
		"prefix": "getMousewheelDelta || Получает значение, на сколько делений было прокручено колесо мыши. Значение может быть отрицательным и положительным,, а также нулём, если колесо прокручено не было.",
		"body": [
			"${1:int delta} = getMousewheelDelta(${0:})"
		],
		"description": "getMousewheelDelta - Получает значение, на сколько делений было прокручено колесо мыши. Значение может быть отрицательным и положительным,, а также нулём, если колесо прокручено не было.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint delta значение прокрутки\n"
	},
	"consumeWindowMessage || Помечает текущее обрабатываемое оконное сообщение для игнорирования., Игнорирование сообщения может быть отменено вызовом функции с параметрами false., Предназначена для использования только изнутри события onWindowMessage.": {
		"scope": "lua",
		"prefix": "consumeWindowMessage || Помечает текущее обрабатываемое оконное сообщение для игнорирования., Игнорирование сообщения может быть отменено вызовом функции с параметрами false., Предназначена для использования только изнутри события onWindowMessage.",
		"body": [
			"consumeWindowMessage(${0:[bool game=true], [bool scripts=true]})"
		],
		"description": "consumeWindowMessage - Помечает текущее обрабатываемое оконное сообщение для игнорирования., Игнорирование сообщения может быть отменено вызовом функции с параметрами false., Предназначена для использования только изнутри события onWindowMessage.\nПринимаемые значения:\nbool game игнорировать сообщение для игры (оно не будет передано игре, но будет передано Lua скриптам), bool scripts игнорировать сообщение для Lua скриптов\n\nВозвращаемые значения:\n\n"
	},
	"isGamePaused || Проверяет, находится ли игра на паузе.": {
		"scope": "lua",
		"prefix": "isGamePaused || Проверяет, находится ли игра на паузе.",
		"body": [
			"${1:bool paused} = isGamePaused(${0:})"
		],
		"description": "isGamePaused - Проверяет, находится ли игра на паузе.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool paused статус\n"
	},
	"gameClock || Возвращает значение игрового таймера в виде дробного в формате 'секунды.миллисекунды'. В отличие от системного таймера os.clock() и функции localClock, этот таймер работает только если игра не находится на паузе.": {
		"scope": "lua",
		"prefix": "gameClock || Возвращает значение игрового таймера в виде дробного в формате 'секунды.миллисекунды'. В отличие от системного таймера os.clock() и функции localClock, этот таймер работает только если игра не находится на паузе.",
		"body": [
			"${1:double time} = gameClock(${0:})"
		],
		"description": "gameClock - Возвращает значение игрового таймера в виде дробного в формате 'секунды.миллисекунды'. В отличие от системного таймера os.clock() и функции localClock, этот таймер работает только если игра не находится на паузе.\nПринимаемые значения:\n\n\nВозвращаемые значения:\ndouble time время\n"
	},
	"script_properties || Функция задаёт различные настройки поведения скрипта. Каждое свойство задаётся исходя из его названия, переданного в виде строки в качестве аргумента функции.": {
		"scope": "lua",
		"prefix": "script_properties || Функция задаёт различные настройки поведения скрипта. Каждое свойство задаётся исходя из его названия, переданного в виде строки в качестве аргумента функции.",
		"body": [
			"script_properties(${0:string property, ...})"
		],
		"description": "script_properties - Функция задаёт различные настройки поведения скрипта. Каждое свойство задаётся исходя из его названия, переданного в виде строки в качестве аргумента функции.\nПринимаемые значения:\nstring property, ... свойства\n\nВозвращаемые значения:\n\n"
	},
	"script_url || Задаёт Web-адрес для скрипта. Адрес может быть любым, как и прямой ссылкой на файл, так и на страницей любого сайта.": {
		"scope": "lua",
		"prefix": "script_url || Задаёт Web-адрес для скрипта. Адрес может быть любым, как и прямой ссылкой на файл, так и на страницей любого сайта.",
		"body": [
			"script_url(${0:string url})"
		],
		"description": "script_url - Задаёт Web-адрес для скрипта. Адрес может быть любым, как и прямой ссылкой на файл, так и на страницей любого сайта.\nПринимаемые значения:\nstring url ссылка\n\nВозвращаемые значения:\n\n"
	},
	"import || Импортирует экспортируемые данные другого скрипта по имени файла, функция загружает скрипт самостоятельно, если он ещё не загружен., Предотвращает повторную загрузку скрипта при стартовой загрузке скриптов из рабочей директории, т.е. функцию можно вызывать и в глобальной области (вне main и потоков), не опасаясь возникновения проблем., При повторном вызове для того же скрипта будет использоваться ранее полученное значение, если скрипт не был перезагружен или выгружен., Возвращает nil и текст ошибки, если попытка импорта завершилась неудачей., Подробнее об экспорте см. на странице Экспорт.": {
		"scope": "lua",
		"prefix": "import || Импортирует экспортируемые данные другого скрипта по имени файла, функция загружает скрипт самостоятельно, если он ещё не загружен., Предотвращает повторную загрузку скрипта при стартовой загрузке скриптов из рабочей директории, т.е. функцию можно вызывать и в глобальной области (вне main и потоков), не опасаясь возникновения проблем., При повторном вызове для того же скрипта будет использоваться ранее полученное значение, если скрипт не был перезагружен или выгружен., Возвращает nil и текст ошибки, если попытка импорта завершилась неудачей., Подробнее об экспорте см. на странице Экспорт.",
		"body": [
			"${1:any imports} = import(${0:string script})"
		],
		"description": "import - Импортирует экспортируемые данные другого скрипта по имени файла, функция загружает скрипт самостоятельно, если он ещё не загружен., Предотвращает повторную загрузку скрипта при стартовой загрузке скриптов из рабочей директории, т.е. функцию можно вызывать и в глобальной области (вне main и потоков), не опасаясь возникновения проблем., При повторном вызове для того же скрипта будет использоваться ранее полученное значение, если скрипт не был перезагружен или выгружен., Возвращает nil и текст ошибки, если попытка импорта завершилась неудачей., Подробнее об экспорте см. на странице Экспорт.\nПринимаемые значения:\nstring script имя файла Lua-скрипта\n\nВозвращаемые значения:\nany imports импортированные данные из другого скрипта, обычно это таблица\n"
	},
	"encodeJson || Преобразует таблицу Lua в JSON-строку.": {
		"scope": "lua",
		"prefix": "encodeJson || Преобразует таблицу Lua в JSON-строку.",
		"body": [
			"${1:string json} = encodeJson(${0:table data})"
		],
		"description": "encodeJson - Преобразует таблицу Lua в JSON-строку.\nПринимаемые значения:\ntable data таблица с данными\n\nВозвращаемые значения:\nstring json строка в формате JSON\n"
	},
	"decodeJson || Преобразует JSON-строку в таблицу Lua.": {
		"scope": "lua",
		"prefix": "decodeJson || Преобразует JSON-строку в таблицу Lua.",
		"body": [
			"${1:table luaData} = decodeJson(${0:string json})"
		],
		"description": "decodeJson - Преобразует JSON-строку в таблицу Lua.\nПринимаемые значения:\nstring json данные JSON в виде строки\n\nВозвращаемые значения:\ntable data результирующая таблица\n"
	},
	"showCursor || Показывает или скрывает системный курсор, блокируя вращение камеры и управление игроком (опционально).": {
		"scope": "lua",
		"prefix": "showCursor || Показывает или скрывает системный курсор, блокируя вращение камеры и управление игроком (опционально).",
		"body": [
			"showCursor(${0:bool show, [bool lockControls=false]})"
		],
		"description": "showCursor - Показывает или скрывает системный курсор, блокируя вращение камеры и управление игроком (опционально).\nПринимаемые значения:\nbool show активировать/деактивировать, bool lockControls заблокировать управление игроком\n\nВозвращаемые значения:\n\n"
	},
	"lockPlayerControl || Блокирует управление игроком.": {
		"scope": "lua",
		"prefix": "lockPlayerControl || Блокирует управление игроком.",
		"body": [
			"lockPlayerControl(${0:bool lock})"
		],
		"description": "lockPlayerControl - Блокирует управление игроком.\nПринимаемые значения:\nbool lock статус блокировки\n\nВозвращаемые значения:\n\n"
	},
	"isPlayerControlLocked || Возвращает статус блокировки управления игроком, заданный функцией lockPlayerControl.": {
		"scope": "lua",
		"prefix": "isPlayerControlLocked || Возвращает статус блокировки управления игроком, заданный функцией lockPlayerControl.",
		"body": [
			"${1:bool locked} = isPlayerControlLocked(${0:})"
		],
		"description": "isPlayerControlLocked - Возвращает статус блокировки управления игроком, заданный функцией lockPlayerControl.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool locked статус блокировки\n"
	},
	"setBlipCoordinates || Перемещает маркер карты в заданные координаты.": {
		"scope": "lua",
		"prefix": "setBlipCoordinates || Перемещает маркер карты в заданные координаты.",
		"body": [
			"${1:bool result} = setBlipCoordinates(${0:Marker blip, float x, float y, float z})"
		],
		"description": "setBlipCoordinates - Перемещает маркер карты в заданные координаты.\nПринимаемые значения:\nMarker blip хэндл маркера, float x ,, float y ,, float z новые координаты\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"setTargetBlipCoordinates || Перемещает маркер пользовательской точки назначения в заданные координаты.": {
		"scope": "lua",
		"prefix": "setTargetBlipCoordinates || Перемещает маркер пользовательской точки назначения в заданные координаты.",
		"body": [
			"${1:bool result} = setTargetBlipCoordinates(${0:float x, float y, float z})"
		],
		"description": "setTargetBlipCoordinates - Перемещает маркер пользовательской точки назначения в заданные координаты.\nПринимаемые значения:\nfloat x ,, float y ,, float z новые координаты\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"placeWaypoint || Устанавливает пользовательскую точку назначения на заданные координаты.": {
		"scope": "lua",
		"prefix": "placeWaypoint || Устанавливает пользовательскую точку назначения на заданные координаты.",
		"body": [
			"${1:bool result} = placeWaypoint(${0:float x, float y, float z})"
		],
		"description": "placeWaypoint - Устанавливает пользовательскую точку назначения на заданные координаты.\nПринимаемые значения:\nfloat x ,, float y ,, float z координаты\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"removeWaypoint || Скрывает иконку пользовательской точки назначения.": {
		"scope": "lua",
		"prefix": "removeWaypoint || Скрывает иконку пользовательской точки назначения.",
		"body": [
			"${1:bool result} = removeWaypoint(${0:})"
		],
		"description": "removeWaypoint - Скрывает иконку пользовательской точки назначения.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"getFolderPath || Получает путь к пользовательской или системной директории по её CSIDL-идентификатору.": {
		"scope": "lua",
		"prefix": "getFolderPath || Получает путь к пользовательской или системной директории по её CSIDL-идентификатору.",
		"body": [
			"${1:string path} = getFolderPath(${0:int csidl})"
		],
		"description": "getFolderPath - Получает путь к пользовательской или системной директории по её CSIDL-идентификатору.\nПринимаемые значения:\nint csidl \n\nВозвращаемые значения:\nstring path путь к директории,, nil при провале\n"
	},
	"getTimeStepValue || Возвращает значение разницы во времени между предыдущим и текущим кадром (но это не точно).": {
		"scope": "lua",
		"prefix": "getTimeStepValue || Возвращает значение разницы во времени между предыдущим и текущим кадром (но это не точно).",
		"body": [
			"${1:float value} = getTimeStepValue(${0:})"
		],
		"description": "getTimeStepValue - Возвращает значение разницы во времени между предыдущим и текущим кадром (но это не точно).\nПринимаемые значения:\n\n\nВозвращаемые значения:\nfloat value значение\n"
	},
	"getD3DDevicePtr || Возвращает указатель на используемый игрой экземпляр класса IDirect3DDevice9.": {
		"scope": "lua",
		"prefix": "getD3DDevicePtr || Возвращает указатель на используемый игрой экземпляр класса IDirect3DDevice9.",
		"body": [
			"${1:uint devicePtr} = getD3DDevicePtr(${0:})"
		],
		"description": "getD3DDevicePtr - Возвращает указатель на используемый игрой экземпляр класса IDirect3DDevice9.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nuint devicePtr указатель\n"
	},
	"getAllObjects || Возвращает массив со всеми созданными динамическими объектами.": {
		"scope": "lua",
		"prefix": "getAllObjects || Возвращает массив со всеми созданными динамическими объектами.",
		"body": [
			"${1:table objects} = getAllObjects(${0:})"
		],
		"description": "getAllObjects - Возвращает массив со всеми созданными динамическими объектами.\nПринимаемые значения:\n\n\nВозвращаемые значения:\ntable objects таблица с хэндлами объектов\n"
	},
	"getAllChars || Возвращает массив с хэндлами всех созданных персонажей, включая персонажа игрока.": {
		"scope": "lua",
		"prefix": "getAllChars || Возвращает массив с хэндлами всех созданных персонажей, включая персонажа игрока.",
		"body": [
			"${1:table peds} = getAllChars(${0:})"
		],
		"description": "getAllChars - Возвращает массив с хэндлами всех созданных персонажей, включая персонажа игрока.\nПринимаемые значения:\n\n\nВозвращаемые значения:\ntable peds таблица с хэндлами персонажей\n"
	},
	"getAllVehicles || Возвращает массив с хэндлами всех созданных транспортных средств, включая транспорт, в котором находится игрок.": {
		"scope": "lua",
		"prefix": "getAllVehicles || Возвращает массив с хэндлами всех созданных транспортных средств, включая транспорт, в котором находится игрок.",
		"body": [
			"${1:table vehicles} = getAllVehicles(${0:})"
		],
		"description": "getAllVehicles - Возвращает массив с хэндлами всех созданных транспортных средств, включая транспорт, в котором находится игрок.\nПринимаемые значения:\n\n\nВозвращаемые значения:\ntable vehicles таблица с хэндлами транспортных средств\n"
	},
	"getGameGlobalFloat || Возвращает значение глобальной скриптовой переменной числа с плавающей точкой": {
		"scope": "lua",
		"prefix": "getGameGlobalFloat || Возвращает значение глобальной скриптовой переменной числа с плавающей точкой",
		"body": [
			"${1:float value} = getGameGlobalFloat(${0:int index})"
		],
		"description": "getGameGlobalFloat - Возвращает значение глобальной скриптовой переменной числа с плавающей точкой\nПринимаемые значения:\nint index индекс переменной\n\nВозвращаемые значения:\nfloat value значение\n"
	},
	"setGameGlobalFloat || Задаёт новое значение глобальной скриптовой переменной числа с плавающей точкой": {
		"scope": "lua",
		"prefix": "setGameGlobalFloat || Задаёт новое значение глобальной скриптовой переменной числа с плавающей точкой",
		"body": [
			"setGameGlobalFloat(${0:int index, float value})"
		],
		"description": "setGameGlobalFloat - Задаёт новое значение глобальной скриптовой переменной числа с плавающей точкой\nПринимаемые значения:\nint index индекс переменной, float value новое значение\n\nВозвращаемые значения:\n\n"
	},
	"script.load || Загружает скрипт из файла и возвращает объект LuaScript., Функция пытается загрузить скрипт в следующем порядке путей: рабочая директория + путь -> рабочая директория + путь + .lua(c) -> абсолютный путь -> абсолютный путь + .lua(c)., Возвращает nil, если скрипт не был загружен.": {
		"scope": "lua",
		"prefix": "script.load || Загружает скрипт из файла и возвращает объект LuaScript., Функция пытается загрузить скрипт в следующем порядке путей: рабочая директория + путь -> рабочая директория + путь + .lua(c) -> абсолютный путь -> абсолютный путь + .lua(c)., Возвращает nil, если скрипт не был загружен.",
		"body": [
			"${1:LuaScript s} = script.load(${0:string file})"
		],
		"description": "script.load - Загружает скрипт из файла и возвращает объект LuaScript., Функция пытается загрузить скрипт в следующем порядке путей: рабочая директория + путь -> рабочая директория + путь + .lua(c) -> абсолютный путь -> абсолютный путь + .lua(c)., Возвращает nil, если скрипт не был загружен.\nПринимаемые значения:\nstring file путь к файлу\n\nВозвращаемые значения:\nLuaScript s скрипт\n"
	},
	"script.find || Ищет загруженный скрипт по имени. Возвращает объект LuaScript, если скрипт найден, в противном случае возвращает nil.": {
		"scope": "lua",
		"prefix": "script.find || Ищет загруженный скрипт по имени. Возвращает объект LuaScript, если скрипт найден, в противном случае возвращает nil.",
		"body": [
			"${1:LuaScript s} = script.find(${0:string name})"
		],
		"description": "script.find - Ищет загруженный скрипт по имени. Возвращает объект LuaScript, если скрипт найден, в противном случае возвращает nil.\nПринимаемые значения:\nstring name название скрипта\n\nВозвращаемые значения:\nLuaScript s скрипт\n"
	},
	"script.list || Возвращает массив загруженных скриптов.": {
		"scope": "lua",
		"prefix": "script.list || Возвращает массив загруженных скриптов.",
		"body": [
			"${1:table list} = script.list(${0:})"
		],
		"description": "script.list - Возвращает массив загруженных скриптов.\nПринимаемые значения:\n\n\nВозвращаемые значения:\ntable list массив\n"
	},
	"script.get || Получает загруженный скрипт по его уникальному идентификатору и возвращает объект LuaScript., Возвращает nil, если скрипта с таким идентификатором нет.": {
		"scope": "lua",
		"prefix": "script.get || Получает загруженный скрипт по его уникальному идентификатору и возвращает объект LuaScript., Возвращает nil, если скрипта с таким идентификатором нет.",
		"body": [
			"${1:LuaScript s} = script.get(${0:int id})"
		],
		"description": "script.get - Получает загруженный скрипт по его уникальному идентификатору и возвращает объект LuaScript., Возвращает nil, если скрипта с таким идентификатором нет.\nПринимаемые значения:\nint id идентификатор скрипта\n\nВозвращаемые значения:\nLuaScript s скрипт\n"
	},
	"{FUNCTION} || Статическое свойство. Возвращает объект LuaScript текущего скрипта. Является аналогом функции thisScript.": {
		"scope": "lua",
		"prefix": "{FUNCTION} || Статическое свойство. Возвращает объект LuaScript текущего скрипта. Является аналогом функции thisScript.",
		"body": [
			"${1:LuaScript s} = (${0:})"
		],
		"description": "{FUNCTION} - Статическое свойство. Возвращает объект LuaScript текущего скрипта. Является аналогом функции thisScript.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nLuaScript s текущий скрипт\n"
	},
	"shakeCam || Создаёт эффект «тряски» камеры.": {
		"scope": "lua",
		"prefix": "shakeCam || Создаёт эффект «тряски» камеры.",
		"body": [
			"shakeCam(${0:int shake})"
		],
		"description": "shakeCam - Создаёт эффект «тряски» камеры.\nПринимаемые значения:\nint shake значение амплитуды\n\nВозвращаемые значения:\n\n"
	},
	"createPlayer || Создаёт (спавнит) модель игрока в игровом мире.": {
		"scope": "lua",
		"prefix": "createPlayer || Создаёт (спавнит) модель игрока в игровом мире.",
		"body": [
			"${1:Player player} = createPlayer(${0:Model modelId, float atX, float atY, float atZ})"
		],
		"description": "createPlayer - Создаёт (спавнит) модель игрока в игровом мире.\nПринимаемые значения:\nint modelId ИД модели, float atX X-координата, float atY Y-координата, float atZ Z-координата\n\nВозвращаемые значения:\nhandle Player хендл игрока\\\\\n"
	},
	"createChar || Создает персонажа в заданных координатах с указанной моделью и поведением пешехода. Хэндл персонажа записывается в указанную переменную.": {
		"scope": "lua",
		"prefix": "createChar || Создает персонажа в заданных координатах с указанной моделью и поведением пешехода. Хэндл персонажа записывается в указанную переменную.",
		"body": [
			"${1:Ped ped} = createChar(${0:int pedtype, Model modelId, float atX, float atY, float atZ})"
		],
		"description": "createChar - Создает персонажа в заданных координатах с указанной моделью и поведением пешехода. Хэндл персонажа записывается в указанную переменную.\nПринимаемые значения:\nint pedtype тип пешехода., Model modelId модель персонажа., float atX, float atY, float atZ координаты персонажа (XYZ).\n\nВозвращаемые значения:\nPed ped хэндл персонажа.\n"
	},
	"deleteChar || Удаляет персонажа.": {
		"scope": "lua",
		"prefix": "deleteChar || Удаляет персонажа.",
		"body": [
			"deleteChar(${0:Ped ped})"
		],
		"description": "deleteChar - Удаляет персонажа.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\n\n"
	},
	"getCharCoordinates || Получает координаты актера.": {
		"scope": "lua",
		"prefix": "getCharCoordinates || Получает координаты актера.",
		"body": [
			"${1:float positionX, float positionY, float positionZ} = getCharCoordinates(${0:Ped ped})"
		],
		"description": "getCharCoordinates - Получает координаты актера.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nfloat positionX, float positionY, float positionZ координаты персонажа.(XYZ)\n"
	},
	"setCharCoordinates || Телепортирует определенного персонажа на указанные координаты.": {
		"scope": "lua",
		"prefix": "setCharCoordinates || Телепортирует определенного персонажа на указанные координаты.",
		"body": [
			"setCharCoordinates(${0:Ped ped, float posX, float posY, float posZ})"
		],
		"description": "setCharCoordinates - Телепортирует определенного персонажа на указанные координаты.\nПринимаемые значения:\nPed ped хэндл актера, float posX, float posY, float posZ координаты XYZ\n\nВозвращаемые значения:\n\n"
	},
	"isCharInArea2d || Проверяет, находится ли персонаж в указанной прямоугольной зоне.": {
		"scope": "lua",
		"prefix": "isCharInArea2d || Проверяет, находится ли персонаж в указанной прямоугольной зоне.",
		"body": [
			"${1:bool result} = isCharInArea2d(${0:Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
		],
		"description": "isCharInArea2d - Проверяет, находится ли персонаж в указанной прямоугольной зоне.\nПринимаемые значения:\nPed ped хендл персонажа игрока, float cornerAX первая X координата, float cornerAY первая Y координата, float cornerBX вторая X координата, float cornerBY вторая Y координата, bool sphere поиск в сфере\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isCharInArea3d || Проверяет, находится ли персонаж в указанной кубической зоне.": {
		"scope": "lua",
		"prefix": "isCharInArea3d || Проверяет, находится ли персонаж в указанной кубической зоне.",
		"body": [
			"${1:bool result} = isCharInArea3d(${0:Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere})"
		],
		"description": "isCharInArea3d - Проверяет, находится ли персонаж в указанной кубической зоне.\nПринимаемые значения:\nPed ped хендл персонажа игрока, float cornerAX первая X координата, float cornerAY первая Y координата, float cornerAZ первая Z координата, float cornerBX вторая X координата, float cornerBY вторая Y координата, float cornerBZ вторая Z координата, bool sphere поиск в сфере\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"createCar || Создает транспорт на указанных координатах.": {
		"scope": "lua",
		"prefix": "createCar || Создает транспорт на указанных координатах.",
		"body": [
			"${1:Vehicle car} = createCar(${0:Model modelId, float atX, float atY, float atZ})"
		],
		"description": "createCar - Создает транспорт на указанных координатах.\nПринимаемые значения:\nModel modelId номер модели машины, float atX X координата, float atY Y координата, float atZ Z координата\n\nВозвращаемые значения:\nVehicle car хендл транспорта\n"
	},
	"deleteCar || Удаляет транспорт.": {
		"scope": "lua",
		"prefix": "deleteCar || Удаляет транспорт.",
		"body": [
			"deleteCar(${0:Vehicle car})"
		],
		"description": "deleteCar - Удаляет транспорт.\nПринимаемые значения:\nVehicle car Хендл транспорта\\\\\n\nВозвращаемые значения:\n\n"
	},
	"carWanderRandomly || Устанавливает машине сумасшедшее вождение": {
		"scope": "lua",
		"prefix": "carWanderRandomly || Устанавливает машине сумасшедшее вождение",
		"body": [
			"carWanderRandomly(${0:Vehicle car})"
		],
		"description": "carWanderRandomly - Устанавливает машине сумасшедшее вождение\nПринимаемые значения:\nVehicle car хэндл автомобиля\n\nВозвращаемые значения:\n\n"
	},
	"carSetIdle || Устанавливает нормальное вождение автомобиля": {
		"scope": "lua",
		"prefix": "carSetIdle || Устанавливает нормальное вождение автомобиля",
		"body": [
			"carSetIdle(${0:Vehicle car})"
		],
		"description": "carSetIdle - Устанавливает нормальное вождение автомобиля\nПринимаемые значения:\nVehicle car хэндл автомобиля\n\nВозвращаемые значения:\n\n"
	},
	"getCarCoordinates || Получает координаты машины.": {
		"scope": "lua",
		"prefix": "getCarCoordinates || Получает координаты машины.",
		"body": [
			"${1:float positionX, float positionY, float positionZ} = getCarCoordinates(${0:carhandle car})"
		],
		"description": "getCarCoordinates - Получает координаты машины.\nПринимаемые значения:\ncarhandle car Хэндл машины.\n\nВозвращаемые значения:\nfloat positionX , float positionY , float positionZ Координаты (XYZ)\n"
	},
	"setCarCoordinates || Задаёт позицию транспортного средства.": {
		"scope": "lua",
		"prefix": "setCarCoordinates || Задаёт позицию транспортного средства.",
		"body": [
			"setCarCoordinates(${0:Vehicle car, float atX, float atY, float atZ})"
		],
		"description": "setCarCoordinates - Задаёт позицию транспортного средства.\nПринимаемые значения:\nVehicle car хэндл ТС, float atX ,, float atY ,, float atZ координаты\n\nВозвращаемые значения:\n\n"
	},
	"setCarCruiseSpeed || Устанавливает максимальную скорость автомобиля.": {
		"scope": "lua",
		"prefix": "setCarCruiseSpeed || Устанавливает максимальную скорость автомобиля.",
		"body": [
			"setCarCruiseSpeed(${0:Vehicle car, float maxSpeed})"
		],
		"description": "setCarCruiseSpeed - Устанавливает максимальную скорость автомобиля.\nПринимаемые значения:\nVehicle car скриптовый хэндл транспортного средства, float maxSpeed максимальная скорость автомобиля\n\nВозвращаемые значения:\n\n"
	},
	"setCarDrivingStyle || Устанавливает аккуратность вождения": {
		"scope": "lua",
		"prefix": "setCarDrivingStyle || Устанавливает аккуратность вождения",
		"body": [
			"setCarDrivingStyle(${0:Vehicle car, int behaviour})"
		],
		"description": "setCarDrivingStyle - Устанавливает аккуратность вождения\nПринимаемые значения:\nVehicle car хэндл автомобиля, int behaviour уровень аккуратности вождения\n\nВозвращаемые значения:\n\n"
	},
	"setCarMission || Устанавливает автомобилю поведение": {
		"scope": "lua",
		"prefix": "setCarMission || Устанавливает автомобилю поведение",
		"body": [
			"setCarMission(${0:Vehicle car, int driverBehaviour})"
		],
		"description": "setCarMission - Устанавливает автомобилю поведение\nПринимаемые значения:\nVehicle car хэндл автомобиля, int driverBehaviour стиль вождения, none\n\nВозвращаемые значения:\n\n"
	},
	"isCarInArea2d || Проверяет, находится ли транспорт в указанной прямоугольной зоне.": {
		"scope": "lua",
		"prefix": "isCarInArea2d || Проверяет, находится ли транспорт в указанной прямоугольной зоне.",
		"body": [
			"${1:bool result} = isCarInArea2d(${0:Vehicle car, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
		],
		"description": "isCarInArea2d - Проверяет, находится ли транспорт в указанной прямоугольной зоне.\nПринимаемые значения:\nVehicle car хендл транспорта игрока, float cornerAX первая X координата, float cornerAY первая Y координата, float cornerBX вторая X координата, float cornerBY вторая Y координата, bool sphere поиск в сфере\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isCarInArea3d || Проверяет, находится ли транспорт в указанной кубической зоне.": {
		"scope": "lua",
		"prefix": "isCarInArea3d || Проверяет, находится ли транспорт в указанной кубической зоне.",
		"body": [
			"${1:bool result} = isCarInArea3d(${0:Vehicle car, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere})"
		],
		"description": "isCarInArea3d - Проверяет, находится ли транспорт в указанной кубической зоне.\nПринимаемые значения:\nPed ped хендл транспорта игрока, float cornerAX первая X координата, float cornerAY первая Y координата, float cornerAZ первая Z координата, float cornerBX вторая X координата, float cornerBY вторая Y координата, float cornerBZ вторая Z координата, bool sphere поиск в сфере\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"printBig || Выводит стилизованный текст из GXT на определённое время.": {
		"scope": "lua",
		"prefix": "printBig || Выводит стилизованный текст из GXT на определённое время.",
		"body": [
			"printBig(${0:GxtString gxtString, int time, int style})"
		],
		"description": "printBig - Выводит стилизованный текст из GXT на определённое время.\nПринимаемые значения:\nGxtString gxtString ключ из GXT, int time время в миллисекундах, int style стиль (1-7)\n\nВозвращаемые значения:\n\n"
	},
	"printText || Отображает текстовую строку с низким приоритетом в нижней части экрана, в течение указанного времени.": {
		"scope": "lua",
		"prefix": "printText || Отображает текстовую строку с низким приоритетом в нижней части экрана, в течение указанного времени.",
		"body": [
			"printText(${0:GxtString gxtString, int time, int flag})"
		],
		"description": "printText - Отображает текстовую строку с низким приоритетом в нижней части экрана, в течение указанного времени.\nПринимаемые значения:\nGxtString gxtString ключ из GXT, int time время в миллисекундах, int flag Флаг\n\nВозвращаемые значения:\n\n"
	},
	"printTextNow || Отображает текстовую строку в нижней части экрана с высоким приоритетом, в течение указанного времени.": {
		"scope": "lua",
		"prefix": "printTextNow || Отображает текстовую строку в нижней части экрана с высоким приоритетом, в течение указанного времени.",
		"body": [
			"printTextNow(${0:GxtString gxtString, int time, int flag})"
		],
		"description": "printTextNow - Отображает текстовую строку в нижней части экрана с высоким приоритетом, в течение указанного времени.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"clearPrints || Удаляет с экрана все текстовые сообщения игры.": {
		"scope": "lua",
		"prefix": "clearPrints || Удаляет с экрана все текстовые сообщения игры.",
		"body": [
			"clearPrints(${0:})"
		],
		"description": "clearPrints - Удаляет с экрана все текстовые сообщения игры.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"getTimeOfDay || Возвращает текущее игровое время.": {
		"scope": "lua",
		"prefix": "getTimeOfDay || Возвращает текущее игровое время.",
		"body": [
			"${1:int hours, int mins} = getTimeOfDay(${0:})"
		],
		"description": "getTimeOfDay - Возвращает текущее игровое время.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint hours количество часов, int mins количество минут\n"
	},
	"setTimeOfDay || Меняет текущее время сервера, на указанное в функции.": {
		"scope": "lua",
		"prefix": "setTimeOfDay || Меняет текущее время сервера, на указанное в функции.",
		"body": [
			"setTimeOfDay(${0:int hours, int minutes})"
		],
		"description": "setTimeOfDay - Меняет текущее время сервера, на указанное в функции.\nПринимаемые значения:\nint hours количество часов, int mins количество минут\n\nВозвращаемые значения:\n\n"
	},
	"getMinutesToTimeOfDay || Получает остаток минут до указаного времени": {
		"scope": "lua",
		"prefix": "getMinutesToTimeOfDay || Получает остаток минут до указаного времени",
		"body": [
			"${1:int minutes} = getMinutesToTimeOfDay(${0:int hours, int minutes})"
		],
		"description": "getMinutesToTimeOfDay - Получает остаток минут до указаного времени\nПринимаемые значения:\nint hours часы, int minutes минуты\n\nВозвращаемые значения:\nint minutes остаток минут\n"
	},
	"isPointOnScreen || Проверяет находится ли точка на экране в заданном радиусе.": {
		"scope": "lua",
		"prefix": "isPointOnScreen || Проверяет находится ли точка на экране в заданном радиусе.",
		"body": [
			"${1:bool result} = isPointOnScreen(${0:float sphereX, float sphereY, float sphereZ, float radius})"
		],
		"description": "isPointOnScreen - Проверяет находится ли точка на экране в заданном радиусе.\nПринимаемые значения:\nfloat sphereX, float sphereY, float sphereZ координаты точки, float radius радиус\n\nВозвращаемые значения:\nbool radius результат проверки\n"
	},
	"storeCarCharIsIn || Получает хэндл машины в которой сидит персонаж.": {
		"scope": "lua",
		"prefix": "storeCarCharIsIn || Получает хэндл машины в которой сидит персонаж.",
		"body": [
			"${1:Vehicle car} = storeCarCharIsIn(${0:Ped ped})"
		],
		"description": "storeCarCharIsIn - Получает хэндл машины в которой сидит персонаж.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nVehicle car хэндл машины\n"
	},
	"isCharInCar || Проверяет находится ли игрок в указанной машине.": {
		"scope": "lua",
		"prefix": "isCharInCar || Проверяет находится ли игрок в указанной машине.",
		"body": [
			"${1:bool result} = isCharInCar(${0:Ped ped, Vehicle car})"
		],
		"description": "isCharInCar - Проверяет находится ли игрок в указанной машине.\nПринимаемые значения:\nPed ped хэндл актера, Vehicle car хэндл машины\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isCharInModel || Проверяет находиться ли игрок в модели машины(Пример: 494 - Hotring)": {
		"scope": "lua",
		"prefix": "isCharInModel || Проверяет находиться ли игрок в модели машины(Пример: 494 - Hotring)",
		"body": [
			"${1:bool result} = isCharInModel(${0:Ped ped, Model carModel})"
		],
		"description": "isCharInModel - Проверяет находиться ли игрок в модели машины(Пример: 494 - Hotring)\nПринимаемые значения:\nPed ped хэндл персоонажа, Model carModel модель машины\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isCharInAnyCar || Проверяет находится ли игрок в любой машине.": {
		"scope": "lua",
		"prefix": "isCharInAnyCar || Проверяет находится ли игрок в любой машине.",
		"body": [
			"${1:bool result} = isCharInAnyCar(${0:Ped ped})"
		],
		"description": "isCharInAnyCar - Проверяет находится ли игрок в любой машине.\nПринимаемые значения:\nPed ped хэндл актера\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isButtonPressed || Возвращает true, если игрок нажимает указанную клавишу": {
		"scope": "lua",
		"prefix": "isButtonPressed || Возвращает true, если игрок нажимает указанную клавишу",
		"body": [
			"${1:bool result} = isButtonPressed(${0:Player player, int key})"
		],
		"description": "isButtonPressed - Возвращает true, если игрок нажимает указанную клавишу\nПринимаемые значения:\nPlayer player хендл игрока, int key идентификатор клавиши\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"createObject || Создает объект.": {
		"scope": "lua",
		"prefix": "createObject || Создает объект.",
		"body": [
			"${1:Object object} = createObject(${0:Model model, float atX, float atY, float atZ})"
		],
		"description": "createObject - Создает объект.\nПринимаемые значения:\nModel model модель объекта, float atX, float atY, float atZ координаты где будет создан объект(XYZ)\n\nВозвращаемые значения:\nObject object хэндл объекта\n"
	},
	"deleteObject || Удаляет объект.": {
		"scope": "lua",
		"prefix": "deleteObject || Удаляет объект.",
		"body": [
			"deleteObject(${0:Object object})"
		],
		"description": "deleteObject - Удаляет объект.\nПринимаемые значения:\nObject object хэндл объекта\n\nВозвращаемые значения:\n\n"
	},
	"givePlayerMoney || Дать денег персонажу.": {
		"scope": "lua",
		"prefix": "givePlayerMoney || Дать денег персонажу.",
		"body": [
			"givePlayerMoney(${0:Player player, int money})"
		],
		"description": "givePlayerMoney - Дать денег персонажу.\nПринимаемые значения:\nPlayer player хендл игрока, int money деньги\n\nВозвращаемые значения:\n\n"
	},
	"getPlayerMoney || Возвращает количество денег игрока.": {
		"scope": "lua",
		"prefix": "getPlayerMoney || Возвращает количество денег игрока.",
		"body": [
			"${1:int money} = getPlayerMoney(${0:Player player})"
		],
		"description": "getPlayerMoney - Возвращает количество денег игрока.\nПринимаемые значения:\nPlayer player игрок\n\nВозвращаемые значения:\nint money баланс\n"
	},
	"alterWantedLevel || Устанавливает уровень розыска игроку": {
		"scope": "lua",
		"prefix": "alterWantedLevel || Устанавливает уровень розыска игроку",
		"body": [
			"alterWantedLevel(${0:Player player, int WantedLevel})"
		],
		"description": "alterWantedLevel - Устанавливает уровень розыска игроку\nПринимаемые значения:\nPlayer player хэндл игрока, int WantedLevel уровень розыска\n\nВозвращаемые значения:\n\n"
	},
	"alterWantedLevelNoDrop || Устанавливает уровень розыска игроку, при этом не сбрасывая его в дальнейшем": {
		"scope": "lua",
		"prefix": "alterWantedLevelNoDrop || Устанавливает уровень розыска игроку, при этом не сбрасывая его в дальнейшем",
		"body": [
			"alterWantedLevelNoDrop(${0:Player player, int minimumWantedLevel})"
		],
		"description": "alterWantedLevelNoDrop - Устанавливает уровень розыска игроку, при этом не сбрасывая его в дальнейшем\nПринимаемые значения:\nPlayer player хэндл игрока, int minimumWantedLevel минимальный уровень розыска\n\nВозвращаемые значения:\n\n"
	},
	"isWantedLevelGreater || Сравнивает уровень розыска, возвращает true если уровень розыска больше указаного": {
		"scope": "lua",
		"prefix": "isWantedLevelGreater || Сравнивает уровень розыска, возвращает true если уровень розыска больше указаного",
		"body": [
			"${1:bool result} = isWantedLevelGreater(${0:Player player, int level})"
		],
		"description": "isWantedLevelGreater - Сравнивает уровень розыска, возвращает true если уровень розыска больше указаного\nПринимаемые значения:\nPlayer player хэндл, int level уровень розыска для сравнения\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"clearWantedLevel || Удаляет розыск игроку.": {
		"scope": "lua",
		"prefix": "clearWantedLevel || Удаляет розыск игроку.",
		"body": [
			"clearWantedLevel(${0:Player player})"
		],
		"description": "clearWantedLevel - Удаляет розыск игроку.\nПринимаемые значения:\nPlayer player скриптовый хендл игрока\n\nВозвращаемые значения:\n\n"
	},
	"  setDeatharrestState || Устанавливает состояние персонажа: убит или арестован": {
		"scope": "lua",
		"prefix": "  setDeatharrestState || Устанавливает состояние персонажа: убит или арестован",
		"body": [
			"  setDeatharrestState(${0:bool state})"
		],
		"description": "  setDeatharrestState - Устанавливает состояние персонажа: убит или арестован\nПринимаемые значения:\nbool state состояние\n\nВозвращаемые значения:\n\n"
	},
	"hasDeatharrestBeenExecuted || Проверяет, умер ли персонаж или арестован": {
		"scope": "lua",
		"prefix": "hasDeatharrestBeenExecuted || Проверяет, умер ли персонаж или арестован",
		"body": [
			"${1:bool result} = hasDeatharrestBeenExecuted(${0:})"
		],
		"description": "hasDeatharrestBeenExecuted - Проверяет, умер ли персонаж или арестован\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"addAmmoToChar || Добавляет патроны персонажу, если у него есть оружие.": {
		"scope": "lua",
		"prefix": "addAmmoToChar || Добавляет патроны персонажу, если у него есть оружие.",
		"body": [
			"addAmmoToChar(${0:Ped ped, int weapon, int ammo})"
		],
		"description": "addAmmoToChar - Добавляет патроны персонажу, если у него есть оружие.\nПринимаемые значения:\nPed ped хэндл персонажа, int weapon ID оружия, int ammo число патронов\n\nВозвращаемые значения:\n\n"
	},
	"isPlayerDead || Проверяет мертв ли игрок.": {
		"scope": "lua",
		"prefix": "isPlayerDead || Проверяет мертв ли игрок.",
		"body": [
			"${1:bool result} = isPlayerDead(${0:Player player})"
		],
		"description": "isPlayerDead - Проверяет мертв ли игрок.\nПринимаемые значения:\nPlayer player хэндл игрока\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isCharDead || Проверяет мертв ли персонаж.": {
		"scope": "lua",
		"prefix": "isCharDead || Проверяет мертв ли персонаж.",
		"body": [
			"${1:bool result} = isCharDead(${0:Ped ped})"
		],
		"description": "isCharDead - Проверяет мертв ли персонаж.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isCarDead || Проверяет взорвана ли машина.": {
		"scope": "lua",
		"prefix": "isCarDead || Проверяет взорвана ли машина.",
		"body": [
			"${1:bool result} = isCarDead(${0:Vehicle car})"
		],
		"description": "isCarDead - Проверяет взорвана ли машина.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isPlayerPressingHorn || Проверяет сигналит ли игрок в машине.": {
		"scope": "lua",
		"prefix": "isPlayerPressingHorn || Проверяет сигналит ли игрок в машине.",
		"body": [
			"${1:bool result} = isPlayerPressingHorn(${0:Player player})"
		],
		"description": "isPlayerPressingHorn - Проверяет сигналит ли игрок в машине.\nПринимаемые значения:\nPlayer player хэндл игрока\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"createCharInsideCar || Создает персонажа сидящем в машине на водительском сиденье.": {
		"scope": "lua",
		"prefix": "createCharInsideCar || Создает персонажа сидящем в машине на водительском сиденье.",
		"body": [
			"${1:Ped ped} = createCharInsideCar(${0:Vehicle car, Model pedtype, int model})"
		],
		"description": "createCharInsideCar - Создает персонажа сидящем в машине на водительском сиденье.\nПринимаемые значения:\nVehicle car хэндл машины, Model pedtype модель персонажа, int model модель\n\nВозвращаемые значения:\nPed ped хэндл персонажа\n"
	},
	"isCarModel || Проверяет указанную машину на модель.": {
		"scope": "lua",
		"prefix": "isCarModel || Проверяет указанную машину на модель.",
		"body": [
			"${1:bool result} = isCarModel(${0:Vehicle car, Model model})"
		],
		"description": "isCarModel - Проверяет указанную машину на модель.\nПринимаемые значения:\nVehicle car хэндл машины, Model model модель машины\n\nВозвращаемые значения:\nbool result результат проверки(возвращает true, если модель совпадает)\n"
	},
	"restoreCamera || Восстанавливает камеру в обычное положение.": {
		"scope": "lua",
		"prefix": "restoreCamera || Восстанавливает камеру в обычное положение.",
		"body": [
			"restoreCamera(${0:})"
		],
		"description": "restoreCamera - Восстанавливает камеру в обычное положение.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"setTimeScale || Устанавливает скорость игры.": {
		"scope": "lua",
		"prefix": "setTimeScale || Устанавливает скорость игры.",
		"body": [
			"setTimeScale(${0:float gamespeed})"
		],
		"description": "setTimeScale - Устанавливает скорость игры.\nПринимаемые значения:\nfloat gamespeed скорость\n\nВозвращаемые значения:\n\n"
	},
	"removeBlip || Удаляет маркер.": {
		"scope": "lua",
		"prefix": "removeBlip || Удаляет маркер.",
		"body": [
			"removeBlip(${0:markerhandle marker})"
		],
		"description": "removeBlip - Удаляет маркер.\nПринимаемые значения:\nmarkerhandle marker Хендл маркера.\n\nВозвращаемые значения:\n\n"
	},
	"changeBlipColour || Меняет цвет маркера.": {
		"scope": "lua",
		"prefix": "changeBlipColour || Меняет цвет маркера.",
		"body": [
			"changeBlipColour(${0:markerhandle marker, int color})"
		],
		"description": "changeBlipColour - Меняет цвет маркера.\nПринимаемые значения:\nmarkerhandle marker Хендл маркера., int color Цвет.\n\nВозвращаемые значения:\n\n"
	},
	"changeBlipScale || Меняет размер маркера.": {
		"scope": "lua",
		"prefix": "changeBlipScale || Меняет размер маркера.",
		"body": [
			"changeBlipScale(${0:Marker marker, int size})"
		],
		"description": "changeBlipScale - Меняет размер маркера.\nПринимаемые значения:\nMarker marker Хендл маркера., int size Размер. (3 - стандартный)\n\nВозвращаемые значения:\n\n"
	},
	"getFadingStatus || Проверяет, затухает ли прямо сейчас в игре экран.": {
		"scope": "lua",
		"prefix": "getFadingStatus || Проверяет, затухает ли прямо сейчас в игре экран.",
		"body": [
			"${1:bool result} = getFadingStatus(${0:})"
		],
		"description": "getFadingStatus - Проверяет, затухает ли прямо сейчас в игре экран.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"getCharHeading || Возвращает Z-угол(поворот) персонажа.": {
		"scope": "lua",
		"prefix": "getCharHeading || Возвращает Z-угол(поворот) персонажа.",
		"body": [
			"${1:float angle} = getCharHeading(${0:Ped ped})"
		],
		"description": "getCharHeading - Возвращает Z-угол(поворот) персонажа.\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\nfloat angle угол поворота\n"
	},
	"setCharHeading || Устанавливает Z-угол(поворот) персонажа.": {
		"scope": "lua",
		"prefix": "setCharHeading || Устанавливает Z-угол(поворот) персонажа.",
		"body": [
			"setCharHeading(${0:Ped ped, float angle})"
		],
		"description": "setCharHeading - Устанавливает Z-угол(поворот) персонажа.\nПринимаемые значения:\nPed ped хендл персонажа игрока, float angle угол поворота\n\nВозвращаемые значения:\n\n"
	},
	"getCarHeading || Возвращает Z-угол(поворот) транспорта.": {
		"scope": "lua",
		"prefix": "getCarHeading || Возвращает Z-угол(поворот) транспорта.",
		"body": [
			"${1:float angle} = getCarHeading(${0:Vehicle car})"
		],
		"description": "getCarHeading - Возвращает Z-угол(поворот) транспорта.\nПринимаемые значения:\nVehicle car хендл транспорта\n\nВозвращаемые значения:\nfloat angle угол поворота\n"
	},
	"setCarHeading || Устанавливает Z-угол(поворот) транспорта.": {
		"scope": "lua",
		"prefix": "setCarHeading || Устанавливает Z-угол(поворот) транспорта.",
		"body": [
			"setCarHeading(${0:Vehicle car, float angle})"
		],
		"description": "setCarHeading - Устанавливает Z-угол(поворот) транспорта.\nПринимаемые значения:\nVehicle car хендл транспорта, float angle угол поворота\n\nВозвращаемые значения:\n\n"
	},
	"getObjectHeading || Получает угол поворота объекта": {
		"scope": "lua",
		"prefix": "getObjectHeading || Получает угол поворота объекта",
		"body": [
			"${1:float angle} = getObjectHeading(${0:Object object})"
		],
		"description": "getObjectHeading - Получает угол поворота объекта\nПринимаемые значения:\nObject object скриптовый хендл объекта\n\nВозвращаемые значения:\nfloat angle угол поворота объекта\n"
	},
	"setObjectHeading || Задаёт угол поворота объекту.": {
		"scope": "lua",
		"prefix": "setObjectHeading || Задаёт угол поворота объекту.",
		"body": [
			"setObjectHeading(${0:Object object, float angle})"
		],
		"description": "setObjectHeading - Задаёт угол поворота объекту.\nПринимаемые значения:\nObject object скриптовый хендл объекта, float angle угол поворота объекта\n\nВозвращаемые значения:\n\n"
	},
	"isCharTouchingObject || Узнает, касается ли персонаж объекта": {
		"scope": "lua",
		"prefix": "isCharTouchingObject || Узнает, касается ли персонаж объекта",
		"body": [
			"${1:bool result} = isCharTouchingObject(${0:Ped ped, Object object})"
		],
		"description": "isCharTouchingObject - Узнает, касается ли персонаж объекта\nПринимаемые значения:\nPed ped скриптовый хендл персонажа, Object object скриптовый хендл объекта\n\nВозвращаемые значения:\nbool result результат выполнения функции\n"
	},
	"setCharAmmo || Устанавливает количество патронов в указанное оружие.": {
		"scope": "lua",
		"prefix": "setCharAmmo || Устанавливает количество патронов в указанное оружие.",
		"body": [
			"setCharAmmo(${0:Ped ped, int weapon, int ammo})"
		],
		"description": "setCharAmmo - Устанавливает количество патронов в указанное оружие.\nПринимаемые значения:\nPed ped хэндл персонажа, int weapon ID оружия, int ammo число патронов\n\nВозвращаемые значения:\n\n"
	},
	"addBlipForCar || Создает маркер над автомобилем.": {
		"scope": "lua",
		"prefix": "addBlipForCar || Создает маркер над автомобилем.",
		"body": [
			"${1:markerhandle marker} = addBlipForCar(${0:carhandle car})"
		],
		"description": "addBlipForCar - Создает маркер над автомобилем.\nПринимаемые значения:\ncarhandle car Хендл машины.\n\nВозвращаемые значения:\nmarkerhandle marker Хендл маркера.\n"
	},
	"addBlipForChar || Добавляет маркер над персонажем.": {
		"scope": "lua",
		"prefix": "addBlipForChar || Добавляет маркер над персонажем.",
		"body": [
			"${1:Marker marker} = addBlipForChar(${0:Ped ped})"
		],
		"description": "addBlipForChar - Добавляет маркер над персонажем.\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\nMarker marker хендл маркера\n"
	},
	"addBlipForObject || Создает маркер над объектом.": {
		"scope": "lua",
		"prefix": "addBlipForObject || Создает маркер над объектом.",
		"body": [
			"${1:markerhandle marker} = addBlipForObject(${0:objhandle object})"
		],
		"description": "addBlipForObject - Создает маркер над объектом.\nПринимаемые значения:\nobjhandle object Хендл объекта.\n\nВозвращаемые значения:\nmarkerhandle marker Хендл маркера.\n"
	},
	"addBlipForCoord || Создает маркер на указанных координатах.": {
		"scope": "lua",
		"prefix": "addBlipForCoord || Создает маркер на указанных координатах.",
		"body": [
			"${1:checkpointhandle checkpoint} = addBlipForCoord(${0:float atX, float atY, float atZ})"
		],
		"description": "addBlipForCoord - Создает маркер на указанных координатах.\nПринимаемые значения:\nfloat atX , float atY , float atZ Координаты (XYZ)\n\nВозвращаемые значения:\ncheckpointhandle checkpoint Хендл маркера.\n"
	},
	"addOneOffSound || Проигрывает короткий звук., Если указаны координаты - то звук проиграется на указанных координатах.": {
		"scope": "lua",
		"prefix": "addOneOffSound || Проигрывает короткий звук., Если указаны координаты - то звук проиграется на указанных координатах.",
		"body": [
			"addOneOffSound(${0:float atX, float atY, float atZ, int sound})"
		],
		"description": "addOneOffSound - Проигрывает короткий звук., Если указаны координаты - то звук проиграется на указанных координатах.\nПринимаемые значения:\nfloat atX координата X, float atY координата Y, float atZ координата Z, int sound идентификатор звука\n\nВозвращаемые значения:\n\n"
	},
	"removeSound || Удаляет проигрываемый звук": {
		"scope": "lua",
		"prefix": "removeSound || Удаляет проигрываемый звук",
		"body": [
			"removeSound(${0:int sound})"
		],
		"description": "removeSound - Удаляет проигрываемый звук\nПринимаемые значения:\nint sound ID звука\n\nВозвращаемые значения:\n\n"
	},
	"isCarStuckOnRoof || Возвращает true если машина перевёрнута (застряла на крыше), то есть транспорт был добавлен к проверке addUpsidedownCarCheck и его движения в перевернутом состоянии минимальны. Проверка срабатывает и с взорванным транспортом.": {
		"scope": "lua",
		"prefix": "isCarStuckOnRoof || Возвращает true если машина перевёрнута (застряла на крыше), то есть транспорт был добавлен к проверке addUpsidedownCarCheck и его движения в перевернутом состоянии минимальны. Проверка срабатывает и с взорванным транспортом.",
		"body": [
			"${1:bool result} = isCarStuckOnRoof(${0:Vehicle car})"
		],
		"description": "isCarStuckOnRoof - Возвращает true если машина перевёрнута (застряла на крыше), то есть транспорт был добавлен к проверке addUpsidedownCarCheck и его движения в перевернутом состоянии минимальны. Проверка срабатывает и с взорванным транспортом.\nПринимаемые значения:\nVehicle car хэндл транспорта\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"giveWeaponToChar || Выдает ID оружия и кол-во патронов.": {
		"scope": "lua",
		"prefix": "giveWeaponToChar || Выдает ID оружия и кол-во патронов.",
		"body": [
			"giveWeaponToChar(${0:Ped ped, int weapon, int ammo})"
		],
		"description": "giveWeaponToChar - Выдает ID оружия и кол-во патронов.\nПринимаемые значения:\nPed ped хендл персонажа, int weapon ID оружия, int ammo количество патронов\n\nВозвращаемые значения:\n\n"
	},
	"setPlayerControl || Устанавливает возможность передвижения персонажа": {
		"scope": "lua",
		"prefix": "setPlayerControl || Устанавливает возможность передвижения персонажа",
		"body": [
			"${1:bool result} = setPlayerControl(${0:Player player, bool canMove})"
		],
		"description": "setPlayerControl - Устанавливает возможность передвижения персонажа\nПринимаемые значения:\nPlayer player хендл игрока, bool canMove может ли игрок передвигаться true - может, false - не может.\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"setCurrentCharWeapon || Дает персонажу в руки указанное оружие.": {
		"scope": "lua",
		"prefix": "setCurrentCharWeapon || Дает персонажу в руки указанное оружие.",
		"body": [
			"setCurrentCharWeapon(${0:Ped ped, int weapon})"
		],
		"description": "setCurrentCharWeapon - Дает персонажу в руки указанное оружие.\nПринимаемые значения:\nPed ped хэндл персонажа, int weapon ID оружия\n\nВозвращаемые значения:\n\n"
	},
	"getObjectCoordinates || Возвращает координаты указанного объекта.": {
		"scope": "lua",
		"prefix": "getObjectCoordinates || Возвращает координаты указанного объекта.",
		"body": [
			"${1:bool result, float positionX, float positionY, float positionZ} = getObjectCoordinates(${0:Object object})"
		],
		"description": "getObjectCoordinates - Возвращает координаты указанного объекта.\nПринимаемые значения:\nObject object хендл объекта\n\nВозвращаемые значения:\nbool result результат проверки, float atX x координата, float atY y координата, float atZ z координата\n"
	},
	"setObjectCoordinates || Устанавливает указанный объект на указанные координаты.": {
		"scope": "lua",
		"prefix": "setObjectCoordinates || Устанавливает указанный объект на указанные координаты.",
		"body": [
			"${1:bool result} = setObjectCoordinates(${0:Object object, float atX, float atY, float atZ})"
		],
		"description": "setObjectCoordinates - Устанавливает указанный объект на указанные координаты.\nПринимаемые значения:\nObject object хендл объекта, float atX x координата, float atY y координата, float atZ z координата\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"storeWantedLevel || Возвращает текущий уровень розыска персонажа.": {
		"scope": "lua",
		"prefix": "storeWantedLevel || Возвращает текущий уровень розыска персонажа.",
		"body": [
			"${1:bool result, int level} = storeWantedLevel(${0:Player player})"
		],
		"description": "storeWantedLevel - Возвращает текущий уровень розыска персонажа.\nПринимаемые значения:\nPlayer player хендл игрока\n\nВозвращаемые значения:\nbool result результат проверки, int level уровень розыска\n"
	},
	"isCarStopped || Проверяет стоит ли машина на месте.": {
		"scope": "lua",
		"prefix": "isCarStopped || Проверяет стоит ли машина на месте.",
		"body": [
			"${1:bool result} = isCarStopped(${0:carhandle car})"
		],
		"description": "isCarStopped - Проверяет стоит ли машина на месте.\nПринимаемые значения:\ncarhandle car Хендл машины.\n\nВозвращаемые значения:\nbool result Результат проверки.\n"
	},
	"markCarAsNoLongerNeeded || Помечает транспорт как более ненужный для скриптового движка и что он может быть удален в любое время игрой": {
		"scope": "lua",
		"prefix": "markCarAsNoLongerNeeded || Помечает транспорт как более ненужный для скриптового движка и что он может быть удален в любое время игрой",
		"body": [
			"markCarAsNoLongerNeeded(${0:Vehicle car})"
		],
		"description": "markCarAsNoLongerNeeded - Помечает транспорт как более ненужный для скриптового движка и что он может быть удален в любое время игрой\nПринимаемые значения:\nVehicle car хендл транспорта\n\nВозвращаемые значения:\n\n"
	},
	"createCharAsPassenger || Создает персонажа сидящем в машине на пассажирском сидении.": {
		"scope": "lua",
		"prefix": "createCharAsPassenger || Создает персонажа сидящем в машине на пассажирском сидении.",
		"body": [
			"${1:bool result, Ped ped} = createCharAsPassenger(${0:Vehicle car, Model pedtype, int model, int passengerSeat})"
		],
		"description": "createCharAsPassenger - Создает персонажа сидящем в машине на пассажирском сидении.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"getNumberOfPassengers || Возвращает количество пассажиров в автомобиле": {
		"scope": "lua",
		"prefix": "getNumberOfPassengers || Возвращает количество пассажиров в автомобиле",
		"body": [
			"${1:bool result, int passengers} = getNumberOfPassengers(${0:Vehicle car})"
		],
		"description": "getNumberOfPassengers - Возвращает количество пассажиров в автомобиле\nПринимаемые значения:\nVehicle car хэндл транспорта\n\nВозвращаемые значения:\nbool result результат проверки, int passengers количество пассажиров\n"
	},
	"getMaximumNumberOfPassengers || Возвращает максимальное количество пассажиров для данного транспортного средства": {
		"scope": "lua",
		"prefix": "getMaximumNumberOfPassengers || Возвращает максимальное количество пассажиров для данного транспортного средства",
		"body": [
			"${1:int maxPassengers} = getMaximumNumberOfPassengers(${0:Vehicle car})"
		],
		"description": "getMaximumNumberOfPassengers - Возвращает максимальное количество пассажиров для данного транспортного средства\nПринимаемые значения:\nVehicle car скриптовый хэндл транспортного средства\n\nВозвращаемые значения:\nint maxPassengers количество пассажиров\n"
	},
	"setMaxWantedLevel || Устанавливает максимально возможный уровень розыска": {
		"scope": "lua",
		"prefix": "setMaxWantedLevel || Устанавливает максимально возможный уровень розыска",
		"body": [
			"setMaxWantedLevel(${0:int level})"
		],
		"description": "setMaxWantedLevel - Устанавливает максимально возможный уровень розыска\nПринимаемые значения:\nint level число\n\nВозвращаемые значения:\n\n"
	},
	"getPlayerChar || Получает хэндл персонажа игрока": {
		"scope": "lua",
		"prefix": "getPlayerChar || Получает хэндл персонажа игрока",
		"body": [
			"${1:bool result, Ped ped} = getPlayerChar(${0:Player player})"
		],
		"description": "getPlayerChar - Получает хэндл персонажа игрока\nПринимаемые значения:\nPlayer player хэндл игрока\n\nВозвращаемые значения:\nbool result результат, Ped ped хэндл игрока\n"
	},
	"setPoliceIgnorePlayer || Устанавливает, должны ли полицейские игнорировать игрока независимо от уровня.": {
		"scope": "lua",
		"prefix": "setPoliceIgnorePlayer || Устанавливает, должны ли полицейские игнорировать игрока независимо от уровня.",
		"body": [
			"${1:bool result} = setPoliceIgnorePlayer(${0:Player player, bool ignored})"
		],
		"description": "setPoliceIgnorePlayer - Устанавливает, должны ли полицейские игнорировать игрока независимо от уровня.\nПринимаемые значения:\nplayer player хендл игрока, bool ignored true - включить игнорирование, false - выключить игнорирование\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"lockCarDoors || Устанавливает, открыты или закрыты двери т/с": {
		"scope": "lua",
		"prefix": "lockCarDoors || Устанавливает, открыты или закрыты двери т/с",
		"body": [
			"lockCarDoors(${0:Vehicle car, int status})"
		],
		"description": "lockCarDoors - Устанавливает, открыты или закрыты двери т/с\nПринимаемые значения:\nVehicle car хендл транспортного средства, int status статус\n\nВозвращаемые значения:\n\n"
	},
	"explodeCar || Взрывает транспортное средство.": {
		"scope": "lua",
		"prefix": "explodeCar || Взрывает транспортное средство.",
		"body": [
			"${1:bool result} = explodeCar(${0:Vehicle car})"
		],
		"description": "explodeCar - Взрывает транспортное средство.\nПринимаемые значения:\nVehicle car скриптовый хендл транспортного средства\n\nВозвращаемые значения:\nbool result результат выполнения операции\n"
	},
	"addExplosion || Вызывает эффект взрыва на экране.": {
		"scope": "lua",
		"prefix": "addExplosion || Вызывает эффект взрыва на экране.",
		"body": [
			"${1:bool result} = addExplosion(${0:float atX, float atY, float atZ, int radius})"
		],
		"description": "addExplosion - Вызывает эффект взрыва на экране.\nПринимаемые значения:\nfloat atX, float atY, float atZ Координаты взрыва, int radius Радиус взрыва\n\nВозвращаемые значения:\nbool result Результат\n"
	},
	"removePickup || Удаляет пикап.": {
		"scope": "lua",
		"prefix": "removePickup || Удаляет пикап.",
		"body": [
			"${1:bool result} = removePickup(${0:Pickup pickup})"
		],
		"description": "removePickup - Удаляет пикап.\nПринимаемые значения:\nPickup pickup скриптовый хендл пикапа\n\nВозвращаемые значения:\nbool result результат выполнения операции\n"
	},
	"setTaxiLights || Устанавливает свечение шашки такси": {
		"scope": "lua",
		"prefix": "setTaxiLights || Устанавливает свечение шашки такси",
		"body": [
			"setTaxiLights(${0:vehicle taxi, bool light})"
		],
		"description": "setTaxiLights - Устанавливает свечение шашки такси\nПринимаемые значения:\nvehicle taxi такси, bool light состояние\n\nВозвращаемые значения:\n\n"
	},
	"applyBrakesToPlayersCar || Установить/Снять тормоза(невозможность двигаться) у авто, Если \"тормоза\" установить, то как бы игрок не пытался двигаться в авто он будет стоять на месте": {
		"scope": "lua",
		"prefix": "applyBrakesToPlayersCar || Установить/Снять тормоза(невозможность двигаться) у авто, Если \"тормоза\" установить, то как бы игрок не пытался двигаться в авто он будет стоять на месте",
		"body": [
			"${1:bool result} = applyBrakesToPlayersCar(${0:Player player, bool apply})"
		],
		"description": "applyBrakesToPlayersCar - Установить/Снять тормоза(невозможность двигаться) у авто, Если \"тормоза\" установить, то как бы игрок не пытался двигаться в авто он будет стоять на месте\nПринимаемые значения:\nPlayer player хендл игрока, bool apply статус\n\nВозвращаемые значения:\nbool result статус\n"
	},
	"setCharHealth || Устанавливает персонажу уровень здоровья.": {
		"scope": "lua",
		"prefix": "setCharHealth || Устанавливает персонажу уровень здоровья.",
		"body": [
			"setCharHealth(${0:pedhandle ped, int health})"
		],
		"description": "setCharHealth - Устанавливает персонажу уровень здоровья.\nПринимаемые значения:\npedhandle ped Хендл персонажа., int health Число здоровья.\n\nВозвращаемые значения:\n\n"
	},
	"setCarHealth || Устанавливает уровень здоровья машине.": {
		"scope": "lua",
		"prefix": "setCarHealth || Устанавливает уровень здоровья машине.",
		"body": [
			"setCarHealth(${0:carhandle car, int health})"
		],
		"description": "setCarHealth - Устанавливает уровень здоровья машине.\nПринимаемые значения:\ncarhandle car Хендл машины., int health Уровень здоровья.\n\nВозвращаемые значения:\n\n"
	},
	"getCharHealth || Получает здоровье персонажа.": {
		"scope": "lua",
		"prefix": "getCharHealth || Получает здоровье персонажа.",
		"body": [
			"${1:int health} = getCharHealth(${0:Ped ped})"
		],
		"description": "getCharHealth - Получает здоровье персонажа.\nПринимаемые значения:\npedHandle ped хендл персонажа\n\nВозвращаемые значения:\nhealth здоровье\n"
	},
	"getCarHealth || Получает состояние машины.": {
		"scope": "lua",
		"prefix": "getCarHealth || Получает состояние машины.",
		"body": [
			"${1:int health} = getCarHealth(${0:Vehicle car})"
		],
		"description": "getCarHealth - Получает состояние машины.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nint health Состояние машины\n"
	},
	"changeCarColour || Меняет цвет машины.": {
		"scope": "lua",
		"prefix": "changeCarColour || Меняет цвет машины.",
		"body": [
			"${1:bool result} = changeCarColour(${0:carhandle car, int primaryColor, int secondaryColor})"
		],
		"description": "changeCarColour - Меняет цвет машины.\nПринимаемые значения:\ncarhandle car Хендл автомобиля., int primaryColor Первичный цвет., int secondaryColor Вторичный цвет.\n\nВозвращаемые значения:\nbool result Результат выполнения.\n"
	},
	"setGangWeapons || Устанавливает указанной банде оружие которое она может использовать.": {
		"scope": "lua",
		"prefix": "setGangWeapons || Устанавливает указанной банде оружие которое она может использовать.",
		"body": [
			"setGangWeapons(${0:int gang, int weapons1, int weapons2, int weapons3})"
		],
		"description": "setGangWeapons - Устанавливает указанной банде оружие которое она может использовать.\nПринимаемые значения:\nint gang номер банды, int weapons1, int weapons2, int weapons3 ID оружия которое может использовать банда\n\nВозвращаемые значения:\n\n"
	},
	"requestModel || Загружает указанную модель.": {
		"scope": "lua",
		"prefix": "requestModel || Загружает указанную модель.",
		"body": [
			"${1:bool result} = requestModel(${0:Model model})"
		],
		"description": "requestModel - Загружает указанную модель.\nПринимаемые значения:\nModel model номер модели\n\nВозвращаемые значения:\nnone\n"
	},
	"hasModelLoaded || Проверяет загружена ли модель.": {
		"scope": "lua",
		"prefix": "hasModelLoaded || Проверяет загружена ли модель.",
		"body": [
			"${1:bool result} = hasModelLoaded(${0:Model modelId})"
		],
		"description": "hasModelLoaded - Проверяет загружена ли модель.\nПринимаемые значения:\nModel modelId номер модель\n\nВозвращаемые значения:\nnone\n"
	},
	"markModelAsNoLongerNeeded || Помечает загруженную ранее модель как более ненужную для скриптового движка": {
		"scope": "lua",
		"prefix": "markModelAsNoLongerNeeded || Помечает загруженную ранее модель как более ненужную для скриптового движка",
		"body": [
			"markModelAsNoLongerNeeded(${0:Model modelId})"
		],
		"description": "markModelAsNoLongerNeeded - Помечает загруженную ранее модель как более ненужную для скриптового движка\nПринимаемые значения:\nModel modelId номер модели\n\nВозвращаемые значения:\n\n"
	},
	"resetNumOfModelsKilledByPlayer || Сбрасывает количество раз, сколько раз игрок уничтожил определенную модель.": {
		"scope": "lua",
		"prefix": "resetNumOfModelsKilledByPlayer || Сбрасывает количество раз, сколько раз игрок уничтожил определенную модель.",
		"body": [
			"resetNumOfModelsKilledByPlayer(${0:Player player})"
		],
		"description": "resetNumOfModelsKilledByPlayer - Сбрасывает количество раз, сколько раз игрок уничтожил определенную модель.\nПринимаемые значения:\nPlayer player хендл игрока\n\nВозвращаемые значения:\n\n"
	},
	"isCharStopped || Проверяет двигается ли игрок.": {
		"scope": "lua",
		"prefix": "isCharStopped || Проверяет двигается ли игрок.",
		"body": [
			"${1:bool result} = isCharStopped(${0:Ped ped})"
		],
		"description": "isCharStopped - Проверяет двигается ли игрок.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"setCharProofs || Устанавливает иммунитет персонажу": {
		"scope": "lua",
		"prefix": "setCharProofs || Устанавливает иммунитет персонажу",
		"body": [
			"setCharProofs(${0:Ped ped, bool BP, bool FP, bool EP, bool CP, bool MP})"
		],
		"description": "setCharProofs - Устанавливает иммунитет персонажу\nПринимаемые значения:\nPed ped Хэндл персонажа, bool BP иммунитет от пуль, bool FP иммунитет от огня, bool EP иммунитет от взрывов, bool CP иммунитет от ударений, bool MP иммунитет от оружия ближнего боя в т.ч. и кулаков\n\nВозвращаемые значения:\n\n"
	},
	"setCarProofs || Устанавливает иммунитет машине": {
		"scope": "lua",
		"prefix": "setCarProofs || Устанавливает иммунитет машине",
		"body": [
			"setCarProofs(${0:Vehicle car, bool BP, bool FP, bool EP, bool CP, bool MP})"
		],
		"description": "setCarProofs - Устанавливает иммунитет машине\nПринимаемые значения:\nVehicle car Хэндл транспорта, bool BP иммунитет от пуль, bool FP иммунитет от огня, bool EP иммунитет от взрывов, bool CP иммунитет от ударений, bool MP иммунитет от оружия ближнего боя в т.ч. и кулаков\n\nВозвращаемые значения:\n\n"
	},
	"isCarInWater || Проверяет находиться ли машина в воде.": {
		"scope": "lua",
		"prefix": "isCarInWater || Проверяет находиться ли машина в воде.",
		"body": [
			"${1:bool result} = isCarInWater(${0:Vehicle car})"
		],
		"description": "isCarInWater - Проверяет находиться ли машина в воде.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isCarOnScreen || Проверяет видна ли машина.": {
		"scope": "lua",
		"prefix": "isCarOnScreen || Проверяет видна ли машина.",
		"body": [
			"${1:bool result} = isCarOnScreen(${0:Vehicle car})"
		],
		"description": "isCarOnScreen - Проверяет видна ли машина.\nПринимаемые значения:\nVehicle car хэндл машины\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isCharOnScreen || Проверяет виден ли персонаж.": {
		"scope": "lua",
		"prefix": "isCharOnScreen || Проверяет виден ли персонаж.",
		"body": [
			"${1:bool result} = isCharOnScreen(${0:Ped ped})"
		],
		"description": "isCharOnScreen - Проверяет виден ли персонаж.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isObjectOnScreen || Проверяет виден ли объект.": {
		"scope": "lua",
		"prefix": "isObjectOnScreen || Проверяет виден ли объект.",
		"body": [
			"${1:bool result} = isObjectOnScreen(${0:Object object})"
		],
		"description": "isObjectOnScreen - Проверяет виден ли объект.\nПринимаемые значения:\nObject object хэндл объекта\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"getGroundZFor3dCoord || Находит высоту относительно 3д координат.": {
		"scope": "lua",
		"prefix": "getGroundZFor3dCoord || Находит высоту относительно 3д координат.",
		"body": [
			"${1:float z} = getGroundZFor3dCoord(${0:float atX, float atY, float atZ})"
		],
		"description": "getGroundZFor3dCoord - Находит высоту относительно 3д координат.\nПринимаемые значения:\nfloat atX , float atY , float atZ Координаты\n\nВозвращаемые значения:\nfloat z Результат\n"
	},
	"boatStop || Заглушить мотор т/c": {
		"scope": "lua",
		"prefix": "boatStop || Заглушить мотор т/c",
		"body": [
			"boatStop(${0:Vehicle car})"
		],
		"description": "boatStop - Заглушить мотор т/c\nПринимаемые значения:\nVehicle car хэндл т/c\n\nВозвращаемые значения:\n\n"
	},
	"isCharShootingInArea || Проверяет выстрелил ли персонаж в заданной зоне.": {
		"scope": "lua",
		"prefix": "isCharShootingInArea || Проверяет выстрелил ли персонаж в заданной зоне.",
		"body": [
			"${1:bool result} = isCharShootingInArea(${0:pedhandle ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, int weapon})"
		],
		"description": "isCharShootingInArea - Проверяет выстрелил ли персонаж в заданной зоне.\nПринимаемые значения:\npedhandle ped Хендл персонажа.\n\nВозвращаемые значения:\nbool result Результат проверки.\n"
	},
	"isCurrentCharWeapon || Проверяет держит ли игрок в руках указанное оружие.": {
		"scope": "lua",
		"prefix": "isCurrentCharWeapon || Проверяет держит ли игрок в руках указанное оружие.",
		"body": [
			"${1:bool result} = isCurrentCharWeapon(${0:Ped ped, int weapon})"
		],
		"description": "isCurrentCharWeapon - Проверяет держит ли игрок в руках указанное оружие.\nПринимаемые значения:\nPed ped хэндл персонажа, int weapon ид оружия\n\nВозвращаемые значения:\nbool result Результат проверки\n"
	},
	"setBoatCruiseSpeed || Устанавливает максимальную скорость лодки.": {
		"scope": "lua",
		"prefix": "setBoatCruiseSpeed || Устанавливает максимальную скорость лодки.",
		"body": [
			"setBoatCruiseSpeed(${0:Vehicle boat, float maxSpeed})"
		],
		"description": "setBoatCruiseSpeed - Устанавливает максимальную скорость лодки.\nПринимаемые значения:\nVehicle boat скриптовый хэндл транспортного средства, float maxSpeed максимальная скорость автомобиля\n\nВозвращаемые значения:\n\n"
	},
	"isCharShooting || Проверяет выстрелил ли персонаж.": {
		"scope": "lua",
		"prefix": "isCharShooting || Проверяет выстрелил ли персонаж.",
		"body": [
			"${1:bool result} = isCharShooting(${0:Ped ped})"
		],
		"description": "isCharShooting - Проверяет выстрелил ли персонаж.\nПринимаемые значения:\nPed ped Хендл персонажа\\\\\n\nВозвращаемые значения:\nbool result Результат проверки\\\\\n"
	},
	"getCarSpeed || Получает скорость машины по ее хендлу.": {
		"scope": "lua",
		"prefix": "getCarSpeed || Получает скорость машины по ее хендлу.",
		"body": [
			"${1:float speed} = getCarSpeed(${0:Vehicle car})"
		],
		"description": "getCarSpeed - Получает скорость машины по ее хендлу.\nПринимаемые значения:\nVehicle car Хендл машины\n\nВозвращаемые значения:\nfloat speed Скорость машины\n"
	},
	"restoreCameraJumpcut || Восстанавливает камеру в исходное положение": {
		"scope": "lua",
		"prefix": "restoreCameraJumpcut || Восстанавливает камеру в исходное положение",
		"body": [
			"restoreCameraJumpcut(${0:})"
		],
		"description": "restoreCameraJumpcut - Восстанавливает камеру в исходное положение\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"isCharModel || Сверяет модель персонажа с указанной.": {
		"scope": "lua",
		"prefix": "isCharModel || Сверяет модель персонажа с указанной.",
		"body": [
			"${1:bool result} = isCharModel(${0:pedhandle ped, model model})"
		],
		"description": "isCharModel - Сверяет модель персонажа с указанной.\nПринимаемые значения:\npedhandle ped Хендл персонажа., model model Номер модели.\n\nВозвращаемые значения:\nbool result Результат проверки.\n"
	},
	"hasCharBeenDamagedByWeapon || Проверяет с указанного оружия было попадание по персонажу.": {
		"scope": "lua",
		"prefix": "hasCharBeenDamagedByWeapon || Проверяет с указанного оружия было попадание по персонажу.",
		"body": [
			"${1:bool result} = hasCharBeenDamagedByWeapon(${0:Ped ped, int weapon})"
		],
		"description": "hasCharBeenDamagedByWeapon - Проверяет с указанного оружия было попадание по персонажу.\nПринимаемые значения:\nPed ped хендл персонажа, int weapon ID оружия\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"hasCarBeenDamagedByWeapon || Проверяет с указанного ли оружия было попадание в машину.": {
		"scope": "lua",
		"prefix": "hasCarBeenDamagedByWeapon || Проверяет с указанного ли оружия было попадание в машину.",
		"body": [
			"${1:bool result} = hasCarBeenDamagedByWeapon(${0:Vehicle car, int weapon})"
		],
		"description": "hasCarBeenDamagedByWeapon - Проверяет с указанного ли оружия было попадание в машину.\nПринимаемые значения:\nVehicle car хендл машины, int weapon ID оружия\n\nВозвращаемые значения:\nbool result Результат проверки\n"
	},
	"setCameraZoom || Устанавливает режим камеры": {
		"scope": "lua",
		"prefix": "setCameraZoom || Устанавливает режим камеры",
		"body": [
			"setCameraZoom(${0:int mode})"
		],
		"description": "setCameraZoom - Устанавливает режим камеры\nПринимаемые значения:\nint mode режим камеры 0/1/2\n\nВозвращаемые значения:\n\n"
	},
	"setPlayerNeverGetsTired || Устанавливает, может ли игрок устать.": {
		"scope": "lua",
		"prefix": "setPlayerNeverGetsTired || Устанавливает, может ли игрок устать.",
		"body": [
			"setPlayerNeverGetsTired(${0:Player player, bool infiniteRun})"
		],
		"description": "setPlayerNeverGetsTired - Устанавливает, может ли игрок устать.\nПринимаемые значения:\nPlayer player скриптовый хендл игрока, bool infiniteRun может ли игрок устать (true-не может, false-может)\n\nВозвращаемые значения:\n\n"
	},
	"setPlayerFastReload || Игроку не нужно будет перезаряжаться.": {
		"scope": "lua",
		"prefix": "setPlayerFastReload || Игроку не нужно будет перезаряжаться.",
		"body": [
			"setPlayerFastReload(${0:Player player, bool fastReload})"
		],
		"description": "setPlayerFastReload - Игроку не нужно будет перезаряжаться.\nПринимаемые значения:\nPlayer player хендл игрока, bool fastReload true - включить, false - выключить\n\nВозвращаемые значения:\n\n"
	},
	"setCharBleeding || Начинает кровотечение у персонажа": {
		"scope": "lua",
		"prefix": "setCharBleeding || Начинает кровотечение у персонажа",
		"body": [
			"setCharBleeding(${0:Ped ped, bool bleeding})"
		],
		"description": "setCharBleeding - Начинает кровотечение у персонажа\nПринимаемые значения:\nPed ped скриптовый хендл игрового персонажа, bool bleeding течение крови(true-течёт, false-не течёт)\n\nВозвращаемые значения:\n\n"
	},
	"setCharVisible || Устанавливает актёру невидимость": {
		"scope": "lua",
		"prefix": "setCharVisible || Устанавливает актёру невидимость",
		"body": [
			"setCharVisible(${0:Ped ped, bool visible})"
		],
		"description": "setCharVisible - Устанавливает актёру невидимость\nПринимаемые значения:\nPed ped актёр, bool visible значение невидимости\n\nВозвращаемые значения:\n\n"
	},
	"addArmourToChar || Выдаёт броню персонажу": {
		"scope": "lua",
		"prefix": "addArmourToChar || Выдаёт броню персонажу",
		"body": [
			"addArmourToChar(${0:Ped ped, int points})"
		],
		"description": "addArmourToChar - Выдаёт броню персонажу\nПринимаемые значения:\nPed ped скриптовый хендл игрового персонажа, int points количество выданной брони\n\nВозвращаемые значения:\n\n"
	},
	"warpCharFromCarToCoord || Вытаскивает персонажа из машины на указанные координаты.": {
		"scope": "lua",
		"prefix": "warpCharFromCarToCoord || Вытаскивает персонажа из машины на указанные координаты.",
		"body": [
			"warpCharFromCarToCoord(${0:Ped ped, float placeAtX, float placeAtY, float placeAtZ})"
		],
		"description": "warpCharFromCarToCoord - Вытаскивает персонажа из машины на указанные координаты.\nПринимаемые значения:\nPed ped хендл персонажа, float placeAtX, float placeAtY, float placeAtZ координаты XYZ.\n\nВозвращаемые значения:\n\n"
	},
	"warpCharIntoCar || Помещает педа в указанный транспорт": {
		"scope": "lua",
		"prefix": "warpCharIntoCar || Помещает педа в указанный транспорт",
		"body": [
			"warpCharIntoCar(${0:Ped ped, Vehicle car})"
		],
		"description": "warpCharIntoCar - Помещает педа в указанный транспорт\nПринимаемые значения:\nPed ped хендл педа/актера, Vehicle car хендл транспорта\n\nВозвращаемые значения:\n\n"
	},
	"setCameraBehindPlayer || Устанавливает камеру позади игрока": {
		"scope": "lua",
		"prefix": "setCameraBehindPlayer || Устанавливает камеру позади игрока",
		"body": [
			"setCameraBehindPlayer(${0:})"
		],
		"description": "setCameraBehindPlayer - Устанавливает камеру позади игрока\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"createRandomChar || Создает персонажа в заданных координатах с рандомной моделью и поведением пешехода.": {
		"scope": "lua",
		"prefix": "createRandomChar || Создает персонажа в заданных координатах с рандомной моделью и поведением пешехода.",
		"body": [
			"${1:Ped ped} = createRandomChar(${0:float atX, float atY, float atZ})"
		],
		"description": "createRandomChar - Создает персонажа в заданных координатах с рандомной моделью и поведением пешехода.\nПринимаемые значения:\nfloat atX, float atY, float atZ координаты персонажа (XYZ).\n\nВозвращаемые значения:\nPed ped хэндл персонажа.\n"
	},
	"setObjectCollision || Устанавливает коллизию определенному объекту.": {
		"scope": "lua",
		"prefix": "setObjectCollision || Устанавливает коллизию определенному объекту.",
		"body": [
			"setObjectCollision(${0:Object object, bool collision})"
		],
		"description": "setObjectCollision - Устанавливает коллизию определенному объекту.\nПринимаемые значения:\nObject object хэндл объекта, bool collision состояние\n\nВозвращаемые значения:\n\n"
	},
	"loadAllModelsNow || Загрузка ранее запрошенных моделей": {
		"scope": "lua",
		"prefix": "loadAllModelsNow || Загрузка ранее запрошенных моделей",
		"body": [
			"loadAllModelsNow(${0:})"
		],
		"description": "loadAllModelsNow - Загрузка ранее запрошенных моделей\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"setCharAnimSpeed || Устанавливает скорость анимации персонажу": {
		"scope": "lua",
		"prefix": "setCharAnimSpeed || Устанавливает скорость анимации персонажу",
		"body": [
			"setCharAnimSpeed(${0:Ped ped, string animation, float speed})"
		],
		"description": "setCharAnimSpeed - Устанавливает скорость анимации персонажу\nПринимаемые значения:\nPed ped хэндл персонажа, string animation название анимации, float speed скорость анимации\n\nВозвращаемые значения:\n\n"
	},
	"switchCarSiren || Включает/выключает сирену на автомобиле": {
		"scope": "lua",
		"prefix": "switchCarSiren || Включает/выключает сирену на автомобиле",
		"body": [
			"switchCarSiren(${0:Vehicle car, bool siren})"
		],
		"description": "switchCarSiren - Включает/выключает сирену на автомобиле\nПринимаемые значения:\nVehicle car скриптовый хендл автомобиля, bool siren состояние сирены(true-включена, false-выключена)\n\nВозвращаемые значения:\n\n"
	},
	"isCharMale || Проверяет является ли персонаж мужским.": {
		"scope": "lua",
		"prefix": "isCharMale || Проверяет является ли персонаж мужским.",
		"body": [
			"${1:bool result} = isCharMale(${0:Ped ped})"
		],
		"description": "isCharMale - Проверяет является ли персонаж мужским.\nПринимаемые значения:\nPed ped хэндл персонажа.\n\nВозвращаемые значения:\nbool result результат проверки.\n"
	},
	"setEveryoneIgnorePlayer || Устанавливает игнорирование пешеходов к игроку.": {
		"scope": "lua",
		"prefix": "setEveryoneIgnorePlayer || Устанавливает игнорирование пешеходов к игроку.",
		"body": [
			"setEveryoneIgnorePlayer(${0:Player player, bool ignored})"
		],
		"description": "setEveryoneIgnorePlayer - Устанавливает игнорирование пешеходов к игроку.\nПринимаемые значения:\nPlayer player хендл, bool ignored true - включить игнорирование, false - выключить игнорирование\n\nВозвращаемые значения:\n\n"
	},
	"storeCarCharIsInNoSave || Возвращает хендл машины, используемый педом.": {
		"scope": "lua",
		"prefix": "storeCarCharIsInNoSave || Возвращает хендл машины, используемый педом.",
		"body": [
			"${1:Vehicle car} = storeCarCharIsInNoSave(${0:Ped ped})"
		],
		"description": "storeCarCharIsInNoSave - Возвращает хендл машины, используемый педом.\nПринимаемые значения:\nPed ped хендл педа/актера\n\nВозвращаемые значения:\nVehicle car хендл машины\n"
	},
	"setCameraInFrontOfPlayer || Помещает камеру перед игроком, указывая на игрока.": {
		"scope": "lua",
		"prefix": "setCameraInFrontOfPlayer || Помещает камеру перед игроком, указывая на игрока.",
		"body": [
			"setCameraInFrontOfPlayer(${0:})"
		],
		"description": "setCameraInFrontOfPlayer - Помещает камеру перед игроком, указывая на игрока.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"doesObjectExist || Проверяет, существует ли объект, возвращает true если объект существует": {
		"scope": "lua",
		"prefix": "doesObjectExist || Проверяет, существует ли объект, возвращает true если объект существует",
		"body": [
			"${1:bool result} = doesObjectExist(${0:Object object})"
		],
		"description": "doesObjectExist - Проверяет, существует ли объект, возвращает true если объект существует\nПринимаемые значения:\nObject object хэндл объекта\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"addBlipForPickup || Создает маркер над пикапом.": {
		"scope": "lua",
		"prefix": "addBlipForPickup || Создает маркер над пикапом.",
		"body": [
			"${1:markerhandle marker} = addBlipForPickup(${0:pickuphandle pickup})"
		],
		"description": "addBlipForPickup - Создает маркер над пикапом.\nПринимаемые значения:\npickuphandle pickup Хендл пикапа.\n\nВозвращаемые значения:\nmarkerhandle marker Хендл маркера.\n"
	},
	"getCarColours || Получает цвета автомобиля.": {
		"scope": "lua",
		"prefix": "getCarColours || Получает цвета автомобиля.",
		"body": [
			"${1:int primaryColor, int secondaryColor} = getCarColours(${0:carhandle car})"
		],
		"description": "getCarColours - Получает цвета автомобиля.\nПринимаемые значения:\ncarhandle car Хендл машины.\n\nВозвращаемые значения:\nint primaryColor Первичный цвет., int secondaryColor Вторичный цвет.\n"
	},
	"setFreeHealthCare || Определяет, будут ли с игрока после смерти взымать деньги за лечение.": {
		"scope": "lua",
		"prefix": "setFreeHealthCare || Определяет, будут ли с игрока после смерти взымать деньги за лечение.",
		"body": [
			"setFreeHealthCare(${0:Player player, bool free})"
		],
		"description": "setFreeHealthCare - Определяет, будут ли с игрока после смерти взымать деньги за лечение.\nПринимаемые значения:\nPlayer player скриптовый хендл игрока, bool free возможность бесплатного лечения(true-бесплатно, false-платно)\n\nВозвращаемые значения:\n\n"
	},
	"getAmmoInCharWeapon || Получает количество патронов у персонажа.": {
		"scope": "lua",
		"prefix": "getAmmoInCharWeapon || Получает количество патронов у персонажа.",
		"body": [
			"${1:int ammo} = getAmmoInCharWeapon(${0:Ped ped, int int})"
		],
		"description": "getAmmoInCharWeapon - Получает количество патронов у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа, int int ID оружия\n\nВозвращаемые значения:\nint ammo количество патронов\n"
	},
	"setRadioChannel || Устанавливает радиостанцию, играющую в машине.": {
		"scope": "lua",
		"prefix": "setRadioChannel || Устанавливает радиостанцию, играющую в машине.",
		"body": [
			"setRadioChannel(${0:int radioStation})"
		],
		"description": "setRadioChannel - Устанавливает радиостанцию, играющую в машине.\nПринимаемые значения:\nint radioStation номер радиостанции(0-12)\n\nВозвращаемые значения:\n\n"
	},
	"warpCharIntoCarAsPassenger || Телепортирует персонажа в автомобиль на выбранное сидение": {
		"scope": "lua",
		"prefix": "warpCharIntoCarAsPassenger || Телепортирует персонажа в автомобиль на выбранное сидение",
		"body": [
			"warpCharIntoCarAsPassenger(${0:Ped ped, Vehicle car, int passengerSeat})"
		],
		"description": "warpCharIntoCarAsPassenger - Телепортирует персонажа в автомобиль на выбранное сидение\nПринимаемые значения:\nPed ped хэндл персонажа, Vehicle car хэндл машины, int passengerSeat номер сидения\n\nВозвращаемые значения:\n\n"
	},
	"isCarPassengerSeatFree || Проверяет, доступно ли пассажирское сидение": {
		"scope": "lua",
		"prefix": "isCarPassengerSeatFree || Проверяет, доступно ли пассажирское сидение",
		"body": [
			"${1:bool result} = isCarPassengerSeatFree(${0:vehicle car, int seat})"
		],
		"description": "isCarPassengerSeatFree - Проверяет, доступно ли пассажирское сидение\nПринимаемые значения:\nvehicle car хэндл транспорта, int seat номер сидения\n\nВозвращаемые значения:\nbool result результат проверки\\\\\n"
	},
	"getCharInCarPassengerSeat || Получает хэндл игрока, который сидит на сидении транспортного средства": {
		"scope": "lua",
		"prefix": "getCharInCarPassengerSeat || Получает хэндл игрока, который сидит на сидении транспортного средства",
		"body": [
			"${1:Ped ped} = getCharInCarPassengerSeat(${0:Vehicle car, int seat})"
		],
		"description": "getCharInCarPassengerSeat - Получает хэндл игрока, который сидит на сидении транспортного средства\nПринимаемые значения:\nVehicle car хэндл машины, int seat номер сидения\n\nВозвращаемые значения:\nPed ped хэндл персонажа\n"
	},
	"startCredits || Вызывает титры после прохождения игры на экран.": {
		"scope": "lua",
		"prefix": "startCredits || Вызывает титры после прохождения игры на экран.",
		"body": [
			"startCredits(${0:})"
		],
		"description": "startCredits - Вызывает титры после прохождения игры на экран.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"stopCredits || Убирает титры после прохождения игры с экрана.": {
		"scope": "lua",
		"prefix": "stopCredits || Убирает титры после прохождения игры с экрана.",
		"body": [
			"stopCredits(${0:})"
		],
		"description": "stopCredits - Убирает титры после прохождения игры с экрана.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"areCreditsFinished || Проверяет, закончились ли титры окончания игры.": {
		"scope": "lua",
		"prefix": "areCreditsFinished || Проверяет, закончились ли титры окончания игры.",
		"body": [
			"${1:bool result} = areCreditsFinished(${0:})"
		],
		"description": "areCreditsFinished - Проверяет, закончились ли титры окончания игры.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result Результат проверки\n"
	},
	"getCarModel || Возвращает ID транспорта по хендл машины": {
		"scope": "lua",
		"prefix": "getCarModel || Возвращает ID транспорта по хендл машины",
		"body": [
			"${1:Model modelId} = getCarModel(${0:Vehicle veh})"
		],
		"description": "getCarModel - Возвращает ID транспорта по хендл машины\nПринимаемые значения:\nVehicle veh хендл машины\n\nВозвращаемые значения:\nModel modelId ID транспорта\n"
	},
	"isCharSittingInCar || Проверяет, сидит ли хэндл в указанном т/c": {
		"scope": "lua",
		"prefix": "isCharSittingInCar || Проверяет, сидит ли хэндл в указанном т/c",
		"body": [
			"${1:bool result} = isCharSittingInCar(${0:Ped ped, Vehicle car})"
		],
		"description": "isCharSittingInCar - Проверяет, сидит ли хэндл в указанном т/c\nПринимаемые значения:\nPed ped хэндл персонажа игрока, Vehicle car хэндл т/с\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"isCharSittingInAnyCar || Проверяет находится ли игрок в любой машине": {
		"scope": "lua",
		"prefix": "isCharSittingInAnyCar || Проверяет находится ли игрок в любой машине",
		"body": [
			"${1:bool result} = isCharSittingInAnyCar(${0:Ped ped})"
		],
		"description": "isCharSittingInAnyCar - Проверяет находится ли игрок в любой машине\nПринимаемые значения:\nPed ped хэндл\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"getDebugCameraCoordinates || Возвращает позицию отладочной камеры.": {
		"scope": "lua",
		"prefix": "getDebugCameraCoordinates || Возвращает позицию отладочной камеры.",
		"body": [
			"${1:float X, float Y, float Z} = getDebugCameraCoordinates(${0:})"
		],
		"description": "getDebugCameraCoordinates - Возвращает позицию отладочной камеры.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nfloat X ,, float Y ,, float Z координаты\n"
	},
	"getDebugCameraPointAt || Возвращает координаты на которые указывает отладочная камера.": {
		"scope": "lua",
		"prefix": "getDebugCameraPointAt || Возвращает координаты на которые указывает отладочная камера.",
		"body": [
			"${1:float X, float Y, float Z} = getDebugCameraPointAt(${0:})"
		],
		"description": "getDebugCameraPointAt - Возвращает координаты на которые указывает отладочная камера.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nfloat X ,, float Y ,, float Z координаты\n"
	},
	"clearCharLastWeaponDamage || Очищает последний урон нанесённый персонажу.": {
		"scope": "lua",
		"prefix": "clearCharLastWeaponDamage || Очищает последний урон нанесённый персонажу.",
		"body": [
			"clearCharLastWeaponDamage(${0:Ped ped})"
		],
		"description": "clearCharLastWeaponDamage - Очищает последний урон нанесённый персонажу.\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\n\n"
	},
	"clearCarLastWeaponDamage || Очищает последний нанесенный урон машине.": {
		"scope": "lua",
		"prefix": "clearCarLastWeaponDamage || Очищает последний нанесенный урон машине.",
		"body": [
			"clearCarLastWeaponDamage(${0:Vehicle car})"
		],
		"description": "clearCarLastWeaponDamage - Очищает последний нанесенный урон машине.\nПринимаемые значения:\nVehicle car хендл машины\n\nВозвращаемые значения:\n\n"
	},
	"getDriverOfCar || Возвращает водителя указанного транспортного средства": {
		"scope": "lua",
		"prefix": "getDriverOfCar || Возвращает водителя указанного транспортного средства",
		"body": [
			"${1:Ped ped} = getDriverOfCar(${0:Vehicle car})"
		],
		"description": "getDriverOfCar - Возвращает водителя указанного транспортного средства\nПринимаемые значения:\nVehicle car скриптовый хендл транспортного средства\n\nВозвращаемые значения:\nPed ped скриптовый хендл персонажа\n"
	},
	"getCurrentCharWeapon || Получает оружие находящееся в руках у персонажа.": {
		"scope": "lua",
		"prefix": "getCurrentCharWeapon || Получает оружие находящееся в руках у персонажа.",
		"body": [
			"${1:int weapon} = getCurrentCharWeapon(${0:Ped ped})"
		],
		"description": "getCurrentCharWeapon - Получает оружие находящееся в руках у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\nint weapon оружие\n"
	},
	"isCharOnAnyBike || Возвращает true если пед находится на мотоцикле/велосипеде": {
		"scope": "lua",
		"prefix": "isCharOnAnyBike || Возвращает true если пед находится на мотоцикле/велосипеде",
		"body": [
			"${1:bool result} = isCharOnAnyBike(${0:Ped ped})"
		],
		"description": "isCharOnAnyBike - Возвращает true если пед находится на мотоцикле/велосипеде\nПринимаемые значения:\nPed ped хендл педа/актера\n\nВозвращаемые значения:\nnone\n"
	},
	"isModelAvailable || Проверяет доступна ли модель для использования.": {
		"scope": "lua",
		"prefix": "isModelAvailable || Проверяет доступна ли модель для использования.",
		"body": [
			"${1:bool result} = isModelAvailable(${0:model model})"
		],
		"description": "isModelAvailable - Проверяет доступна ли модель для использования.\nПринимаемые значения:\nmodel model Номер модели.\n\nВозвращаемые значения:\nbool result Результат.\n"
	},
	"isAnyPickupAtCoords || Проверяет есть ли на указанных координатах любой пикап.": {
		"scope": "lua",
		"prefix": "isAnyPickupAtCoords || Проверяет есть ли на указанных координатах любой пикап.",
		"body": [
			"${1:bool result} = isAnyPickupAtCoords(${0:float pickupX, float pickupY, float pickupZ})"
		],
		"description": "isAnyPickupAtCoords - Проверяет есть ли на указанных координатах любой пикап.\nПринимаемые значения:\nfloat pickupX , float pickupY , float pickupZ Координаты (XYZ)\n\nВозвращаемые значения:\nbool result Результат.\n"
	},
	"removeAllCharWeapons || Удаляет все оружие у персонажа.": {
		"scope": "lua",
		"prefix": "removeAllCharWeapons || Удаляет все оружие у персонажа.",
		"body": [
			"removeAllCharWeapons(${0:Ped ped})"
		],
		"description": "removeAllCharWeapons - Удаляет все оружие у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\n\n"
	},
	"hasCharGotWeapon || Проверяет наличие указанного оружия у персонажа.": {
		"scope": "lua",
		"prefix": "hasCharGotWeapon || Проверяет наличие указанного оружия у персонажа.",
		"body": [
			"${1:bool result} = hasCharGotWeapon(${0:Ped ped, int weapon})"
		],
		"description": "hasCharGotWeapon - Проверяет наличие указанного оружия у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа, int weapon ID оружия\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"isCarOnFire || Проверяет, горит ли автомобиль.": {
		"scope": "lua",
		"prefix": "isCarOnFire || Проверяет, горит ли автомобиль.",
		"body": [
			"${1:bool state} = isCarOnFire(${0:Vehicle car})"
		],
		"description": "isCarOnFire - Проверяет, горит ли автомобиль.\nПринимаемые значения:\nVehicle car хендл машины\n\nВозвращаемые значения:\nbool state состояние автомобиля\n"
	},
	"isCarTireBurst || Возвращает true при спущенном колесе автомобиля": {
		"scope": "lua",
		"prefix": "isCarTireBurst || Возвращает true при спущенном колесе автомобиля",
		"body": [
			"${1:bool result} = isCarTireBurst(${0:Vehicle car, int tire})"
		],
		"description": "isCarTireBurst - Возвращает true при спущенном колесе автомобиля\nПринимаемые значения:\nVehicle car автомобиль, int tire номер колеса\n\nВозвращаемые значения:\nnone\n"
	},
	"isCharInAnyBoat || Проверяет педа на нахождение в т/c типа \"Лодка\"": {
		"scope": "lua",
		"prefix": "isCharInAnyBoat || Проверяет педа на нахождение в т/c типа \"Лодка\"",
		"body": [
			"${1:bool result} = isCharInAnyBoat(${0:Ped ped})"
		],
		"description": "isCharInAnyBoat - Проверяет педа на нахождение в т/c типа \"Лодка\"\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
	},
	"isCharInAnyHeli || Проверяет педа на нахождение в т/с типа \"Вертолет\"": {
		"scope": "lua",
		"prefix": "isCharInAnyHeli || Проверяет педа на нахождение в т/с типа \"Вертолет\"",
		"body": [
			"${1:bool result} = isCharInAnyHeli(${0:Ped ped})"
		],
		"description": "isCharInAnyHeli - Проверяет педа на нахождение в т/с типа \"Вертолет\"\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
	},
	"isCharInAnyPlane || Проверяет хэндл на нахождение в т/с типа \"Самолёт\"": {
		"scope": "lua",
		"prefix": "isCharInAnyPlane || Проверяет хэндл на нахождение в т/с типа \"Самолёт\"",
		"body": [
			"${1:bool result} = isCharInAnyPlane(${0:Ped ped})"
		],
		"description": "isCharInAnyPlane - Проверяет хэндл на нахождение в т/с типа \"Самолёт\"\nПринимаемые значения:\nPed ped хэндл\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"isCharInWater || Проверяет педа на нахождение в воде": {
		"scope": "lua",
		"prefix": "isCharInWater || Проверяет педа на нахождение в воде",
		"body": [
			"${1:bool result} = isCharInWater(${0:Ped ped})"
		],
		"description": "isCharInWater - Проверяет педа на нахождение в воде\nПринимаемые значения:\nPed ped хэндл игрока\n\nВозвращаемые значения:\nnone\n"
	},
	"getCharWeaponInSlot || Получает данные об оружии в указанном слоте.": {
		"scope": "lua",
		"prefix": "getCharWeaponInSlot || Получает данные об оружии в указанном слоте.",
		"body": [
			"${1:int weapon, int ammo, Model Model} = getCharWeaponInSlot(${0:Ped ped, int slot})"
		],
		"description": "getCharWeaponInSlot - Получает данные об оружии в указанном слоте.\nПринимаемые значения:\nPed ped хендл персонажа, int slot номер слота\n\nВозвращаемые значения:\nint weapon ID оружия, int ammo количество патронов к оружию, Model model модель оружия\n"
	},
	"getOffsetFromCharInWorldCoords || Возвращает позицию педа с указанным смещением": {
		"scope": "lua",
		"prefix": "getOffsetFromCharInWorldCoords || Возвращает позицию педа с указанным смещением",
		"body": [
			"${1:float X, float Y, float Z} = getOffsetFromCharInWorldCoords(${0:Ped ped, float offsetX, float offsetY, float offsetZ})"
		],
		"description": "getOffsetFromCharInWorldCoords - Возвращает позицию педа с указанным смещением\nПринимаемые значения:\nPed ped хендл педа/актера, float offsetX смещение по оси X, float offsetY смещение по оси Y, float offsetZ смещение по оси Z\n\nВозвращаемые значения:\nfloat X позиция по оси X, float Y позиция по оси Y, float Z позиция по оси Z\n"
	},
	"freezeCharPosition || Замораживает координаты персонажа по его хендлу": {
		"scope": "lua",
		"prefix": "freezeCharPosition || Замораживает координаты персонажа по его хендлу",
		"body": [
			"freezeCharPosition(${0:Ped ped, bool locked})"
		],
		"description": "freezeCharPosition - Замораживает координаты персонажа по его хендлу\nПринимаемые значения:\nPed ped Хендл персонажа, bool locked Статус заморозки\n\nВозвращаемые значения:\n\n"
	},
	"getCharArmour || Возвращает количество брони у педа": {
		"scope": "lua",
		"prefix": "getCharArmour || Возвращает количество брони у педа",
		"body": [
			"${1:int armour} = getCharArmour(${0:Ped ped})"
		],
		"description": "getCharArmour - Возвращает количество брони у педа\nПринимаемые значения:\nPed ped хендл персонажа\n\nВозвращаемые значения:\nint armour значение брони\n"
	},
	"locateObject2d || Проверяет нахождение объекта в указанных координат в определенном радиусе": {
		"scope": "lua",
		"prefix": "locateObject2d || Проверяет нахождение объекта в указанных координат в определенном радиусе",
		"body": [
			"${1:bool result} = locateObject2d(${0:Object object, float X, float Y, float radiusX, float radiusY, bool sphere})"
		],
		"description": "locateObject2d - Проверяет нахождение объекта в указанных координат в определенном радиусе\nПринимаемые значения:\nObject object , float X Позиция по оси X, float Y Позиция по оси Y, float Z Позиция по оси Z, float radiusX Дистанция проверки по оси X, float radiusY Дистанция проверки по оси Y, bool sphere Отображать проверяемую дистанцию в виде сферы\n\nВозвращаемые значения:\nnone\n"
	},
	"locateObject3d || Проверяет нахождение объекта в указанных координат в определенном радиусе": {
		"scope": "lua",
		"prefix": "locateObject3d || Проверяет нахождение объекта в указанных координат в определенном радиусе",
		"body": [
			"${1:bool result} = locateObject3d(${0:Object object, float X, float Y, float Z, float radiusX, float radiusY, float radiusZ, bool flag})"
		],
		"description": "locateObject3d - Проверяет нахождение объекта в указанных координат в определенном радиусе\nПринимаемые значения:\nObject object , float X Позиция по оси X, float Y Позиция по оси Y, float Z Позиция по оси Z, float radiusX Дистанция проверки по оси X, float radiusY Дистанция проверки по оси Y, float radiusZ Дистанция проверки по оси Z, bool sphere Отображать проверяемую дистанцию в виде сферы\n\nВозвращаемые значения:\nnone\n"
	},
	"isObjectInWater || Проверяет нахождение объекта в воде": {
		"scope": "lua",
		"prefix": "isObjectInWater || Проверяет нахождение объекта в воде",
		"body": [
			"${1:bool result} = isObjectInWater(${0:Object object})"
		],
		"description": "isObjectInWater - Проверяет нахождение объекта в воде\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
	},
	"isObjectInArea2d || Проверяет нахождение объекта в указанном квадрате": {
		"scope": "lua",
		"prefix": "isObjectInArea2d || Проверяет нахождение объекта в указанном квадрате",
		"body": [
			"${1:bool result} = isObjectInArea2d(${0:Object object, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere})"
		],
		"description": "isObjectInArea2d - Проверяет нахождение объекта в указанном квадрате\nПринимаемые значения:\nObject object , float cornerAX Начальная координата по оси X, float cornerAY Начальная координата по оси Y, float cornerBX Конечная координата по оси X, float cornerBY Конечная координата по оси Y, bool sphere Отображать границы квадрата в виде сферы\n\nВозвращаемые значения:\nnone\n"
	},
	"isObjectInArea3d || Проверяет нахождение объекта в указанном кубе": {
		"scope": "lua",
		"prefix": "isObjectInArea3d || Проверяет нахождение объекта в указанном кубе",
		"body": [
			"${1:bool result} = isObjectInArea3d(${0:Object object, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool flag})"
		],
		"description": "isObjectInArea3d - Проверяет нахождение объекта в указанном кубе\nПринимаемые значения:\nObject object , float cornerAX Начальная координата по оси X, float cornerAY Начальная координата по оси Y, float cornerAZ Начальная координата по оси Z, float cornerBX Конечная координата по оси X, float cornerBY Конечная координата по оси Y, float cornerBZ Конечная координата по оси Z, bool flag Отображать границы куба в виде сферы\n\nВозвращаемые значения:\nnone\n"
	},
	"requestAnimation || Предварительная загрузка файла анимации": {
		"scope": "lua",
		"prefix": "requestAnimation || Предварительная загрузка файла анимации",
		"body": [
			"requestAnimation(${0:string animation})"
		],
		"description": "requestAnimation - Предварительная загрузка файла анимации\nПринимаемые значения:\nstring animation файл анимаций\\\\\n\nВозвращаемые значения:\n\n"
	},
	"getDistanceBetweenCoords3d || Получение дистанции между двумя точками в игровом мире (3D)": {
		"scope": "lua",
		"prefix": "getDistanceBetweenCoords3d || Получение дистанции между двумя точками в игровом мире (3D)",
		"body": [
			"${1:float distance} = getDistanceBetweenCoords3d(${0:float x1,float y1,float z1,float x2,float y2,float z2})"
		],
		"description": "getDistanceBetweenCoords3d - Получение дистанции между двумя точками в игровом мире (3D)\nПринимаемые значения:\nfloat x1, float y1, float z1 координаты первой точки, float x2, float y2, float z2 координаты второй точки\n\nВозвращаемые значения:\nfloat distance дистанция\n"
	},
	"removeWeaponFromChar || Удаляет указанное оружие у персонажа.": {
		"scope": "lua",
		"prefix": "removeWeaponFromChar || Удаляет указанное оружие у персонажа.",
		"body": [
			"removeWeaponFromChar(${0:Ped ped, int weapon})"
		],
		"description": "removeWeaponFromChar - Удаляет указанное оружие у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа, int weapon ID оружия\n\nВозвращаемые значения:\n\n"
	},
	"isCharInAnyPoliceVehicle || Проверяет управляет ли хэндл полицейской машиной": {
		"scope": "lua",
		"prefix": "isCharInAnyPoliceVehicle || Проверяет управляет ли хэндл полицейской машиной",
		"body": [
			"${1:bool result} = isCharInAnyPoliceVehicle(${0:Ped ped})"
		],
		"description": "isCharInAnyPoliceVehicle - Проверяет управляет ли хэндл полицейской машиной\nПринимаемые значения:\nPed ped хэндл\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"doesCharExist || Проверяет хэндл на существование": {
		"scope": "lua",
		"prefix": "doesCharExist || Проверяет хэндл на существование",
		"body": [
			"${1:bool result} = doesCharExist(${0:Ped ped})"
		],
		"description": "doesCharExist - Проверяет хэндл на существование\nПринимаемые значения:\nPed ped хэндл\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"doesVehicleExist || Проверяет существование транспорта.": {
		"scope": "lua",
		"prefix": "doesVehicleExist || Проверяет существование транспорта.",
		"body": [
			"${1:bool result} = doesVehicleExist(${0:Vehicle car})"
		],
		"description": "doesVehicleExist - Проверяет существование транспорта.\nПринимаемые значения:\nVehicle car хэндл транспорта\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"setAllTaxisHaveNitro || Устанавливает на все такси нитро.": {
		"scope": "lua",
		"prefix": "setAllTaxisHaveNitro || Устанавливает на все такси нитро.",
		"body": [
			"setAllTaxisHaveNitro(${0:bool toggle})"
		],
		"description": "setAllTaxisHaveNitro - Устанавливает на все такси нитро.\nПринимаемые значения:\nbool toggle true - установить, false - снять\n\nВозвращаемые значения:\n\n"
	},
	"taskDie || Отправляет смерть персонажа по его хендлу": {
		"scope": "lua",
		"prefix": "taskDie || Отправляет смерть персонажа по его хендлу",
		"body": [
			"taskDie(${0:Ped ped})"
		],
		"description": "taskDie - Отправляет смерть персонажа по его хендлу\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\n\n"
	},
	"taskScratchHead || Воспроизводит анимацию где персонаж стоит расслабленно и смотрит по сторонам": {
		"scope": "lua",
		"prefix": "taskScratchHead || Воспроизводит анимацию где персонаж стоит расслабленно и смотрит по сторонам",
		"body": [
			"taskScratchHead(${0:Ped ped})"
		],
		"description": "taskScratchHead - Воспроизводит анимацию где персонаж стоит расслабленно и смотрит по сторонам\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\n\n"
	},
	"taskCarDriveToCoord || Заставляет актёра ехать на координаты определенным способом": {
		"scope": "lua",
		"prefix": "taskCarDriveToCoord || Заставляет актёра ехать на координаты определенным способом",
		"body": [
			"taskCarDriveToCoord(${0:Ped ped, Vehicle car, float toX, float toY, float toZ, float speed, int rideType, int model, int driveType})"
		],
		"description": "taskCarDriveToCoord - Заставляет актёра ехать на координаты определенным способом\nПринимаемые значения:\nPed ped хендл игрока, Vehicle car хендл транспорта, float toX, float toY, float toZ позиция к которой начнет ехать актёр, float speed скорость с которой машина будет ехать, int rideType Способ езды:, int model модель чего-то, int driveType Тип вождения:\n\nВозвращаемые значения:\n\n"
	},
	"taskPlayAnim || Заставляет актёра воспроизвести / сбить анимацию.": {
		"scope": "lua",
		"prefix": "taskPlayAnim || Заставляет актёра воспроизвести / сбить анимацию.",
		"body": [
			"taskPlayAnim(${0:Ped ped, string animation, string IFP, float framedelta, bool loop, bool lockX, bool lockY, bool lockF, int time})"
		],
		"description": "taskPlayAnim - Заставляет актёра воспроизвести / сбить анимацию.\nПринимаемые значения:\nPed ped хендл персонажа, string animation имя анимации, string IFP файл анимации, float framedelta скорость анимации, bool loop повторение анимации (true - да, false - нет), bool lockX, bool lockY блокировка позиций по X,Y (true - да, false - нет), bool lockF возврат в исходное положение (true - возвращать, false - не возвращать), int time время воспроизведения\n\nВозвращаемые значения:\n\n"
	},
	"loadCharDecisionMaker || Создает маркер поведения актера с заданным типом.": {
		"scope": "lua",
		"prefix": "loadCharDecisionMaker || Создает маркер поведения актера с заданным типом.",
		"body": [
			"${1:int maker} = loadCharDecisionMaker(${0:int type})"
		],
		"description": "loadCharDecisionMaker - Создает маркер поведения актера с заданным типом.\nПринимаемые значения:\nint type тип поведения\\\\\n\nВозвращаемые значения:\nint maker маркер модели поведения\\\\\n"
	},
	"isCharPlayingAnim || проверяет, выполняет ли пед указанную анимацию.": {
		"scope": "lua",
		"prefix": "isCharPlayingAnim || проверяет, выполняет ли пед указанную анимацию.",
		"body": [
			"${1:bool result} = isCharPlayingAnim(${0:Ped ped, string anim})"
		],
		"description": "isCharPlayingAnim - проверяет, выполняет ли пед указанную анимацию.\nПринимаемые значения:\nPed ped хэндл персонажа, string anim название анимации\n\nВозвращаемые значения:\nbool result Результат проверки\n"
	},
	"setCharCollision || Устанавливает коллизию персонажу.": {
		"scope": "lua",
		"prefix": "setCharCollision || Устанавливает коллизию персонажу.",
		"body": [
			"setCharCollision(${0:Ped ped, bool enable})"
		],
		"description": "setCharCollision - Устанавливает коллизию персонажу.\nПринимаемые значения:\nPed ped Хэндл персонажа, bool enable Статус (true\\\\false)\n\nВозвращаемые значения:\n\n"
	},
	"getPickupCoordinates || Возвращает координаты пикапа": {
		"scope": "lua",
		"prefix": "getPickupCoordinates || Возвращает координаты пикапа",
		"body": [
			"${1:float X, float Y, float Z} = getPickupCoordinates(${0:Pickup pickup})"
		],
		"description": "getPickupCoordinates - Возвращает координаты пикапа\nПринимаемые значения:\nPickup pickup хэндл пикапа\n\nВозвращаемые значения:\nfloat X - X координата, float Y - Y координата, float Z - Z координата\n"
	},
	"getCharModel || Возвращает ID скина по хэндлу персонажа.": {
		"scope": "lua",
		"prefix": "getCharModel || Возвращает ID скина по хэндлу персонажа.",
		"body": [
			"${1:int modelId} = getCharModel(${0:Ped ped})"
		],
		"description": "getCharModel - Возвращает ID скина по хэндлу персонажа.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nint modelId ID скина\n"
	},
	"hideCharWeaponForScriptedCutscene || Скрывает все оружие у персонажа.": {
		"scope": "lua",
		"prefix": "hideCharWeaponForScriptedCutscene || Скрывает все оружие у персонажа.",
		"body": [
			"hideCharWeaponForScriptedCutscene(${0:Ped ped, bool hide})"
		],
		"description": "hideCharWeaponForScriptedCutscene - Скрывает все оружие у персонажа.\nПринимаемые значения:\nPed ped хендл персонажа, bool hide будет ли скрыто оружие(true/false)\n\nВозвращаемые значения:\n\n"
	},
	"getCharSpeed || Получает скорость движения персонажа по его хендлу.": {
		"scope": "lua",
		"prefix": "getCharSpeed || Получает скорость движения персонажа по его хендлу.",
		"body": [
			"${1:float speed} = getCharSpeed(${0:Ped ped})"
		],
		"description": "getCharSpeed - Получает скорость движения персонажа по его хендлу.\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\nfloat speed Значение скорости\n"
	},
	"isLineOfSightClear || Делает проверку на наличие обьектов определенных типов между точками в трёхмерном пространстве": {
		"scope": "lua",
		"prefix": "isLineOfSightClear || Делает проверку на наличие обьектов определенных типов между точками в трёхмерном пространстве",
		"body": [
			"${1:bool result} = isLineOfSightClear(${0:float fromX, float fromY, float fromZ, float toX, float toY, float toZ, bool checkBuildings, bool checkVehicles, bool checkActors, bool checkObjects, bool checkParticles})"
		],
		"description": "isLineOfSightClear - Делает проверку на наличие обьектов определенных типов между точками в трёхмерном пространстве\nПринимаемые значения:\nfloat fromX, float fromY, float fromZ координаты первой точки, float toX, float toY, float toZ координаты второй точки, bool checkBuildings учитывать здания, bool checkVehicles учитывать транспортные средства, bool checkActors учитывать игроков, bool checkObjects учитывать объекты, bool checkParticles учитывать частицы\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"setLaRiots || Включает/выключает восстание в Лос-Сантосе, люди воруют вещи, над домами появляется дым.": {
		"scope": "lua",
		"prefix": "setLaRiots || Включает/выключает восстание в Лос-Сантосе, люди воруют вещи, над домами появляется дым.",
		"body": [
			"setLaRiots(${0:bool enable})"
		],
		"description": "setLaRiots - Включает/выключает восстание в Лос-Сантосе, люди воруют вещи, над домами появляется дым.\nПринимаемые значения:\nbool enable true - включить, false - выключить\n\nВозвращаемые значения:\n\n"
	},
	"getObjectHealth || Получает уровень здоровья объекта.": {
		"scope": "lua",
		"prefix": "getObjectHealth || Получает уровень здоровья объекта.",
		"body": [
			"${1:int health} = getObjectHealth(${0:objhandle object})"
		],
		"description": "getObjectHealth - Получает уровень здоровья объекта.\nПринимаемые значения:\nobjhandle object Хендл объекта.\n\nВозвращаемые значения:\nint health Уровень здоровья.\n"
	},
	"setObjectHealth || Устанавливает уровень здоровья объекту.": {
		"scope": "lua",
		"prefix": "setObjectHealth || Устанавливает уровень здоровья объекту.",
		"body": [
			"setObjectHealth(${0:objhandle object, int health})"
		],
		"description": "setObjectHealth - Устанавливает уровень здоровья объекту.\nПринимаемые значения:\nobjhandle object Хендл объекта., int health Уровень здоровья.\n\nВозвращаемые значения:\n\n"
	},
	"getActiveInterior || Функция получает айди интерьера, в котором находится Ваш персонаж": {
		"scope": "lua",
		"prefix": "getActiveInterior || Функция получает айди интерьера, в котором находится Ваш персонаж",
		"body": [
			"${1:int interior} = getActiveInterior(${0:})"
		],
		"description": "getActiveInterior - Функция получает айди интерьера, в котором находится Ваш персонаж\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint interior Айди интерьера\n"
	},
	"getWeapontypeModel || Получает модель оружия из его ID.": {
		"scope": "lua",
		"prefix": "getWeapontypeModel || Получает модель оружия из его ID.",
		"body": [
			"${1:int Model} = getWeapontypeModel(${0:int id})"
		],
		"description": "getWeapontypeModel - Получает модель оружия из его ID.\nПринимаемые значения:\nint id ID оружия\n\nВозвращаемые значения:\nint model номер модели\n"
	},
	"getWeapontypeSlot || Возвращает слот указанного оружия.": {
		"scope": "lua",
		"prefix": "getWeapontypeSlot || Возвращает слот указанного оружия.",
		"body": [
			"${1:int slot} = getWeapontypeSlot(${0:int id})"
		],
		"description": "getWeapontypeSlot - Возвращает слот указанного оружия.\nПринимаемые значения:\nint id ID оружия\n\nВозвращаемые значения:\nint slot номер слота\n"
	},
	"taskJetpack || Выдает джетпак персонажу по его хендлу": {
		"scope": "lua",
		"prefix": "taskJetpack || Выдает джетпак персонажу по его хендлу",
		"body": [
			"taskJetpack(${0:Ped ped})"
		],
		"description": "taskJetpack - Выдает джетпак персонажу по его хендлу\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\n\n"
	},
	"setPlayerEnterCarButton || Устанавливает, может ли игрок входить и выходить из машины.": {
		"scope": "lua",
		"prefix": "setPlayerEnterCarButton || Устанавливает, может ли игрок входить и выходить из машины.",
		"body": [
			"setPlayerEnterCarButton(${0:Player player, bool can})"
		],
		"description": "setPlayerEnterCarButton - Устанавливает, может ли игрок входить и выходить из машины.\nПринимаемые значения:\nPlayer player хендл игрока, bool can true - может, false - не может\n\nВозвращаемые значения:\n\n"
	},
	"getCurrentDayOfWeek || Возвращает текущий день недели": {
		"scope": "lua",
		"prefix": "getCurrentDayOfWeek || Возвращает текущий день недели",
		"body": [
			"getCurrentDayOfWeek(${0:})"
		],
		"description": "getCurrentDayOfWeek - Возвращает текущий день недели\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"playerEnteredQuarryCrane || Помещает игрока в кран на карьере недалеко от Лас-Вентурса.": {
		"scope": "lua",
		"prefix": "playerEnteredQuarryCrane || Помещает игрока в кран на карьере недалеко от Лас-Вентурса.",
		"body": [
			"playerEnteredQuarryCrane(${0:})"
		],
		"description": "playerEnteredQuarryCrane - Помещает игрока в кран на карьере недалеко от Лас-Вентурса.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"setCarHydraulics || Устанавливает на автомобиль гидравлику": {
		"scope": "lua",
		"prefix": "setCarHydraulics || Устанавливает на автомобиль гидравлику",
		"body": [
			"setCarHydraulics(${0:Vehicle car, bool hydraulics})"
		],
		"description": "setCarHydraulics - Устанавливает на автомобиль гидравлику\nПринимаемые значения:\nVehicle car скриптовый хэндл транспортного средства, bool hydraulics true - включить, false - выключить.\n\nВозвращаемые значения:\n\n"
	},
	"is2playerGameGoingOn || Проверяет, находиться ли игра в режиме 2 игроков.": {
		"scope": "lua",
		"prefix": "is2playerGameGoingOn || Проверяет, находиться ли игра в режиме 2 игроков.",
		"body": [
			"${1:bool result} = is2playerGameGoingOn(${0:})"
		],
		"description": "is2playerGameGoingOn - Проверяет, находиться ли игра в режиме 2 игроков.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"getCameraFov || Возвращает поле зрения.": {
		"scope": "lua",
		"prefix": "getCameraFov || Возвращает поле зрения.",
		"body": [
			"${1:float fov} = getCameraFov(${0:})"
		],
		"description": "getCameraFov - Возвращает поле зрения.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nfloat fov поле зрения\n"
	},
	"taskPlayAnimNonInterruptable || Вынуждает актера воссоздать / очистить неприкосновенную анимацию.": {
		"scope": "lua",
		"prefix": "taskPlayAnimNonInterruptable || Вынуждает актера воссоздать / очистить неприкосновенную анимацию.",
		"body": [
			"taskPlayAnimNonInterruptable(${0:Ped ped, string animation, string IFP, float framedelta, bool loop, bool lockX, bool lockY, bool lockF, int time})"
		],
		"description": "taskPlayAnimNonInterruptable - Вынуждает актера воссоздать / очистить неприкосновенную анимацию.\nПринимаемые значения:\nPed ped хендл персонажа, string animation имя анимации, string IFP файл анимации, float framedelta скорость анимации, bool loop повторение анимации (true - да, false - нет), bool lockX, bool lockY блокировка позиций по X,Y (true - да, false - нет), bool lockF возврат в исходное положение (true - возвращать, false - не возвращать), int time время воспроизведения\n\nВозвращаемые значения:\n\n"
	},
	"isCharInAir || Проверяет находится ли персонаж в воздухе.": {
		"scope": "lua",
		"prefix": "isCharInAir || Проверяет находится ли персонаж в воздухе.",
		"body": [
			"${1:bool result} = isCharInAir(${0:Ped ped})"
		],
		"description": "isCharInAir - Проверяет находится ли персонаж в воздухе.\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\nbool result Результат\n"
	},
	"getCharHeightAboveGround || Возвращает точное значение высоты над землёй относительно персонажа": {
		"scope": "lua",
		"prefix": "getCharHeightAboveGround || Возвращает точное значение высоты над землёй относительно персонажа",
		"body": [
			"${1:float height} = getCharHeightAboveGround(${0:Ped ped})"
		],
		"description": "getCharHeightAboveGround - Возвращает точное значение высоты над землёй относительно персонажа\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\nfloat height Результат\n"
	},
	"setCharWeaponSkill || Устанавливает персонажу уровень владения оружием(скилл)": {
		"scope": "lua",
		"prefix": "setCharWeaponSkill || Устанавливает персонажу уровень владения оружием(скилл)",
		"body": [
			"setCharWeaponSkill(${0:Ped ped, int skill})"
		],
		"description": "setCharWeaponSkill - Устанавливает персонажу уровень владения оружием(скилл)\nПринимаемые значения:\nPed ped хендл персонажа, int skill уровень владения\n\nВозвращаемые значения:\n\n"
	},
	"isThisModelABoat || Проверяет, является ли указанная модель лодкой.": {
		"scope": "lua",
		"prefix": "isThisModelABoat || Проверяет, является ли указанная модель лодкой.",
		"body": [
			"${1:bool result} = isThisModelABoat(${0:Model modelId})"
		],
		"description": "isThisModelABoat - Проверяет, является ли указанная модель лодкой.\nПринимаемые значения:\nModel modelId идентификатор игровой модели\n\nВозвращаемые значения:\nbool result true - является, false - не является\n"
	},
	"isThisModelAPlane || Проверяет, является ли указанная модель самолётом.": {
		"scope": "lua",
		"prefix": "isThisModelAPlane || Проверяет, является ли указанная модель самолётом.",
		"body": [
			"${1:bool result} = isThisModelAPlane(${0:Model modelId})"
		],
		"description": "isThisModelAPlane - Проверяет, является ли указанная модель самолётом.\nПринимаемые значения:\nModel modelId идентификатор игровой модели\n\nВозвращаемые значения:\nbool result true - является, false - не является\n"
	},
	"isThisModelAHeli || Проверяет, является ли указанная модель вертолётом.": {
		"scope": "lua",
		"prefix": "isThisModelAHeli || Проверяет, является ли указанная модель вертолётом.",
		"body": [
			"${1:bool result} = isThisModelAHeli(${0:Model modelId})"
		],
		"description": "isThisModelAHeli - Проверяет, является ли указанная модель вертолётом.\nПринимаемые значения:\nModel modelId идентификатор игровой модели\n\nВозвращаемые значения:\nbool result true - является, false - не является\n"
	},
	"setFirstPersonInCarCameraMode || Включает вид бампера автомобиля для камеры.": {
		"scope": "lua",
		"prefix": "setFirstPersonInCarCameraMode || Включает вид бампера автомобиля для камеры.",
		"body": [
			"setFirstPersonInCarCameraMode(${0:bool enable})"
		],
		"description": "setFirstPersonInCarCameraMode - Включает вид бампера автомобиля для камеры.\nПринимаемые значения:\nbool enable true - включить, false - выключить\n\nВозвращаемые значения:\n\n"
	},
	"displayHud || Устанавливает отображение/скрытие худа. Оставляя радар.": {
		"scope": "lua",
		"prefix": "displayHud || Устанавливает отображение/скрытие худа. Оставляя радар.",
		"body": [
			"displayHud(${0:bool state})"
		],
		"description": "displayHud - Устанавливает отображение/скрытие худа. Оставляя радар.\nПринимаемые значения:\nbool state статус худа\n\nВозвращаемые значения:\n\n"
	},
	"getCityPlayerIsIn || Получает текущий ID города, возвращает 0 если игрок не в городе.": {
		"scope": "lua",
		"prefix": "getCityPlayerIsIn || Получает текущий ID города, возвращает 0 если игрок не в городе.",
		"body": [
			"${1:int city} = getCityPlayerIsIn(${0:Player player})"
		],
		"description": "getCityPlayerIsIn - Получает текущий ID города, возвращает 0 если игрок не в городе.\nПринимаемые значения:\nPlayer player хендл игрока\n\nВозвращаемые значения:\nint city ID города\n"
	},
	"getNameOfZone || Получение название района/части карты.": {
		"scope": "lua",
		"prefix": "getNameOfZone || Получение название района/части карты.",
		"body": [
			"${1:GxtString name} = getNameOfZone(${0:float X, float Y, float Z})"
		],
		"description": "getNameOfZone - Получение название района/части карты.\nПринимаемые значения:\nfloat X координаты X, float Y координаты Y, float Z координаты Z\n\nВозвращаемые значения:\nGxtString name название района\n"
	},
	"setGangWarsTrainingMission || Захват/отображение территорий в игре": {
		"scope": "lua",
		"prefix": "setGangWarsTrainingMission || Захват/отображение территорий в игре",
		"body": [
			"setGangWarsTrainingMission(${0:bool set})"
		],
		"description": "setGangWarsTrainingMission - Захват/отображение территорий в игре\nПринимаемые значения:\nbool set статус отображения (false - да, true - нет)\n\nВозвращаемые значения:\n\n"
	},
	"setNightVision || Включает игроку ночное зрение": {
		"scope": "lua",
		"prefix": "setNightVision || Включает игроку ночное зрение",
		"body": [
			"setNightVision(${0:bool enable})"
		],
		"description": "setNightVision - Включает игроку ночное зрение\nПринимаемые значения:\nbool enable true - включить, false - выключить\n\nВозвращаемые значения:\n\n"
	},
	"setInfraredVision || Включает игроку инфракрасное зрение": {
		"scope": "lua",
		"prefix": "setInfraredVision || Включает игроку инфракрасное зрение",
		"body": [
			"setInfraredVision(${0:bool enable})"
		],
		"description": "setInfraredVision - Включает игроку инфракрасное зрение\nПринимаемые значения:\nbool enable true - включить, false - выключить\n\nВозвращаемые значения:\n\n"
	},
	"hasObjectBeenDamagedByWeapon || Проверяет с указанного ли оружия было попадание по объекту.": {
		"scope": "lua",
		"prefix": "hasObjectBeenDamagedByWeapon || Проверяет с указанного ли оружия было попадание по объекту.",
		"body": [
			"${1:bool result} = hasObjectBeenDamagedByWeapon(${0:Object object, int type})"
		],
		"description": "hasObjectBeenDamagedByWeapon - Проверяет с указанного ли оружия было попадание по объекту.\nПринимаемые значения:\nObject object хендл объекта, int type ID оружия\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"clearObjectLastWeaponDamage || Очищает объект от последнего нанесенного урона.": {
		"scope": "lua",
		"prefix": "clearObjectLastWeaponDamage || Очищает объект от последнего нанесенного урона.",
		"body": [
			"clearObjectLastWeaponDamage(${0:Object object})"
		],
		"description": "clearObjectLastWeaponDamage - Очищает объект от последнего нанесенного урона.\nПринимаемые значения:\nObject object хендл объекта\n\nВозвращаемые значения:\n\n"
	},
	"setCameraInFrontOfChar || Помещает камеру перед указанным игроком.": {
		"scope": "lua",
		"prefix": "setCameraInFrontOfChar || Помещает камеру перед указанным игроком.",
		"body": [
			"setCameraInFrontOfChar(${0:Ped ped})"
		],
		"description": "setCameraInFrontOfChar - Помещает камеру перед указанным игроком.\nПринимаемые значения:\nPed ped хендл игрока\n\nВозвращаемые значения:\n\n"
	},
	"isCharSwimming || Проверяет плавает ли пед": {
		"scope": "lua",
		"prefix": "isCharSwimming || Проверяет плавает ли пед",
		"body": [
			"${1:bool result} = isCharSwimming(${0:Ped ped})"
		],
		"description": "isCharSwimming - Проверяет плавает ли пед\nПринимаемые значения:\nPed ped хендл педа\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"getObjectModel || Возвращает ид объекта по его хендлу.": {
		"scope": "lua",
		"prefix": "getObjectModel || Возвращает ид объекта по его хендлу.",
		"body": [
			"${1:int id} = getObjectModel(${0:Object object})"
		],
		"description": "getObjectModel - Возвращает ид объекта по его хендлу.\nПринимаемые значения:\nObject object хендл объекта\n\nВозвращаемые значения:\nint id ID объекта\n"
	},
	"setCarCollision || Устанавливает / отключает коллизию транспортному средству.": {
		"scope": "lua",
		"prefix": "setCarCollision || Устанавливает / отключает коллизию транспортному средству.",
		"body": [
			"setCarCollision(${0:Vehicle car, bool collision})"
		],
		"description": "setCarCollision - Устанавливает / отключает коллизию транспортному средству.\nПринимаемые значения:\nVehicle car хендл транспортного средства, bool collision статус коллизии\n\nВозвращаемые значения:\n\n"
	},
	"getCarDoorLockStatus || Определяет состояние дверей автомобиля (открыты/закрыты)": {
		"scope": "lua",
		"prefix": "getCarDoorLockStatus || Определяет состояние дверей автомобиля (открыты/закрыты)",
		"body": [
			"${1:int doorStatus} = getCarDoorLockStatus(${0:Vehicle car})"
		],
		"description": "getCarDoorLockStatus - Определяет состояние дверей автомобиля (открыты/закрыты)\nПринимаемые значения:\nVehicle car хэндл кара\n\nВозвращаемые значения:\ndoorStatus состояние двери (0/1)\n"
	},
	"setPlayerModel || Меняет скин игрока.": {
		"scope": "lua",
		"prefix": "setPlayerModel || Меняет скин игрока.",
		"body": [
			"setPlayerModel(${0:Player player, Model modelId})"
		],
		"description": "setPlayerModel - Меняет скин игрока.\nПринимаемые значения:\nPlayer player хендл игрока, Model modelId ID скина\n\nВозвращаемые значения:\n\n"
	},
	"getCharActiveInterior || Функция возвращает айди интерьера, в котором находится персонаж по его хендлу": {
		"scope": "lua",
		"prefix": "getCharActiveInterior || Функция возвращает айди интерьера, в котором находится персонаж по его хендлу",
		"body": [
			"${1:int interior} = getCharActiveInterior(${0:Ped ped})"
		],
		"description": "getCharActiveInterior - Функция возвращает айди интерьера, в котором находится персонаж по его хендлу\nПринимаемые значения:\nPed ped Хендл персонажа\n\nВозвращаемые значения:\nint interior Айди интерьера\n"
	},
	"isPlayerUsingJetpack || Проверяет, использует ли игрок джетпак": {
		"scope": "lua",
		"prefix": "isPlayerUsingJetpack || Проверяет, использует ли игрок джетпак",
		"body": [
			"${1:bool result} = isPlayerUsingJetpack(${0:Player player})"
		],
		"description": "isPlayerUsingJetpack - Проверяет, использует ли игрок джетпак\nПринимаемые значения:\nPlayer player скриптовый хэндл игрока\n\nВозвращаемые значения:\nbool result результат выполнения операции\n"
	},
	"clearThisPrintBigNow || Удаляет стилизованный текст, который был воспроизведен через printBig": {
		"scope": "lua",
		"prefix": "clearThisPrintBigNow || Удаляет стилизованный текст, который был воспроизведен через printBig",
		"body": [
			"clearThisPrintBigNow(${0:int style})"
		],
		"description": "clearThisPrintBigNow - Удаляет стилизованный текст, который был воспроизведен через printBig\nПринимаемые значения:\nint style тип стиля\\\\\n\nВозвращаемые значения:\n\n"
	},
	"takePhoto || Сделать снимок экрана, снимок будет сохранён в Мои Документы/Andreas User Files\\\\Gallery": {
		"scope": "lua",
		"prefix": "takePhoto || Сделать снимок экрана, снимок будет сохранён в Мои Документы/Andreas User Files\\\\Gallery",
		"body": [
			"takePhoto(${0:bool unk})"
		],
		"description": "takePhoto - Сделать снимок экрана, снимок будет сохранён в Мои Документы/Andreas User Files\\\\Gallery\nПринимаемые значения:\nbool unk результат выполнения\n\nВозвращаемые значения:\n\n"
	},
	"setRadioToPlayersFavouriteStation || Устанавливает радиостанцию ??транспортного средства, на котором игрок находится в настоящее время, на любимую станцию, полученную из статистики.": {
		"scope": "lua",
		"prefix": "setRadioToPlayersFavouriteStation || Устанавливает радиостанцию ??транспортного средства, на котором игрок находится в настоящее время, на любимую станцию, полученную из статистики.",
		"body": [
			"setRadioToPlayersFavouriteStation(${0:})"
		],
		"description": "setRadioToPlayersFavouriteStation - Устанавливает радиостанцию ??транспортного средства, на котором игрок находится в настоящее время, на любимую станцию, полученную из статистики.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"setCharSwimSpeed || Устанавливает скорость плавания игроку": {
		"scope": "lua",
		"prefix": "setCharSwimSpeed || Устанавливает скорость плавания игроку",
		"body": [
			"setCharSwimSpeed(${0:Ped ped, float speed})"
		],
		"description": "setCharSwimSpeed - Устанавливает скорость плавания игроку\nПринимаемые значения:\nPed ped хэндл персонажа, float speed скорость\n\nВозвращаемые значения:\n\n"
	},
	"isPlayerClimbing || Возвращает true, если игрок перелазит/лезет на что-то (стена, забор, любое препятствие).": {
		"scope": "lua",
		"prefix": "isPlayerClimbing || Возвращает true, если игрок перелазит/лезет на что-то (стена, забор, любое препятствие).",
		"body": [
			"${1:bool result} = isPlayerClimbing(${0:Player player})"
		],
		"description": "isPlayerClimbing - Возвращает true, если игрок перелазит/лезет на что-то (стена, забор, любое препятствие).\nПринимаемые значения:\nPlayer player хендл игрока\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"fixCar || Чинит транспортное средство.": {
		"scope": "lua",
		"prefix": "fixCar || Чинит транспортное средство.",
		"body": [
			"fixCar(${0:Vehicle car})"
		],
		"description": "fixCar - Чинит транспортное средство.\nПринимаемые значения:\nVehicle car скриптовый хендл транспортного средства\n\nВозвращаемые значения:\n\n"
	},
	"getPlayerInCarCameraMode || Возвращает выбранный режим камеры текущего автомобиля.": {
		"scope": "lua",
		"prefix": "getPlayerInCarCameraMode || Возвращает выбранный режим камеры текущего автомобиля.",
		"body": [
			"${1:int mode} = getPlayerInCarCameraMode(${0:})"
		],
		"description": "getPlayerInCarCameraMode - Возвращает выбранный режим камеры текущего автомобиля.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint mode ID режима камеры.\n"
	},
	"getRidOfPlayerProstitute || Отменяет любые приглашения проститутки, полученные в игре, и заставляет всех текущих проституток уйти.": {
		"scope": "lua",
		"prefix": "getRidOfPlayerProstitute || Отменяет любые приглашения проститутки, полученные в игре, и заставляет всех текущих проституток уйти.",
		"body": [
			"getRidOfPlayerProstitute(${0:})"
		],
		"description": "getRidOfPlayerProstitute - Отменяет любые приглашения проститутки, полученные в игре, и заставляет всех текущих проституток уйти.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"sampSpawnPlayer || Отправляет локального игрока на спавн.": {
		"scope": "lua",
		"prefix": "sampSpawnPlayer || Отправляет локального игрока на спавн.",
		"body": [
			"sampSpawnPlayer(${0:})"
		],
		"description": "sampSpawnPlayer - Отправляет локального игрока на спавн.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"sampGetBase || Возвращает адрес samp.dll": {
		"scope": "lua",
		"prefix": "sampGetBase || Возвращает адрес samp.dll",
		"body": [
			"${1:uint handle} = sampGetBase(${0:})"
		],
		"description": "sampGetBase - Возвращает адрес samp.dll\nПринимаемые значения:\n\n\nВозвращаемые значения:\nuint handle адрес\n"
	},
	"sampAddChatMessage || Добавляет в окно чата SA:MP сообщение заданного цвета. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.": {
		"scope": "lua",
		"prefix": "sampAddChatMessage || Добавляет в окно чата SA:MP сообщение заданного цвета. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.",
		"body": [
			"sampAddChatMessage(${0:string text, int color})"
		],
		"description": "sampAddChatMessage - Добавляет в окно чата SA:MP сообщение заданного цвета. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.\nПринимаемые значения:\nstring text текст сообщения, int color цвет\n\nВозвращаемые значения:\n\n"
	},
	"sampSendChat || Отправляет на сервер текстовое сообщение или команду, если сообщение начинается с символа '/'. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.": {
		"scope": "lua",
		"prefix": "sampSendChat || Отправляет на сервер текстовое сообщение или команду, если сообщение начинается с символа '/'. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.",
		"body": [
			"sampSendChat(${0:string text})"
		],
		"description": "sampSendChat - Отправляет на сервер текстовое сообщение или команду, если сообщение начинается с символа '/'. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.\nПринимаемые значения:\nstring text текст сообщения\n\nВозвращаемые значения:\n\n"
	},
	"isSampAvailable || Проверяет инициализацию структур SA:MP.": {
		"scope": "lua",
		"prefix": "isSampAvailable || Проверяет инициализацию структур SA:MP.",
		"body": [
			"${1:bool result} = isSampAvailable(${0:})"
		],
		"description": "isSampAvailable - Проверяет инициализацию структур SA:MP.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"sampSetSpecialAction || Устанавливает специальное действие локальному игроку": {
		"scope": "lua",
		"prefix": "sampSetSpecialAction || Устанавливает специальное действие локальному игроку",
		"body": [
			"sampSetSpecialAction(${0:int action})"
		],
		"description": "sampSetSpecialAction - Устанавливает специальное действие локальному игроку\nПринимаемые значения:\nint action Специальное действие\n\nВозвращаемые значения:\n\n"
	},
	"sampSendDeathByPlayer || Убивает игрока.": {
		"scope": "lua",
		"prefix": "sampSendDeathByPlayer || Убивает игрока.",
		"body": [
			"sampSendDeathByPlayer(${0:int playerId, int reason})"
		],
		"description": "sampSendDeathByPlayer - Убивает игрока.\nПринимаемые значения:\nint playerId ID игрока, int reason причина смерти\n\nВозвращаемые значения:\n\n"
	},
	"sampGetCarHandleBySampVehicleId || Получает хендл т/с по его иду. Если автомобиля нет в зоне стрима, то возвращает false.": {
		"scope": "lua",
		"prefix": "sampGetCarHandleBySampVehicleId || Получает хендл т/с по его иду. Если автомобиля нет в зоне стрима, то возвращает false.",
		"body": [
			"${1:bool result, Vehicle car} = sampGetCarHandleBySampVehicleId(${0:int id})"
		],
		"description": "sampGetCarHandleBySampVehicleId - Получает хендл т/с по его иду. Если автомобиля нет в зоне стрима, то возвращает false.\nПринимаемые значения:\nint id ID т/c\n\nВозвращаемые значения:\nbool result результат, Vehicle car хендл т/c\n"
	},
	"sampGetCharHandleBySampPlayerId || Получает хендл игрока по его иду.": {
		"scope": "lua",
		"prefix": "sampGetCharHandleBySampPlayerId || Получает хендл игрока по его иду.",
		"body": [
			"${1:bool result, Ped ped} = sampGetCharHandleBySampPlayerId(${0:int id})"
		],
		"description": "sampGetCharHandleBySampPlayerId - Получает хендл игрока по его иду.\nПринимаемые значения:\nint id ID игрока\n\nВозвращаемые значения:\nbool result результат, Ped ped хендл игрока\n"
	},
	"sampIsChatInputActive || Проверяет открыт ли инпут чата.": {
		"scope": "lua",
		"prefix": "sampIsChatInputActive || Проверяет открыт ли инпут чата.",
		"body": [
			"${1:bool result} = sampIsChatInputActive(${0:})"
		],
		"description": "sampIsChatInputActive - Проверяет открыт ли инпут чата.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"sampGetPlayerHealth || Получает уровень здоровья игрока.": {
		"scope": "lua",
		"prefix": "sampGetPlayerHealth || Получает уровень здоровья игрока.",
		"body": [
			"${1:int health} = sampGetPlayerHealth(${0:int id})"
		],
		"description": "sampGetPlayerHealth - Получает уровень здоровья игрока.\nПринимаемые значения:\nint id ИД игрока.\n\nВозвращаемые значения:\nint health Уровень здоровья.\n"
	},
	"sampGetPlayerArmor || Получает уровень брони игрока.": {
		"scope": "lua",
		"prefix": "sampGetPlayerArmor || Получает уровень брони игрока.",
		"body": [
			"${1:int armor} = sampGetPlayerArmor(${0:int id})"
		],
		"description": "sampGetPlayerArmor - Получает уровень брони игрока.\nПринимаемые значения:\nint id ИД игрока.\n\nВозвращаемые значения:\nint armor Уровень брони.\n"
	},
	"sampSetGamestate || Устанавливает статус подключения к серверу.": {
		"scope": "lua",
		"prefix": "sampSetGamestate || Устанавливает статус подключения к серверу.",
		"body": [
			"sampSetGamestate(${0:int gamestate})"
		],
		"description": "sampSetGamestate - Устанавливает статус подключения к серверу.\nПринимаемые значения:\nint gamestate статус\n\nВозвращаемые значения:\n\n"
	},
	"sampSetLocalPlayerName || Устанавливает локальному игроку новый ник.": {
		"scope": "lua",
		"prefix": "sampSetLocalPlayerName || Устанавливает локальному игроку новый ник.",
		"body": [
			"sampSetLocalPlayerName(${0:string name})"
		],
		"description": "sampSetLocalPlayerName - Устанавливает локальному игроку новый ник.\nПринимаемые значения:\nstring name новый ник\n\nВозвращаемые значения:\n\n"
	},
	"sampGetPlayerPing || Получает пинг игрока.": {
		"scope": "lua",
		"prefix": "sampGetPlayerPing || Получает пинг игрока.",
		"body": [
			"${1:int ping} = sampGetPlayerPing(${0:int id})"
		],
		"description": "sampGetPlayerPing - Получает пинг игрока.\nПринимаемые значения:\nint id ИД игрока.\n\nВозвращаемые значения:\nint ping Пинг.\n"
	},
	"sampGetPlayerIdByCharHandle || Получает SAMP ID игрока по хэндлу персонажа.": {
		"scope": "lua",
		"prefix": "sampGetPlayerIdByCharHandle || Получает SAMP ID игрока по хэндлу персонажа.",
		"body": [
			"${1:bool result, int id} = sampGetPlayerIdByCharHandle(${0:Ped ped})"
		],
		"description": "sampGetPlayerIdByCharHandle - Получает SAMP ID игрока по хэндлу персонажа.\nПринимаемые значения:\nPed ped хэндл персонажа\n\nВозвращаемые значения:\nbool result результат выполнения, int id ID игрока\n"
	},
	"sampGetVehicleIdByCarHandle || Получает ID транспортного средства по его хендлу": {
		"scope": "lua",
		"prefix": "sampGetVehicleIdByCarHandle || Получает ID транспортного средства по его хендлу",
		"body": [
			"${1:bool result, int id} = sampGetVehicleIdByCarHandle(${0:Vehicle car})"
		],
		"description": "sampGetVehicleIdByCarHandle - Получает ID транспортного средства по его хендлу\nПринимаемые значения:\nVehicle car скриптовый хендл транспортного средства\n\nВозвращаемые значения:\nbool result результат выполнения операции, int id ID транспортного средства\n"
	},
	"sampGetStreamedOutPlayerPos || Получает позицию игрока, который находится вне зоны стрима, если сервер даёт на это разрешение.": {
		"scope": "lua",
		"prefix": "sampGetStreamedOutPlayerPos || Получает позицию игрока, который находится вне зоны стрима, если сервер даёт на это разрешение.",
		"body": [
			"${1:bool result, float posX, float posY, float posZ} = sampGetStreamedOutPlayerPos(${0:int id})"
		],
		"description": "sampGetStreamedOutPlayerPos - Получает позицию игрока, который находится вне зоны стрима, если сервер даёт на это разрешение.\nПринимаемые значения:\nint id ID игрока\n\nВозвращаемые значения:\nbool result результат, float posX ,, float posY ,, float posZ координаты\n"
	},
	"sampSendEnterVehicle || Отправляет пакет о посадке в транспортное средство.": {
		"scope": "lua",
		"prefix": "sampSendEnterVehicle || Отправляет пакет о посадке в транспортное средство.",
		"body": [
			"sampSendEnterVehicle(${0:int id, bool passenger})"
		],
		"description": "sampSendEnterVehicle - Отправляет пакет о посадке в транспортное средство.\nПринимаемые значения:\nint id ID транспортного средства, bool passenger true - на пассажирское место, false - на водительское.\n\nВозвращаемые значения:\n\n"
	},
	"sampSendExitVehicle || Отправляет RPC - RPC_EXITVEHICLE": {
		"scope": "lua",
		"prefix": "sampSendExitVehicle || Отправляет RPC - RPC_EXITVEHICLE",
		"body": [
			"sampSendExitVehicle(${0:int carid})"
		],
		"description": "sampSendExitVehicle - Отправляет RPC - RPC_EXITVEHICLE\nПринимаемые значения:\nint carid ид транспорта\n\nВозвращаемые значения:\n\n"
	},
	"sampSendSpawn || Спавнит игрока.": {
		"scope": "lua",
		"prefix": "sampSendSpawn || Спавнит игрока.",
		"body": [
			"sampSendSpawn(${0:})"
		],
		"description": "sampSendSpawn - Спавнит игрока.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"sampGetPlayerNickname || Получает ник игрока по его ID.": {
		"scope": "lua",
		"prefix": "sampGetPlayerNickname || Получает ник игрока по его ID.",
		"body": [
			"${1:name} = sampGetPlayerNickname(${0:int id})"
		],
		"description": "sampGetPlayerNickname - Получает ник игрока по его ID.\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"sampGetPlayerColor || Получает цвет игрока из scoreboard'a": {
		"scope": "lua",
		"prefix": "sampGetPlayerColor || Получает цвет игрока из scoreboard'a",
		"body": [
			"${1:int color} = sampGetPlayerColor(${0:int id})"
		],
		"description": "sampGetPlayerColor - Получает цвет игрока из scoreboard'a\nПринимаемые значения:\nint id ИД игрока.\n\nВозвращаемые значения:\nint color Цвет(ARGB).\n"
	},
	"sampConnectToServer || Выполняет подключение к серверу": {
		"scope": "lua",
		"prefix": "sampConnectToServer || Выполняет подключение к серверу",
		"body": [
			"sampConnectToServer(${0:zstring ip, uint port})"
		],
		"description": "sampConnectToServer - Выполняет подключение к серверу\nПринимаемые значения:\nzstring ip IP сервера, uint port порт сервера\n\nВозвращаемые значения:\n\n"
	},
	"sampGetCurrentServerAddress || Получает текущий адрес сервера.": {
		"scope": "lua",
		"prefix": "sampGetCurrentServerAddress || Получает текущий адрес сервера.",
		"body": [
			"${1:zstring ip, uint port} = sampGetCurrentServerAddress(${0:})"
		],
		"description": "sampGetCurrentServerAddress - Получает текущий адрес сервера.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nzstring ip IP сервера, uint port порт сервера\n"
	},
	"sampGetCurrentServerName || Получает текущее название сервера": {
		"scope": "lua",
		"prefix": "sampGetCurrentServerName || Получает текущее название сервера",
		"body": [
			"${1:zstring name} = sampGetCurrentServerName(${0:})"
		],
		"description": "sampGetCurrentServerName - Получает текущее название сервера\nПринимаемые значения:\n\n\nВозвращаемые значения:\nzstring name название сервера\n"
	},
	"sampShowDialog || Показывает игроку диалоговое окно": {
		"scope": "lua",
		"prefix": "sampShowDialog || Показывает игроку диалоговое окно",
		"body": [
			"sampShowDialog(${0:int id, zstring caption, zstring text, zstring button1, zstring button2, int style})"
		],
		"description": "sampShowDialog - Показывает игроку диалоговое окно\nПринимаемые значения:\nint id id диалога, zstring caption заголовок окна, zstring text текст самого диалога. Можно использовать \\\\n для перевода строки и \\\\t для табуляции, zstring button1 название первой (левой) кнопки диалога, zstring button2 название второй (правой) кнопки диалога, int style стиль диалогового окна\n\nВозвращаемые значения:\n\n"
	},
	"sampHasDialogRespond || Получает информацию с локального диалога (нужно использовать в цикле)": {
		"scope": "lua",
		"prefix": "sampHasDialogRespond || Получает информацию с локального диалога (нужно использовать в цикле)",
		"body": [
			"${1:bool result, int button, int list, zstring input} = sampHasDialogRespond(${0:int id})"
		],
		"description": "sampHasDialogRespond - Получает информацию с локального диалога (нужно использовать в цикле)\nПринимаемые значения:\nint id id локального диалога\n\nВозвращаемые значения:\nbool result результат, возвращает true если диалог открыт, int button номер кнопки, int list выбранная строка в списке, zstring input текст\n"
	},
	"raknetBitStreamWriteBool || Записывает значение типа boolean в BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamWriteBool || Записывает значение типа boolean в BitStream.",
		"body": [
			"raknetBitStreamWriteBool(${0:Bitstream bs, bool value})"
		],
		"description": "raknetBitStreamWriteBool - Записывает значение типа boolean в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, bool value значение\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamWriteInt8 || Записывает значение типа byte в BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamWriteInt8 || Записывает значение типа byte в BitStream.",
		"body": [
			"raknetBitStreamWriteInt8(${0:Bitstream bs, int value})"
		],
		"description": "raknetBitStreamWriteInt8 - Записывает значение типа byte в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int value значение\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamWriteInt16 || Записывает значение типа short (2 байта) в BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamWriteInt16 || Записывает значение типа short (2 байта) в BitStream.",
		"body": [
			"raknetBitStreamWriteInt16(${0:Bitstream bs, int value})"
		],
		"description": "raknetBitStreamWriteInt16 - Записывает значение типа short (2 байта) в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int value значение\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamWriteInt32 || Записывает значение типа integer (4 байта) в BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamWriteInt32 || Записывает значение типа integer (4 байта) в BitStream.",
		"body": [
			"raknetBitStreamWriteInt32(${0:Bitstream bs, int value})"
		],
		"description": "raknetBitStreamWriteInt32 - Записывает значение типа integer (4 байта) в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int value значение\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamWriteFloat || Записывает значение типа float (4 байта) в BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamWriteFloat || Записывает значение типа float (4 байта) в BitStream.",
		"body": [
			"raknetBitStreamWriteFloat(${0:Bitstream bs, float value})"
		],
		"description": "raknetBitStreamWriteFloat - Записывает значение типа float (4 байта) в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, float value значение\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamWriteBuffer || Записывает буффер указанного размера в BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamWriteBuffer || Записывает буффер указанного размера в BitStream.",
		"body": [
			"raknetBitStreamWriteBuffer(${0:Bitstream bs, int dest, int size})"
		],
		"description": "raknetBitStreamWriteBuffer - Записывает буффер указанного размера в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int dest буффер, int size размер\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamWriteBitStream || Записывает BitStream в BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamWriteBitStream || Записывает BitStream в BitStream.",
		"body": [
			"raknetBitStreamWriteBitStream(${0:Bitstream bs, Bitstream bitstream})"
		],
		"description": "raknetBitStreamWriteBitStream - Записывает BitStream в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, Bitstream bitstream bitStream (который записываем)\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamWriteString || Записывает строку в BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamWriteString || Записывает строку в BitStream.",
		"body": [
			"raknetBitStreamWriteString(${0:Bitstream bs, string str})"
		],
		"description": "raknetBitStreamWriteString - Записывает строку в BitStream.\nПринимаемые значения:\nBitstream bs bitStream, string str строка\n\nВозвращаемые значения:\n\n"
	},
	"sampCreate3dText || Создает SAMP объект --- 3D-текст": {
		"scope": "lua",
		"prefix": "sampCreate3dText || Создает SAMP объект --- 3D-текст",
		"body": [
			"sampCreate3dText(${0:zstring text, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId})"
		],
		"description": "sampCreate3dText - Создает SAMP объект --- 3D-текст\nПринимаемые значения:\nzstring text Содержимое, int color Цвет (ARGB), float posX Позиция/смещение относительно крепления по оси X, float posY Позиция/смещение относительно крепления по оси Y, float posZ Позиция/смещение относительно крепления по оси Z, float distance Дистанция при которой будет виден 3D-текст, bool ignoreWalls Виден за объектами/стенами, int playerId Крепление к игроку по ид (-1 --- отключить), int vehicleId Крепление к т/с по ид (-1 --- отключить)\n\nВозвращаемые значения:\nint textlabel ид созданного 3D-текста\n"
	},
	"sampDestroy3dText || Удаляет 3D текст.": {
		"scope": "lua",
		"prefix": "sampDestroy3dText || Удаляет 3D текст.",
		"body": [
			"sampDestroy3dText(${0:int textlabel})"
		],
		"description": "sampDestroy3dText - Удаляет 3D текст.\nПринимаемые значения:\nint textlabel указатель на 3D текст\n\nВозвращаемые значения:\n\n"
	},
	"sampIs3dTextDefined || Проверяет 3D текст на существование.": {
		"scope": "lua",
		"prefix": "sampIs3dTextDefined || Проверяет 3D текст на существование.",
		"body": [
			"${1:bool result} = sampIs3dTextDefined(${0:int 3dText})"
		],
		"description": "sampIs3dTextDefined - Проверяет 3D текст на существование.\nПринимаемые значения:\nint 3dText ID 3D текста\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"sampCloseCurrentDialogWithButton || Закрывает открытый диалог с указанием нажатой кнопки.": {
		"scope": "lua",
		"prefix": "sampCloseCurrentDialogWithButton || Закрывает открытый диалог с указанием нажатой кнопки.",
		"body": [
			"sampCloseCurrentDialogWithButton(${0:int button})"
		],
		"description": "sampCloseCurrentDialogWithButton - Закрывает открытый диалог с указанием нажатой кнопки.\nПринимаемые значения:\nint button номер кнопки\n\nВозвращаемые значения:\n\n"
	},
	"sampGetCurrentDialogListItem || Возвращает номер элемента из списка (диалога), который в данный момент активен": {
		"scope": "lua",
		"prefix": "sampGetCurrentDialogListItem || Возвращает номер элемента из списка (диалога), который в данный момент активен",
		"body": [
			"${1:int list} = sampGetCurrentDialogListItem(${0:})"
		],
		"description": "sampGetCurrentDialogListItem - Возвращает номер элемента из списка (диалога), который в данный момент активен\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint list номер элемента из списка (диалога)\n"
	},
	"sampSetCurrentDialogListItem || Выбирает элемент из списка (диалога)": {
		"scope": "lua",
		"prefix": "sampSetCurrentDialogListItem || Выбирает элемент из списка (диалога)",
		"body": [
			"sampSetCurrentDialogListItem(${0:int list})"
		],
		"description": "sampSetCurrentDialogListItem - Выбирает элемент из списка (диалога)\nПринимаемые значения:\nint list номер элемента\n\nВозвращаемые значения:\n\n"
	},
	"sampGetCurrentDialogEditboxText || Возвращает текст из полей диалога 1 стиля": {
		"scope": "lua",
		"prefix": "sampGetCurrentDialogEditboxText || Возвращает текст из полей диалога 1 стиля",
		"body": [
			"${1:zstring text} = sampGetCurrentDialogEditboxText(${0:})"
		],
		"description": "sampGetCurrentDialogEditboxText - Возвращает текст из полей диалога 1 стиля\nПринимаемые значения:\n\n\nВозвращаемые значения:\nzstring text текст\n"
	},
	"sampSetCurrentDialogEditboxText || Вставляет текст в поле для ввода диалога 1 стиля": {
		"scope": "lua",
		"prefix": "sampSetCurrentDialogEditboxText || Вставляет текст в поле для ввода диалога 1 стиля",
		"body": [
			"sampSetCurrentDialogEditboxText(${0:zstring text})"
		],
		"description": "sampSetCurrentDialogEditboxText - Вставляет текст в поле для ввода диалога 1 стиля\nПринимаемые значения:\nzstring text текст\n\nВозвращаемые значения:\n\n"
	},
	"sampIsDialogActive || Проверяет, активен ли любой SA:MP-диалог. Отличие от опкода в отсутствии аргумента, являющегося идентификатором диалога.": {
		"scope": "lua",
		"prefix": "sampIsDialogActive || Проверяет, активен ли любой SA:MP-диалог. Отличие от опкода в отсутствии аргумента, являющегося идентификатором диалога.",
		"body": [
			"${1:bool result} = sampIsDialogActive(${0:})"
		],
		"description": "sampIsDialogActive - Проверяет, активен ли любой SA:MP-диалог. Отличие от опкода в отсутствии аргумента, являющегося идентификатором диалога.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result статус\n"
	},
	"sampGetCurrentDialogType || Возвращает стиль активного диалога": {
		"scope": "lua",
		"prefix": "sampGetCurrentDialogType || Возвращает стиль активного диалога",
		"body": [
			"${1:int type} = sampGetCurrentDialogType(${0:})"
		],
		"description": "sampGetCurrentDialogType - Возвращает стиль активного диалога\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint type стиль\n"
	},
	"sampGetCurrentDialogId || Возвращает ID последнего(открытого) диалогового окна": {
		"scope": "lua",
		"prefix": "sampGetCurrentDialogId || Возвращает ID последнего(открытого) диалогового окна",
		"body": [
			"${1:int id} = sampGetCurrentDialogId(${0:})"
		],
		"description": "sampGetCurrentDialogId - Возвращает ID последнего(открытого) диалогового окна\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint id ID диалогового окна\n"
	},
	"sampGetGamestate || Возвращает текущий gamestate.": {
		"scope": "lua",
		"prefix": "sampGetGamestate || Возвращает текущий gamestate.",
		"body": [
			"${1:int gamestate} = sampGetGamestate(${0:})"
		],
		"description": "sampGetGamestate - Возвращает текущий gamestate.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint gamestate ID gamestate\n"
	},
	"sampGetObjectHandleBySampId || Возвращает хендл объекта по его иду.": {
		"scope": "lua",
		"prefix": "sampGetObjectHandleBySampId || Возвращает хендл объекта по его иду.",
		"body": [
			"${1:Object object} = sampGetObjectHandleBySampId(${0:int id})"
		],
		"description": "sampGetObjectHandleBySampId - Возвращает хендл объекта по его иду.\nПринимаемые значения:\nint id ID объекта\n\nВозвращаемые значения:\nObject object хендл объекта\n"
	},
	"sampGetObjectSampIdByHandle || Получает ID объекта по его хендлу": {
		"scope": "lua",
		"prefix": "sampGetObjectSampIdByHandle || Получает ID объекта по его хендлу",
		"body": [
			"${1:int objectId} = sampGetObjectSampIdByHandle(${0:Object object})"
		],
		"description": "sampGetObjectSampIdByHandle - Получает ID объекта по его хендлу\nПринимаемые значения:\nObject object handle объекта\n\nВозвращаемые значения:\nint objectId ID объекта\n"
	},
	"sampGetListboxItemsCount || Возвращает общее кол-во элементов в списке (последнего)открытого диалога.": {
		"scope": "lua",
		"prefix": "sampGetListboxItemsCount || Возвращает общее кол-во элементов в списке (последнего)открытого диалога.",
		"body": [
			"${1:int count} = sampGetListboxItemsCount(${0:})"
		],
		"description": "sampGetListboxItemsCount - Возвращает общее кол-во элементов в списке (последнего)открытого диалога.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint count кол-во элементов\n"
	},
	"sampGetPlayerAnimationId || Получает ид текущей анимации игрока.": {
		"scope": "lua",
		"prefix": "sampGetPlayerAnimationId || Получает ид текущей анимации игрока.",
		"body": [
			"${1:int animid} = sampGetPlayerAnimationId(${0:int playerId})"
		],
		"description": "sampGetPlayerAnimationId - Получает ид текущей анимации игрока.\nПринимаемые значения:\nint playerId ИД игрока.\n\nВозвращаемые значения:\nint animid ИД анимации.\n"
	},
	"getScreenResolution || Получает текущее разрешение экрана в пикселях": {
		"scope": "lua",
		"prefix": "getScreenResolution || Получает текущее разрешение экрана в пикселях",
		"body": [
			"${1:int resX, int resY} = getScreenResolution(${0:})"
		],
		"description": "getScreenResolution - Получает текущее разрешение экрана в пикселях\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint resX, int resY разрешение экрана\n"
	},
	"sampGetListboxItemText || Получает текст из листбокса по его номеру": {
		"scope": "lua",
		"prefix": "sampGetListboxItemText || Получает текст из листбокса по его номеру",
		"body": [
			"${1:zstring text} = sampGetListboxItemText(${0:int item})"
		],
		"description": "sampGetListboxItemText - Получает текст из листбокса по его номеру\nПринимаемые значения:\nint item номер элемента\n\nВозвращаемые значения:\nzstring text текст\n"
	},
	"sampIsPlayerPaused || Проверяет, находится ли указанный игрок на паузе": {
		"scope": "lua",
		"prefix": "sampIsPlayerPaused || Проверяет, находится ли указанный игрок на паузе",
		"body": [
			"${1:bool result} = sampIsPlayerPaused(${0:int id})"
		],
		"description": "sampIsPlayerPaused - Проверяет, находится ли указанный игрок на паузе\nПринимаемые значения:\nint id id игрока\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"sampToggleCursor || Переключает видимость курсора SAMP": {
		"scope": "lua",
		"prefix": "sampToggleCursor || Переключает видимость курсора SAMP",
		"body": [
			"sampToggleCursor(${0:bool show})"
		],
		"description": "sampToggleCursor - Переключает видимость курсора SAMP\nПринимаемые значения:\nbool show статус\n\nВозвращаемые значения:\n\n"
	},
	"sampIsLocalPlayerSpawned || Проверяет, заспавнился ли игрок.": {
		"scope": "lua",
		"prefix": "sampIsLocalPlayerSpawned || Проверяет, заспавнился ли игрок.",
		"body": [
			"${1:bool result} = sampIsLocalPlayerSpawned(${0:})"
		],
		"description": "sampIsLocalPlayerSpawned - Проверяет, заспавнился ли игрок.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result статус\n"
	},
	"sampGetPlayerSpecialAction || Возвращает ид специального действия игрока.": {
		"scope": "lua",
		"prefix": "sampGetPlayerSpecialAction || Возвращает ид специального действия игрока.",
		"body": [
			"${1:int action} = sampGetPlayerSpecialAction(${0:int id})"
		],
		"description": "sampGetPlayerSpecialAction - Возвращает ид специального действия игрока.\nПринимаемые значения:\nint id ID игрока\n\nВозвращаемые значения:\nint action ID специального действия\n"
	},
	"sampUnregisterChatCommand || Отменяет регистрацию команды, созданной с помощью функции sampRegisterChatCommand.": {
		"scope": "lua",
		"prefix": "sampUnregisterChatCommand || Отменяет регистрацию команды, созданной с помощью функции sampRegisterChatCommand.",
		"body": [
			"${1:bool result} = sampUnregisterChatCommand(${0:string cmd})"
		],
		"description": "sampUnregisterChatCommand - Отменяет регистрацию команды, созданной с помощью функции sampRegisterChatCommand.\nПринимаемые значения:\nstring cmd команда\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"sampIsPlayerNpc || Проверяет, является ли указанный игрок NPC": {
		"scope": "lua",
		"prefix": "sampIsPlayerNpc || Проверяет, является ли указанный игрок NPC",
		"body": [
			"${1:bool result} = sampIsPlayerNpc(${0:int id})"
		],
		"description": "sampIsPlayerNpc - Проверяет, является ли указанный игрок NPC\nПринимаемые значения:\nint id id игрока\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"sampGetPlayerScore || Получает очки игрока.": {
		"scope": "lua",
		"prefix": "sampGetPlayerScore || Получает очки игрока.",
		"body": [
			"${1:int score} = sampGetPlayerScore(${0:int id})"
		],
		"description": "sampGetPlayerScore - Получает очки игрока.\nПринимаемые значения:\nint id ИД игрока.\n\nВозвращаемые значения:\nint score Очки.\n"
	},
	"sampSetChatString || Меняет параметры строки чата на пользовательские.": {
		"scope": "lua",
		"prefix": "sampSetChatString || Меняет параметры строки чата на пользовательские.",
		"body": [
			"sampSetChatString(${0:int id, zstring text, zstring prefix, uint color, uint pcolor})"
		],
		"description": "sampSetChatString - Меняет параметры строки чата на пользовательские.\nПринимаемые значения:\nint id ID строки(0-99), zstring text текст строки, zstring prefix префикс, uint color цвет строки, uint pcolor цвет префикса\\\\\n\nВозвращаемые значения:\n\n"
	},
	"sampGetChatString || Получает данные о сообщении в окне чата., А именно: string text, string prefix, int color, int pcolor": {
		"scope": "lua",
		"prefix": "sampGetChatString || Получает данные о сообщении в окне чата., А именно: string text, string prefix, int color, int pcolor",
		"body": [
			"${1:zstring text, zstring prefix, int color, int pcolor} = sampGetChatString(${0:int id})"
		],
		"description": "sampGetChatString - Получает данные о сообщении в окне чата., А именно: string text, string prefix, int color, int pcolor\nПринимаемые значения:\nint id Номер строки чата\n\nВозвращаемые значения:\nstring text Текст сообщения, string prefix Префикс, int color Цвет сообщения, int pcolor int pcolor\n"
	},
	"sampSetChatInputText || Вставляет в поле чата текст.": {
		"scope": "lua",
		"prefix": "sampSetChatInputText || Вставляет в поле чата текст.",
		"body": [
			"sampSetChatInputText(${0:zstring text})"
		],
		"description": "sampSetChatInputText - Вставляет в поле чата текст.\nПринимаемые значения:\nzstring zstring text Строка\\\\\n\nВозвращаемые значения:\n\n"
	},
	"sampGetChatInputText || Записывает в переменную данные введенные в поле чата.": {
		"scope": "lua",
		"prefix": "sampGetChatInputText || Записывает в переменную данные введенные в поле чата.",
		"body": [
			"${1:zstring text} = sampGetChatInputText(${0:})"
		],
		"description": "sampGetChatInputText - Записывает в переменную данные введенные в поле чата.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nzstring Строка\\\\\n"
	},
	"sampfuncsLog || Добавляет в консоль и лог-файл SAMPFUNCS текстовое сообщение. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.": {
		"scope": "lua",
		"prefix": "sampfuncsLog || Добавляет в консоль и лог-файл SAMPFUNCS текстовое сообщение. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.",
		"body": [
			"sampfuncsLog(${0:string text})"
		],
		"description": "sampfuncsLog - Добавляет в консоль и лог-файл SAMPFUNCS текстовое сообщение. Отличается от опкода тем, что не принимает динамическое количество аргументов для форматирования.\nПринимаемые значения:\nstring text текст\n\nВозвращаемые значения:\n\n"
	},
	"sampSetChatInputEnabled || Открывает/Закрывает чат": {
		"scope": "lua",
		"prefix": "sampSetChatInputEnabled || Открывает/Закрывает чат",
		"body": [
			"sampSetChatInputEnabled(${0:bool enabled})"
		],
		"description": "sampSetChatInputEnabled - Открывает/Закрывает чат\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"dxutCreateDialog || Создаёт dxut диалог": {
		"scope": "lua",
		"prefix": "dxutCreateDialog || Создаёт dxut диалог",
		"body": [
			"${1:DxutDialog dialog} = dxutCreateDialog(${0:zstring name})"
		],
		"description": "dxutCreateDialog - Создаёт dxut диалог\nПринимаемые значения:\nzstring name заголовок\n\nВозвращаемые значения:\nDxutDialog dialog указатель на объект диалога\n"
	},
	"dxutPopEvent || Возвращает последнее id события и компонента которое произошло с указанным диалогом": {
		"scope": "lua",
		"prefix": "dxutPopEvent || Возвращает последнее id события и компонента которое произошло с указанным диалогом",
		"body": [
			"${1:bool result, int event, int id} = dxutPopEvent(${0:DxutDialog dialog})"
		],
		"description": "dxutPopEvent - Возвращает последнее id события и компонента которое произошло с указанным диалогом\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога\n\nВозвращаемые значения:\nbool result результат, int events id события, int id id компонента\n"
	},
	"dxutAddButton || Создаёт кнопку на Dxut диалоге": {
		"scope": "lua",
		"prefix": "dxutAddButton || Создаёт кнопку на Dxut диалоге",
		"body": [
			"dxutAddButton(${0:DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY})"
		],
		"description": "dxutAddButton - Создаёт кнопку на Dxut диалоге\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int id уникальный id кнопки, zstring text надпись на кнопке, int posX ,, int posY позиция кнопки, int sizeX ,, int sizeY размер кнопки\n\nВозвращаемые значения:\n\n"
	},
	"dxutAddCheckbox || Создаёт чекбокс в Dxut диалоге": {
		"scope": "lua",
		"prefix": "dxutAddCheckbox || Создаёт чекбокс в Dxut диалоге",
		"body": [
			"dxutAddCheckbox(${0:DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY})"
		],
		"description": "dxutAddCheckbox - Создаёт чекбокс в Dxut диалоге\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int id уникальный id чекбокса, zstring text название чекбокса, int posX ,, int posY позиция чекбокса, int sizeX ,, int sizeY размер чекбокса\n\nВозвращаемые значения:\n\n"
	},
	"dxutSetDialogPos || Устанавливает позицию и размер Dxut диалогу": {
		"scope": "lua",
		"prefix": "dxutSetDialogPos || Устанавливает позицию и размер Dxut диалогу",
		"body": [
			"dxutSetDialogPos(${0:DxutDialog dialog, int posX, int posY, int sizeX, int sizeY})"
		],
		"description": "dxutSetDialogPos - Устанавливает позицию и размер Dxut диалогу\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int posX ,, int posY позиция диалога, int sizeX ,, int sizeY размер диалога\n\nВозвращаемые значения:\n\n"
	},
	"dxutGetDialogPosAndSize || Получает позицию и размер Dxut диалога": {
		"scope": "lua",
		"prefix": "dxutGetDialogPosAndSize || Получает позицию и размер Dxut диалога",
		"body": [
			"${1:int posX, int posY, int sizeX, int sizeY} = dxutGetDialogPosAndSize(${0:DxutDialog dialog})"
		],
		"description": "dxutGetDialogPosAndSize - Получает позицию и размер Dxut диалога\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога\n\nВозвращаемые значения:\nint posX ,, int posY позиция диалога, int sizeX ,, int sizeY размер диалога\n"
	},
	"dxutSetDialogVisible || Устанавливает видимость диалогу": {
		"scope": "lua",
		"prefix": "dxutSetDialogVisible || Устанавливает видимость диалогу",
		"body": [
			"dxutSetDialogVisible(${0:DxutDialog dialog, bool visible})"
		],
		"description": "dxutSetDialogVisible - Устанавливает видимость диалогу\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, bool visible видимость диалога (если true-виден, если false-не виден)\n\nВозвращаемые значения:\n\n"
	},
	"dxutIsDialogVisible || Проверяет, виден ли Dxut диалог, возвращает true если диалог виден и наоборот": {
		"scope": "lua",
		"prefix": "dxutIsDialogVisible || Проверяет, виден ли Dxut диалог, возвращает true если диалог виден и наоборот",
		"body": [
			"${1:bool result} = dxutIsDialogVisible(${0:DxutDialog dialog})"
		],
		"description": "dxutIsDialogVisible - Проверяет, виден ли Dxut диалог, возвращает true если диалог виден и наоборот\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"dxutAddEditbox || Добавляет поле для ввода текста в Dxut диалоге": {
		"scope": "lua",
		"prefix": "dxutAddEditbox || Добавляет поле для ввода текста в Dxut диалоге",
		"body": [
			"dxutAddEditbox(${0:DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY})"
		],
		"description": "dxutAddEditbox - Добавляет поле для ввода текста в Dxut диалоге\nПринимаемые значения:\nDxutDialog dialog указатель на объект Dxut диалога, int id уникальный id, zstring text название, int posX ,, int posY позиция, int sizeX ,, int sizeY размер\n\nВозвращаемые значения:\n\n"
	},
	"dxutGetControlText || Возвращает текст компонента по id": {
		"scope": "lua",
		"prefix": "dxutGetControlText || Возвращает текст компонента по id",
		"body": [
			"${1:zstring text} = dxutGetControlText(${0:DxutDialog dialog, int id})"
		],
		"description": "dxutGetControlText - Возвращает текст компонента по id\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int id id компонента\n\nВозвращаемые значения:\nzstring text текст\n"
	},
	"sampIsCursorActive || Проверяет, виден ли курсор": {
		"scope": "lua",
		"prefix": "sampIsCursorActive || Проверяет, виден ли курсор",
		"body": [
			"${1:bool result} = sampIsCursorActive(${0:})"
		],
		"description": "sampIsCursorActive - Проверяет, виден ли курсор\nПринимаемые значения:\n\n\nВозвращаемые значения:\nbool result результат\n"
	},
	"sampSetCursorMode || Устанавливает режим курсора SAMP., Доступные режимы:, 0 - Отключен., 1 - Управление клавиатурой заблокировано, курсор отключен., 2 - Управление клавиатурой и мышкой заблокировано, курсор включен., 3 - Управление мышкой заблокировано, курсор включен., 4 - Управление мышкой заблокировано, курсор отключен.\\\\": {
		"scope": "lua",
		"prefix": "sampSetCursorMode || Устанавливает режим курсора SAMP., Доступные режимы:, 0 - Отключен., 1 - Управление клавиатурой заблокировано, курсор отключен., 2 - Управление клавиатурой и мышкой заблокировано, курсор включен., 3 - Управление мышкой заблокировано, курсор включен., 4 - Управление мышкой заблокировано, курсор отключен.\\\\",
		"body": [
			"sampSetCursorMode(${0:int mode})"
		],
		"description": "sampSetCursorMode - Устанавливает режим курсора SAMP., Доступные режимы:, 0 - Отключен., 1 - Управление клавиатурой заблокировано, курсор отключен., 2 - Управление клавиатурой и мышкой заблокировано, курсор включен., 3 - Управление мышкой заблокировано, курсор включен., 4 - Управление мышкой заблокировано, курсор отключен.\\\\\nПринимаемые значения:\nint mode Режим\n\nВозвращаемые значения:\n\n"
	},
	"sampGetCursorMode || Возвращает текущий режим курсора": {
		"scope": "lua",
		"prefix": "sampGetCursorMode || Возвращает текущий режим курсора",
		"body": [
			"${1:int mode} = sampGetCursorMode(${0:})"
		],
		"description": "sampGetCursorMode - Возвращает текущий режим курсора\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint mode ID режима\n"
	},
	"dxutSetControlVisible || Устанавливает видимость компонента Dxut диалога": {
		"scope": "lua",
		"prefix": "dxutSetControlVisible || Устанавливает видимость компонента Dxut диалога",
		"body": [
			"dxutSetControlVisible(${0:DxutDialog dialog, int id, bool visible})"
		],
		"description": "dxutSetControlVisible - Устанавливает видимость компонента Dxut диалога\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int id id компонента диалога, bool result видимость компонента\n\nВозвращаемые значения:\n\n"
	},
	"dxutAddStatic || Создаёт статистический текст на Dxut диалоге": {
		"scope": "lua",
		"prefix": "dxutAddStatic || Создаёт статистический текст на Dxut диалоге",
		"body": [
			"dxutAddStatic(${0:DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY})"
		],
		"description": "dxutAddStatic - Создаёт статистический текст на Dxut диалоге\nПринимаемые значения:\nDxutDialog dialog указатель на объект диалога, int id уникальный id текста, zstring text текст, int posX ,, int posY позиция, int sizeX ,, int sizeY размер\n\nВозвращаемые значения:\n\n"
	},
	"dxutIsCheckboxChecked || Проверяет, активирован ли чекбокс Dxut диалога": {
		"scope": "lua",
		"prefix": "dxutIsCheckboxChecked || Проверяет, активирован ли чекбокс Dxut диалога",
		"body": [
			"${1:bool result} = dxutIsCheckboxChecked(${0:DxutDialog dialog, int id})"
		],
		"description": "dxutIsCheckboxChecked - Проверяет, активирован ли чекбокс Dxut диалога\nПринимаемые значения:\nDxutDialog хэндл DXUT-диалога SAMPFUNCS, int id ID чекбокса\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"dxutGetControlSize || Получает размеры компонента": {
		"scope": "lua",
		"prefix": "dxutGetControlSize || Получает размеры компонента",
		"body": [
			"${1:int sizeX, int sizeY} = dxutGetControlSize(${0:DxutDialog dialog, int id})"
		],
		"description": "dxutGetControlSize - Получает размеры компонента\nПринимаемые значения:\nDxutDialog dialog Диалог, int id ID компонента\n\nВозвращаемые значения:\nint sizeX, int sizeY Размеры\n"
	},
	"sampGetServerSettingsPtr || Возвращает указатель на структуру настроек сервера": {
		"scope": "lua",
		"prefix": "sampGetServerSettingsPtr || Возвращает указатель на структуру настроек сервера",
		"body": [
			"${1:uint settingsPtr} = sampGetServerSettingsPtr(${0:})"
		],
		"description": "sampGetServerSettingsPtr - Возвращает указатель на структуру настроек сервера\nПринимаемые значения:\n\n\nВозвращаемые значения:\nsettingsPtr указатель\n"
	},
	"sampGetChatInfoPtr || Возвращает указатель на структуру чата": {
		"scope": "lua",
		"prefix": "sampGetChatInfoPtr || Возвращает указатель на структуру чата",
		"body": [
			"${1:uint chatPtr} = sampGetChatInfoPtr(${0:})"
		],
		"description": "sampGetChatInfoPtr - Возвращает указатель на структуру чата\nПринимаемые значения:\n\n\nВозвращаемые значения:\nchatPtr указатель\n"
	},
	"sampGetInputInfoPtr || Возвращает указатель на структуру поля ввода в чате": {
		"scope": "lua",
		"prefix": "sampGetInputInfoPtr || Возвращает указатель на структуру поля ввода в чате",
		"body": [
			"${1:uint inputPtr} = sampGetInputInfoPtr(${0:})"
		],
		"description": "sampGetInputInfoPtr - Возвращает указатель на структуру поля ввода в чате\nПринимаемые значения:\n\n\nВозвращаемые значения:\nuint inputPtr указатель\n"
	},
	"sampGetDialogInfoPtr || Возвращает указатель на структуру диалогов": {
		"scope": "lua",
		"prefix": "sampGetDialogInfoPtr || Возвращает указатель на структуру диалогов",
		"body": [
			"${1:uint dialogPtr} = sampGetDialogInfoPtr(${0:})"
		],
		"description": "sampGetDialogInfoPtr - Возвращает указатель на структуру диалогов\nПринимаемые значения:\n\n\nВозвращаемые значения:\nuint dialogPtr указатель\n"
	},
	"sampGetTextdrawPoolPtr || Получает указатель на структуру текстдравов.": {
		"scope": "lua",
		"prefix": "sampGetTextdrawPoolPtr || Получает указатель на структуру текстдравов.",
		"body": [
			"${1:int tdpool} = sampGetTextdrawPoolPtr(${0:})"
		],
		"description": "sampGetTextdrawPoolPtr - Получает указатель на структуру текстдравов.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nint tdpool структура\n"
	},
	"sampGetPlayerPoolPtr || Возвращает указатель на пул игроков": {
		"scope": "lua",
		"prefix": "sampGetPlayerPoolPtr || Возвращает указатель на пул игроков",
		"body": [
			"${1:uint playerpoolPtr} = sampGetPlayerPoolPtr(${0:})"
		],
		"description": "sampGetPlayerPoolPtr - Возвращает указатель на пул игроков\nПринимаемые значения:\n\n\nВозвращаемые значения:\nuint playerpoolPtr указатель\n"
	},
	"sampSendRconCommand || Отправляет RCON команду серверу": {
		"scope": "lua",
		"prefix": "sampSendRconCommand || Отправляет RCON команду серверу",
		"body": [
			"sampSendRconCommand(${0:zstring cmd})"
		],
		"description": "sampSendRconCommand - Отправляет RCON команду серверу\nПринимаемые значения:\nzstring cmd команда\n\nВозвращаемые значения:\n\n"
	},
	"sampSendOnfootData || Отправляет onFootData серверу": {
		"scope": "lua",
		"prefix": "sampSendOnfootData || Отправляет onFootData серверу",
		"body": [
			"sampSendOnfootData(${0:uint dataPtr})"
		],
		"description": "sampSendOnfootData - Отправляет onFootData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
	},
	"sampSendIncarData || Отправляет IncarData серверу": {
		"scope": "lua",
		"prefix": "sampSendIncarData || Отправляет IncarData серверу",
		"body": [
			"sampSendIncarData(${0:uint dataPtr})"
		],
		"description": "sampSendIncarData - Отправляет IncarData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
	},
	"sampSendPassengerData || Отправляет PassengerData серверу": {
		"scope": "lua",
		"prefix": "sampSendPassengerData || Отправляет PassengerData серверу",
		"body": [
			"sampSendPassengerData(${0:uint dataPtr})"
		],
		"description": "sampSendPassengerData - Отправляет PassengerData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
	},
	"sampSendAimData || Отправляет AimData серверу": {
		"scope": "lua",
		"prefix": "sampSendAimData || Отправляет AimData серверу",
		"body": [
			"sampSendAimData(${0:uint dataPtr})"
		],
		"description": "sampSendAimData - Отправляет AimData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
	},
	"sampSendBulletData || Отправляет BulletData серверу": {
		"scope": "lua",
		"prefix": "sampSendBulletData || Отправляет BulletData серверу",
		"body": [
			"sampSendBulletData(${0:uint dataPtr})"
		],
		"description": "sampSendBulletData - Отправляет BulletData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
	},
	"sampSendTrailerData || Отправляет TrailerData серверу": {
		"scope": "lua",
		"prefix": "sampSendTrailerData || Отправляет TrailerData серверу",
		"body": [
			"sampSendTrailerData(${0:uint dataPtr})"
		],
		"description": "sampSendTrailerData - Отправляет TrailerData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
	},
	"sampSendUnoccupiedData || Отправляет UnoccupiedData серверу": {
		"scope": "lua",
		"prefix": "sampSendUnoccupiedData || Отправляет UnoccupiedData серверу",
		"body": [
			"sampSendUnoccupiedData(${0:uint dataPtr})"
		],
		"description": "sampSendUnoccupiedData - Отправляет UnoccupiedData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
	},
	"sampSendSpectatorData || Отправляет SpectatorData серверу": {
		"scope": "lua",
		"prefix": "sampSendSpectatorData || Отправляет SpectatorData серверу",
		"body": [
			"sampSendSpectatorData(${0:uint dataPtr})"
		],
		"description": "sampSendSpectatorData - Отправляет SpectatorData серверу\nПринимаемые значения:\nuint dataPtr заполненная структура\n\nВозвращаемые значения:\n\n"
	},
	"sampSendClickPlayer || Отправляет RPC - RPC_CLICKPLAYER": {
		"scope": "lua",
		"prefix": "sampSendClickPlayer || Отправляет RPC - RPC_CLICKPLAYER",
		"body": [
			"sampSendClickPlayer(${0:int id, int source})"
		],
		"description": "sampSendClickPlayer - Отправляет RPC - RPC_CLICKPLAYER\nПринимаемые значения:\nint id ид игрока, int source источник вызова (\n\nВозвращаемые значения:\n\n"
	},
	"sampSendDialogResponse || Отправляет RPC - RPC_DIALOGRESPONSE": {
		"scope": "lua",
		"prefix": "sampSendDialogResponse || Отправляет RPC - RPC_DIALOGRESPONSE",
		"body": [
			"sampSendDialogResponse(${0:int id, int button, int listitem, zstring input})"
		],
		"description": "sampSendDialogResponse - Отправляет RPC - RPC_DIALOGRESPONSE\nПринимаемые значения:\nint id ид диалога, int button ид кнопки (0 / 1), int listitem номер элемента списка (от 0), zstring input текст введенный в поле\n\nВозвращаемые значения:\n\n"
	},
	"sampSendClickTextdraw || Отправляет RPC ClickTextdraw на сервер.": {
		"scope": "lua",
		"prefix": "sampSendClickTextdraw || Отправляет RPC ClickTextdraw на сервер.",
		"body": [
			"sampSendClickTextdraw(${0:int id})"
		],
		"description": "sampSendClickTextdraw - Отправляет RPC ClickTextdraw на сервер.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\n\n"
	},
	"sampSendGiveDamage || Отправляет RPC о нанесении урона другому игроку.": {
		"scope": "lua",
		"prefix": "sampSendGiveDamage || Отправляет RPC о нанесении урона другому игроку.",
		"body": [
			"sampSendGiveDamage(${0:int id, float damage, int weapon, int bodypart})"
		],
		"description": "sampSendGiveDamage - Отправляет RPC о нанесении урона другому игроку.\nПринимаемые значения:\nint id ID игрока, float damage количество урона, int weapon ID оружия, int bodypart часть тела\n\nВозвращаемые значения:\n\n"
	},
	"sampSendTakeDamage || Отправляет RPC о получении урона от другого игрока.": {
		"scope": "lua",
		"prefix": "sampSendTakeDamage || Отправляет RPC о получении урона от другого игрока.",
		"body": [
			"sampSendTakeDamage(${0:int id, float damage, int weapon, int bodypart})"
		],
		"description": "sampSendTakeDamage - Отправляет RPC о получении урона от другого игрока.\nПринимаемые значения:\nint id ID игрока, float damage количество урона, int weapon ID оружия, int bodypart часть тела\n\nВозвращаемые значения:\n\n"
	},
	"sampSendEditObject || Отправляет RPC о изменении структуры объекта в режиме его редактирования.": {
		"scope": "lua",
		"prefix": "sampSendEditObject || Отправляет RPC о изменении структуры объекта в режиме его редактирования.",
		"body": [
			"sampSendEditObject(${0:bool playerObject, int objectId, int response, float posX, float posY, float posZ, float rotX, float rotY, float rotZ})"
		],
		"description": "sampSendEditObject - Отправляет RPC о изменении структуры объекта в режиме его редактирования.\nПринимаемые значения:\nbool playerObject 0 --- глобальный объект / 1 --- объект для одного игрока, int objectId ID объекта, int response Тип ответа (от 0 до 2), float posX, float posY, float posZ Позиция объекта, float rotX, float rotY, float rotZ Поворот объекта\\\\\n\nВозвращаемые значения:\n\n"
	},
	"sampSendEditAttachedObject || Отправляет RPC о изменении прикрепленного объекта в режиме редактирования объекта.": {
		"scope": "lua",
		"prefix": "sampSendEditAttachedObject || Отправляет RPC о изменении прикрепленного объекта в режиме редактирования объекта.",
		"body": [
			"sampSendEditAttachedObject(${0:int response, int index, int model, int bone, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ})"
		],
		"description": "sampSendEditAttachedObject - Отправляет RPC о изменении прикрепленного объекта в режиме редактирования объекта.\nПринимаемые значения:\nint response Cтатус ответа(0 --- нажата отмена(ESC) / 1 --- сохранено), int index Индекс/слот объекта, int model Модель объекта, int bone ID кости к которой присоединен объект, float offsetX, float offsetY, float offsetZ Смещение объекта, float rotX, float rotY, float rotZ Поворот объекта, float scaleX, float scaleY, float scaleZ Масштаб объекта\n\nВозвращаемые значения:\n\n"
	},
	"sampSendInteriorChange || Отправляет RPC - RPC_SETINTERIORID": {
		"scope": "lua",
		"prefix": "sampSendInteriorChange || Отправляет RPC - RPC_SETINTERIORID",
		"body": [
			"sampSendInteriorChange(${0:int id})"
		],
		"description": "sampSendInteriorChange - Отправляет RPC - RPC_SETINTERIORID\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
	},
	"sampSendRequestSpawn || Отправляет RPC - RPC_REQUESTSPAWN": {
		"scope": "lua",
		"prefix": "sampSendRequestSpawn || Отправляет RPC - RPC_REQUESTSPAWN",
		"body": [
			"sampSendRequestSpawn(${0:})"
		],
		"description": "sampSendRequestSpawn - Отправляет RPC - RPC_REQUESTSPAWN\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"sampSendPickedUpPickup || Отправляет RPC - RPC_PICKEDUPPICKUP": {
		"scope": "lua",
		"prefix": "sampSendPickedUpPickup || Отправляет RPC - RPC_PICKEDUPPICKUP",
		"body": [
			"sampSendPickedUpPickup(${0:int id})"
		],
		"description": "sampSendPickedUpPickup - Отправляет RPC - RPC_PICKEDUPPICKUP\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
	},
	"sampSendMenuSelectRow || Отправляет RPC - RPC_MENUSELECT": {
		"scope": "lua",
		"prefix": "sampSendMenuSelectRow || Отправляет RPC - RPC_MENUSELECT",
		"body": [
			"sampSendMenuSelectRow(${0:int id})"
		],
		"description": "sampSendMenuSelectRow - Отправляет RPC - RPC_MENUSELECT\nПринимаемые значения:\nint id номер строки меню\n\nВозвращаемые значения:\n\n"
	},
	"sampSendMenuQuit || Отправляет RPC - RPC_MENUQUIT": {
		"scope": "lua",
		"prefix": "sampSendMenuQuit || Отправляет RPC - RPC_MENUQUIT",
		"body": [
			"sampSendMenuQuit(${0:})"
		],
		"description": "sampSendMenuQuit - Отправляет RPC - RPC_MENUQUIT\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"sampSendVehicleDestroyed || Отправляет RPC - RPC_VEHICLEDESTROYED": {
		"scope": "lua",
		"prefix": "sampSendVehicleDestroyed || Отправляет RPC - RPC_VEHICLEDESTROYED",
		"body": [
			"sampSendVehicleDestroyed(${0:int id})"
		],
		"description": "sampSendVehicleDestroyed - Отправляет RPC - RPC_VEHICLEDESTROYED\nПринимаемые значения:\nint id ид т/с\n\nВозвращаемые значения:\n\n"
	},
	"sampIsScoreboardOpen || Проверяет видимость списка игроков (TAB)": {
		"scope": "lua",
		"prefix": "sampIsScoreboardOpen || Проверяет видимость списка игроков (TAB)",
		"body": [
			"${1:bool result} = sampIsScoreboardOpen(${0:})"
		],
		"description": "sampIsScoreboardOpen - Проверяет видимость списка игроков (TAB)\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
	},
	"sampToggleScoreboard || Переключает видимость списка игроков (TAB)": {
		"scope": "lua",
		"prefix": "sampToggleScoreboard || Переключает видимость списка игроков (TAB)",
		"body": [
			"sampToggleScoreboard(${0:bool show})"
		],
		"description": "sampToggleScoreboard - Переключает видимость списка игроков (TAB)\nПринимаемые значения:\nbool show статус\n\nВозвращаемые значения:\n\n"
	},
	"sampGetDialogText || Возвращает основной текст последнего или активного диалогового окна.": {
		"scope": "lua",
		"prefix": "sampGetDialogText || Возвращает основной текст последнего или активного диалогового окна.",
		"body": [
			"${1:string text} = sampGetDialogText(${0:})"
		],
		"description": "sampGetDialogText - Возвращает основной текст последнего или активного диалогового окна.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nstring text текст\n"
	},
	"sampGetDialogCaption || Возвращает заголовок последнего открытого диалога": {
		"scope": "lua",
		"prefix": "sampGetDialogCaption || Возвращает заголовок последнего открытого диалога",
		"body": [
			"${1:zstring caption} = sampGetDialogCaption(${0:})"
		],
		"description": "sampGetDialogCaption - Возвращает заголовок последнего открытого диалога\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
	},
	"sampSetDialogClientside || Устанавливает сторону (клиентская/серверная) диалога., Если указана клиентская, то информация после закрытия диалога (Dialog Response) не будет отправлена на сервер": {
		"scope": "lua",
		"prefix": "sampSetDialogClientside || Устанавливает сторону (клиентская/серверная) диалога., Если указана клиентская, то информация после закрытия диалога (Dialog Response) не будет отправлена на сервер",
		"body": [
			"sampSetDialogClientside(${0:bool clientside})"
		],
		"description": "sampSetDialogClientside - Устанавливает сторону (клиентская/серверная) диалога., Если указана клиентская, то информация после закрытия диалога (Dialog Response) не будет отправлена на сервер\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
	},
	"sampIsDialogClientside || Проверяет диалог на то, что тот принадлежит клиентской стороне": {
		"scope": "lua",
		"prefix": "sampIsDialogClientside || Проверяет диалог на то, что тот принадлежит клиентской стороне",
		"body": [
			"${1:bool result} = sampIsDialogClientside(${0:})"
		],
		"description": "sampIsDialogClientside - Проверяет диалог на то, что тот принадлежит клиентской стороне\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
	},
	"sampIsChatVisible || Проверяет видимость чата": {
		"scope": "lua",
		"prefix": "sampIsChatVisible || Проверяет видимость чата",
		"body": [
			"${1:bool result} = sampIsChatVisible(${0:})"
		],
		"description": "sampIsChatVisible - Проверяет видимость чата\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
	},
	"sampGetChatDisplayMode || Возвращает режим отображения чата, Режимы:, 2 - обычный, 1 - без тени у текста, 0 - не виден\\\\": {
		"scope": "lua",
		"prefix": "sampGetChatDisplayMode || Возвращает режим отображения чата, Режимы:, 2 - обычный, 1 - без тени у текста, 0 - не виден\\\\",
		"body": [
			"${1:int mode} = sampGetChatDisplayMode(${0:})"
		],
		"description": "sampGetChatDisplayMode - Возвращает режим отображения чата, Режимы:, 2 - обычный, 1 - без тени у текста, 0 - не виден\\\\\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
	},
	"sampSetChatDisplayMode || Устанавливает режим отображения чата": {
		"scope": "lua",
		"prefix": "sampSetChatDisplayMode || Устанавливает режим отображения чата",
		"body": [
			"sampSetChatDisplayMode(${0:int mode})"
		],
		"description": "sampSetChatDisplayMode - Устанавливает режим отображения чата\nПринимаемые значения:\nint mode режим отображения чата\n\nВозвращаемые значения:\n\n"
	},
	"resumeScmThread || Возобновляет исполнение SCM-потока.": {
		"scope": "lua",
		"prefix": "resumeScmThread || Возобновляет исполнение SCM-потока.",
		"body": [
			"resumeScmThread(${0:uint thread})"
		],
		"description": "resumeScmThread - Возобновляет исполнение SCM-потока.\nПринимаемые значения:\nuint thread указатель на поток\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamReadBool || Читает значение типа boolean из BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamReadBool || Читает значение типа boolean из BitStream.",
		"body": [
			"${1:bool value} = raknetBitStreamReadBool(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamReadBool - Читает значение типа boolean из BitStream.\nПринимаемые значения:\nBitstream bs bitStream\n\nВозвращаемые значения:\nbool value результирующее значение\n"
	},
	"raknetBitStreamReadInt8 || Читает значение типа byte из BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamReadInt8 || Читает значение типа byte из BitStream.",
		"body": [
			"${1:int value} = raknetBitStreamReadInt8(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamReadInt8 - Читает значение типа byte из BitStream.\nПринимаемые значения:\nBitstream bs bitStream\n\nВозвращаемые значения:\nint value результирующее значение\n"
	},
	"raknetBitStreamReadInt16 || Читает значение типа short (2 байта) из BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamReadInt16 || Читает значение типа short (2 байта) из BitStream.",
		"body": [
			"${1:int value} = raknetBitStreamReadInt16(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamReadInt16 - Читает значение типа short (2 байта) из BitStream.\nПринимаемые значения:\nBitstream bs bitStream\n\nВозвращаемые значения:\nint value результирующее значение\n"
	},
	"raknetBitStreamReadInt32 || Читает значение типа integer (4 байта) из BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamReadInt32 || Читает значение типа integer (4 байта) из BitStream.",
		"body": [
			"${1:int value} = raknetBitStreamReadInt32(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamReadInt32 - Читает значение типа integer (4 байта) из BitStream.\nПринимаемые значения:\nBitstream bs bitStream\n\nВозвращаемые значения:\nint value результирующее значение\n"
	},
	"raknetBitStreamReadFloat || Читает значение типа float из BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamReadFloat || Читает значение типа float из BitStream.",
		"body": [
			"${1:float value} = raknetBitStreamReadFloat(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamReadFloat - Читает значение типа float из BitStream.\nПринимаемые значения:\nBitstream bs bitStream\n\nВозвращаемые значения:\nfloat value результирующее значение\n"
	},
	"raknetBitStreamReadBuffer || Читает буффер указанного размера из BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamReadBuffer || Читает буффер указанного размера из BitStream.",
		"body": [
			"raknetBitStreamReadBuffer(${0:Bitstream bs, int dest, int size})"
		],
		"description": "raknetBitStreamReadBuffer - Читает буффер указанного размера из BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int dest буффер, int size размер\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamReadString || Читает строку указанной длины (переменный размер) из BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamReadString || Читает строку указанной длины (переменный размер) из BitStream.",
		"body": [
			"${1:string value} = raknetBitStreamReadString(${0:Bitstream bs, int size})"
		],
		"description": "raknetBitStreamReadString - Читает строку указанной длины (переменный размер) из BitStream.\nПринимаемые значения:\nBitstream bs bitStream, int size длина строки\n\nВозвращаемые значения:\nstring value результирующее значение\n"
	},
	"raknetBitStreamResetReadPointer || Сбрасывает указатель чтения битстрима": {
		"scope": "lua",
		"prefix": "raknetBitStreamResetReadPointer || Сбрасывает указатель чтения битстрима",
		"body": [
			"raknetBitStreamResetReadPointer(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamResetReadPointer - Сбрасывает указатель чтения битстрима\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamResetWritePointer || Сбрасывает указатель записи битстрима": {
		"scope": "lua",
		"prefix": "raknetBitStreamResetWritePointer || Сбрасывает указатель записи битстрима",
		"body": [
			"raknetBitStreamResetWritePointer(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamResetWritePointer - Сбрасывает указатель записи битстрима\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamIgnoreBits || Осуществляет пропуск битов в указателе чтения/записи битстрима": {
		"scope": "lua",
		"prefix": "raknetBitStreamIgnoreBits || Осуществляет пропуск битов в указателе чтения/записи битстрима",
		"body": [
			"raknetBitStreamIgnoreBits(${0:Bitstream bs, int amount})"
		],
		"description": "raknetBitStreamIgnoreBits - Осуществляет пропуск битов в указателе чтения/записи битстрима\nПринимаемые значения:\nBitstream bs , int amount количество битов\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamSetWriteOffset || Устанавливает смещение для последующей записи в битстрим": {
		"scope": "lua",
		"prefix": "raknetBitStreamSetWriteOffset || Устанавливает смещение для последующей записи в битстрим",
		"body": [
			"raknetBitStreamSetWriteOffset(${0:Bitstream bs, int offset})"
		],
		"description": "raknetBitStreamSetWriteOffset - Устанавливает смещение для последующей записи в битстрим\nПринимаемые значения:\nBitstream bs , int offset смещение (в битах)\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamSetReadOffset || Устанавливает смещение для последующего чтения битстрима": {
		"scope": "lua",
		"prefix": "raknetBitStreamSetReadOffset || Устанавливает смещение для последующего чтения битстрима",
		"body": [
			"raknetBitStreamSetReadOffset(${0:Bitstream bs, int offset})"
		],
		"description": "raknetBitStreamSetReadOffset - Устанавливает смещение для последующего чтения битстрима\nПринимаемые значения:\nBitstream bs , int offset смещение (в битах)\n\nВозвращаемые значения:\n\n"
	},
	"raknetBitStreamGetNumberOfBitsUsed || Возвращает количество записанных битов в битстриме": {
		"scope": "lua",
		"prefix": "raknetBitStreamGetNumberOfBitsUsed || Возвращает количество записанных битов в битстриме",
		"body": [
			"${1:int value} = raknetBitStreamGetNumberOfBitsUsed(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamGetNumberOfBitsUsed - Возвращает количество записанных битов в битстриме\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
	},
	"raknetBitStreamGetNumberOfBytesUsed || Возвращает количество записанных байтов в битстриме": {
		"scope": "lua",
		"prefix": "raknetBitStreamGetNumberOfBytesUsed || Возвращает количество записанных байтов в битстриме",
		"body": [
			"${1:int value} = raknetBitStreamGetNumberOfBytesUsed(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamGetNumberOfBytesUsed - Возвращает количество записанных байтов в битстриме\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
	},
	"raknetBitStreamGetNumberOfUnreadBits || Возвращает количество непрочитанных битов в битстриме": {
		"scope": "lua",
		"prefix": "raknetBitStreamGetNumberOfUnreadBits || Возвращает количество непрочитанных битов в битстриме",
		"body": [
			"${1:int value} = raknetBitStreamGetNumberOfUnreadBits(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamGetNumberOfUnreadBits - Возвращает количество непрочитанных битов в битстриме\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
	},
	"raknetBitStreamGetWriteOffset || Возвращает текущий оффсет записи в BitStream.": {
		"scope": "lua",
		"prefix": "raknetBitStreamGetWriteOffset || Возвращает текущий оффсет записи в BitStream.",
		"body": [
			"${1:int value} = raknetBitStreamGetWriteOffset(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamGetWriteOffset - Возвращает текущий оффсет записи в BitStream.\nПринимаемые значения:\nBitstream bs Указатель на BitStream\n\nВозвращаемые значения:\nint value Оффсет\n"
	},
	"raknetBitStreamGetReadOffset || Возвращает текущий оффсет чтения из BitStream'а.": {
		"scope": "lua",
		"prefix": "raknetBitStreamGetReadOffset || Возвращает текущий оффсет чтения из BitStream'а.",
		"body": [
			"${1:int value} = raknetBitStreamGetReadOffset(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamGetReadOffset - Возвращает текущий оффсет чтения из BitStream'а.\nПринимаемые значения:\nBitstream bs Указатель на BitStream\n\nВозвращаемые значения:\nint value Оффсет\n"
	},
	"raknetBitStreamGetDataPtr || Возвращает указатель на данные BitStream'а.": {
		"scope": "lua",
		"prefix": "raknetBitStreamGetDataPtr || Возвращает указатель на данные BitStream'а.",
		"body": [
			"${1:uint value} = raknetBitStreamGetDataPtr(${0:Bitstream bs})"
		],
		"description": "raknetBitStreamGetDataPtr - Возвращает указатель на данные BitStream'а.\nПринимаемые значения:\nBitstream bs BitStream\\\\\n\nВозвращаемые значения:\nuint value указатель на структуру данных\\\\\n"
	},
	"raknetBitStreamDecodeString || Декриптует строку из BitStream`a и записывает её в буфер": {
		"scope": "lua",
		"prefix": "raknetBitStreamDecodeString || Декриптует строку из BitStream`a и записывает её в буфер",
		"body": [
			"${1:zstring string} = raknetBitStreamDecodeString(${0:Bitstream bs, int size})"
		],
		"description": "raknetBitStreamDecodeString - Декриптует строку из BitStream`a и записывает её в буфер\nПринимаемые значения:\nBitstream bs Указатель на BitStream, int size Размер буфера\n\nВозвращаемые значения:\nzstring string Буфер\n"
	},
	"raknetBitStreamEncodeString || Криптует строку и записывает в BitStream": {
		"scope": "lua",
		"prefix": "raknetBitStreamEncodeString || Криптует строку и записывает в BitStream",
		"body": [
			"raknetBitStreamEncodeString(${0:Bitstream bs, zstring string})"
		],
		"description": "raknetBitStreamEncodeString - Криптует строку и записывает в BitStream\nПринимаемые значения:\nBitstream bs Указатель на BitStream, zstring string Буфер\n\nВозвращаемые значения:\n\n"
	},
	"raknetEmulRpcReceiveBitStream || Эмулирует входящий RPC с помощью данных BitStream'а.": {
		"scope": "lua",
		"prefix": "raknetEmulRpcReceiveBitStream || Эмулирует входящий RPC с помощью данных BitStream'а.",
		"body": [
			"raknetEmulRpcReceiveBitStream(${0:int rpc, Bitstream bs})"
		],
		"description": "raknetEmulRpcReceiveBitStream - Эмулирует входящий RPC с помощью данных BitStream'а.\nПринимаемые значения:\nint rpc ID RPC, Bitstream bs Указатель на BitStream\n\nВозвращаемые значения:\n\n"
	},
	"raknetEmulPacketReceiveBitStream || Эмулирует входящий пакет с помощью даннных BitStream'а.": {
		"scope": "lua",
		"prefix": "raknetEmulPacketReceiveBitStream || Эмулирует входящий пакет с помощью даннных BitStream'а.",
		"body": [
			"raknetEmulPacketReceiveBitStream(${0:int PacketId, int BitStream})"
		],
		"description": "raknetEmulPacketReceiveBitStream - Эмулирует входящий пакет с помощью даннных BitStream'а.\nПринимаемые значения:\nint Packet Id ID пакета, int BitStream Указатель на BitStream\n\nВозвращаемые значения:\n\n"
	},
	"raknetGetRpcName || Возвращает наименование RPC по его ид": {
		"scope": "lua",
		"prefix": "raknetGetRpcName || Возвращает наименование RPC по его ид",
		"body": [
			"${1:zstring name} = raknetGetRpcName(${0:int rpc})"
		],
		"description": "raknetGetRpcName - Возвращает наименование RPC по его ид\nПринимаемые значения:\nint rpc ид RPC\n\nВозвращаемые значения:\nnone\n"
	},
	"raknetGetPacketName || Возвращает наименование пакета по его ид": {
		"scope": "lua",
		"prefix": "raknetGetPacketName || Возвращает наименование пакета по его ид",
		"body": [
			"${1:zstring name} = raknetGetPacketName(${0:int packet})"
		],
		"description": "raknetGetPacketName - Возвращает наименование пакета по его ид\nПринимаемые значения:\nint packet ид пакета\n\nВозвращаемые значения:\nnone\n"
	},
	"setSampfuncsGlobalVar || Устанавливает новое значение (регистрирует) для глобальной переменной SAMPFUNCS": {
		"scope": "lua",
		"prefix": "setSampfuncsGlobalVar || Устанавливает новое значение (регистрирует) для глобальной переменной SAMPFUNCS",
		"body": [
			"${1:bool result} = setSampfuncsGlobalVar(${0:zstring var, int value})"
		],
		"description": "setSampfuncsGlobalVar - Устанавливает новое значение (регистрирует) для глобальной переменной SAMPFUNCS\nПринимаемые значения:\nzstring var наименование переменной, int value значение переменной\n\nВозвращаемые значения:\nnone\n"
	},
	"getSampfuncsGlobalVar || Возвращает значение глобальной переменной, зарегистрированной с помощью SAMPFUNCS": {
		"scope": "lua",
		"prefix": "getSampfuncsGlobalVar || Возвращает значение глобальной переменной, зарегистрированной с помощью SAMPFUNCS",
		"body": [
			"${1:bool result, int value} = getSampfuncsGlobalVar(${0:zstring var})"
		],
		"description": "getSampfuncsGlobalVar - Возвращает значение глобальной переменной, зарегистрированной с помощью SAMPFUNCS\nПринимаемые значения:\nzstring var наименование переменной\n\nВозвращаемые значения:\nbool result переменная найдена, int value значение переменной\n"
	},
	"sampCreate3dTextEx || Создает (перезаписывает) SAMP объект --- 3D-текст., В отличии от sampCreate3dText данная функция взаимодействует с SAMP пулом напрямую.": {
		"scope": "lua",
		"prefix": "sampCreate3dTextEx || Создает (перезаписывает) SAMP объект --- 3D-текст., В отличии от sampCreate3dText данная функция взаимодействует с SAMP пулом напрямую.",
		"body": [
			"sampCreate3dTextEx(${0:int id, zstring text, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId})"
		],
		"description": "sampCreate3dTextEx - Создает (перезаписывает) SAMP объект --- 3D-текст., В отличии от sampCreate3dText данная функция взаимодействует с SAMP пулом напрямую.\nПринимаемые значения:\nint id Ид создаваемого/перезаписываемого 3D-текста, zstring text Содержимое, int color Цвет (ARGB), float posX Позиция/смещение относительно крепления по оси X, float posY Позиция/смещение относительно крепления по оси Y, float posZ Позиция/смещение относительно крепления по оси Z, float distance Дистанция при которой будет виден 3D-текст, bool ignoreWalls Виден за объектами/стенами, int playerId Крепление к игроку по ид (-1 --- отключить), int vehicleId Крепление к т/с по ид (-1 --- отключить)\n\nВозвращаемые значения:\n\n"
	},
	"sampGet3dTextInfoById || Получает параметры 3D текста.": {
		"scope": "lua",
		"prefix": "sampGet3dTextInfoById || Получает параметры 3D текста.",
		"body": [
			"${1:string string, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId} = sampGet3dTextInfoById(${0:int id})"
		],
		"description": "sampGet3dTextInfoById - Получает параметры 3D текста.\nПринимаемые значения:\nint id ID 3D Текста\n\nВозвращаемые значения:\nstring string текст., int color цвет., float posX , float posY , float posZ координаты 3D текста(XYZ), float distance дистанция., bool ignoreWalls виден ли через стены., int playerId если прикреплен к игроку, то возвращает его ид., int vehicleId если прикреплен к т/с, то возвращает его ид\n"
	},
	"sampSet3dTextString || Устанавливает 3D тексту новый текст.": {
		"scope": "lua",
		"prefix": "sampSet3dTextString || Устанавливает 3D тексту новый текст.",
		"body": [
			"sampSet3dTextString(${0:int id, string text})"
		],
		"description": "sampSet3dTextString - Устанавливает 3D тексту новый текст.\nПринимаемые значения:\nint id ID 3D текста., string text текст\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawCreate || Создает текстдрав c заданными параметрами.": {
		"scope": "lua",
		"prefix": "sampTextdrawCreate || Создает текстдрав c заданными параметрами.",
		"body": [
			"sampTextdrawCreate(${0:int id, string text, float posX, float posY})"
		],
		"description": "sampTextdrawCreate - Создает текстдрав c заданными параметрами.\nПринимаемые значения:\nint id ID текстдрава, string text текст текстдрава, float posX , float posY координаты текстдрава(XY)\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawSetBoxColorAndSize || Устанавливает параметры прямоугольника текстдраву.": {
		"scope": "lua",
		"prefix": "sampTextdrawSetBoxColorAndSize || Устанавливает параметры прямоугольника текстдраву.",
		"body": [
			"sampTextdrawSetBoxColorAndSize(${0:int id, int box, int color, float sizeX, float sizeY})"
		],
		"description": "sampTextdrawSetBoxColorAndSize - Устанавливает параметры прямоугольника текстдраву.\nПринимаемые значения:\nint id ID текстдрава, int box статус, int color цвет, float sizeX , float sizeY размеры\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawSetAlign || Задает выравнивание текста текстдраву.": {
		"scope": "lua",
		"prefix": "sampTextdrawSetAlign || Задает выравнивание текста текстдраву.",
		"body": [
			"sampTextdrawSetAlign(${0:int id, int align})"
		],
		"description": "sampTextdrawSetAlign - Задает выравнивание текста текстдраву.\nПринимаемые значения:\nint id ID текстдрава, int align тип выравнивания\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawSetProportional || Устанавливает масштабирование текста текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawSetProportional || Устанавливает масштабирование текста текстдрава.",
		"body": [
			"sampTextdrawSetProportional(${0:int id, int proportional})"
		],
		"description": "sampTextdrawSetProportional - Устанавливает масштабирование текста текстдрава.\nПринимаемые значения:\nint id ID текстдрава, int proportional статус\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawSetStyle || Устанавливает стиль текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawSetStyle || Устанавливает стиль текстдрава.",
		"body": [
			"sampTextdrawSetStyle(${0:int id, int style})"
		],
		"description": "sampTextdrawSetStyle - Устанавливает стиль текстдрава.\nПринимаемые значения:\nint id ID текстдрава, int style стиль\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawSetShadow || Устанавливает тень текстдраву.": {
		"scope": "lua",
		"prefix": "sampTextdrawSetShadow || Устанавливает тень текстдраву.",
		"body": [
			"sampTextdrawSetShadow(${0:int id, int shadow, int color})"
		],
		"description": "sampTextdrawSetShadow - Устанавливает тень текстдраву.\nПринимаемые значения:\nint id ID текстдрава, int shadow размер тени, int color цвет\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawSetOutlineColor || Устанавливает текстдраву обводку": {
		"scope": "lua",
		"prefix": "sampTextdrawSetOutlineColor || Устанавливает текстдраву обводку",
		"body": [
			"sampTextdrawSetOutlineColor(${0:int id, int outline, int color})"
		],
		"description": "sampTextdrawSetOutlineColor - Устанавливает текстдраву обводку\nПринимаемые значения:\nint id ID текстдрава, int outline толщина обводки, int color цвет\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawSetModelRotationZoomVehColor || Устанавливает модель объекта/машины текстдраву со стилем 5.": {
		"scope": "lua",
		"prefix": "sampTextdrawSetModelRotationZoomVehColor || Устанавливает модель объекта/машины текстдраву со стилем 5.",
		"body": [
			"sampTextdrawSetModelRotationZoomVehColor(${0:int id, int model, float rotX, float rotY, float rotZ, float zoom, int clr1, int clr2})"
		],
		"description": "sampTextdrawSetModelRotationZoomVehColor - Устанавливает модель объекта/машины текстдраву со стилем 5.\nПринимаемые значения:\nint id ID текстдрава, int model номер модели, float rotX , float rotY , float rotZ вращение модели по осям (XYZ), float zoom дальность камеры, int clr1 , int clr2 первичный и вторичный цвет\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawSetString || Устанавливает текст текстдраву.": {
		"scope": "lua",
		"prefix": "sampTextdrawSetString || Устанавливает текст текстдраву.",
		"body": [
			"sampTextdrawSetString(${0:int id, string text})"
		],
		"description": "sampTextdrawSetString - Устанавливает текст текстдраву.\nПринимаемые значения:\nint id ID текстдрава, string text текст\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawSetPos || Устанавливает позицию текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawSetPos || Устанавливает позицию текстдрава.",
		"body": [
			"sampTextdrawSetPos(${0:int id, float posX, float posY})"
		],
		"description": "sampTextdrawSetPos - Устанавливает позицию текстдрава.\nПринимаемые значения:\nint id ID текстдрава, float posX , float posY позиция текстдрава (XY)\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawSetLetterSizeAndColor || Устанавливает параметры символов текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawSetLetterSizeAndColor || Устанавливает параметры символов текстдрава.",
		"body": [
			"sampTextdrawSetLetterSizeAndColor(${0:int id, float letSizeX, float letSizeY, int color})"
		],
		"description": "sampTextdrawSetLetterSizeAndColor - Устанавливает параметры символов текстдрава.\nПринимаемые значения:\nint id ID текстдрава, float letSizeX , float letSizeY Размер, int color цвет\n\nВозвращаемые значения:\n\n"
	},
	"sampTextdrawGetBoxEnabledColorAndSize || Получает параметры прямоугольника текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawGetBoxEnabledColorAndSize || Получает параметры прямоугольника текстдрава.",
		"body": [
			"${1:int box, int color, float sizeX, float sizeY} = sampTextdrawGetBoxEnabledColorAndSize(${0:int id})"
		],
		"description": "sampTextdrawGetBoxEnabledColorAndSize - Получает параметры прямоугольника текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint box статус., int color цвет., float sizeX , float sizeY размер\n"
	},
	"sampTextdrawGetAlign || Получает тип выравнивания текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawGetAlign || Получает тип выравнивания текстдрава.",
		"body": [
			"${1:int align} = sampTextdrawGetAlign(${0:int id})"
		],
		"description": "sampTextdrawGetAlign - Получает тип выравнивания текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint align тип\n"
	},
	"sampTextdrawGetProportional || Получает статус масштабирования текста в пропорциональном соотношении указанного текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawGetProportional || Получает статус масштабирования текста в пропорциональном соотношении указанного текстдрава.",
		"body": [
			"${1:int prop} = sampTextdrawGetProportional(${0:int id})"
		],
		"description": "sampTextdrawGetProportional - Получает статус масштабирования текста в пропорциональном соотношении указанного текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint prop пропорция\n"
	},
	"sampTextdrawGetStyle || Получает стиль текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawGetStyle || Получает стиль текстдрава.",
		"body": [
			"${1:int style} = sampTextdrawGetStyle(${0:int id})"
		],
		"description": "sampTextdrawGetStyle - Получает стиль текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint style стиль\n"
	},
	"sampTextdrawGetShadowColor || Получает параметры тени текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawGetShadowColor || Получает параметры тени текстдрава.",
		"body": [
			"${1:int shadow, int color} = sampTextdrawGetShadowColor(${0:int id})"
		],
		"description": "sampTextdrawGetShadowColor - Получает параметры тени текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint shadow размер., int color цвет\n"
	},
	"sampTextdrawGetOutlineColor || Получает параметры обводки текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawGetOutlineColor || Получает параметры обводки текстдрава.",
		"body": [
			"${1:int outline, int color} = sampTextdrawGetOutlineColor(${0:int id})"
		],
		"description": "sampTextdrawGetOutlineColor - Получает параметры обводки текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint outline толщина., int color цвет\n"
	},
	"sampTextdrawGetModelRotationZoomVehColor || Получает параметры модели текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawGetModelRotationZoomVehColor || Получает параметры модели текстдрава.",
		"body": [
			"${1:int model, float rotX, float rotY, float rotZ, float zoom, int clr1, int clr2} = sampTextdrawGetModelRotationZoomVehColor(${0:int id})"
		],
		"description": "sampTextdrawGetModelRotationZoomVehColor - Получает параметры модели текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nint model модель, float rotX , float rotY , float rotZ поворот по осям(XYZ), float zoom отдаление камеры, int clr1 , int clr2 первичный и вторичный цвета\n"
	},
	"sampTextdrawGetString || Получает текст текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawGetString || Получает текст текстдрава.",
		"body": [
			"${1:string text} = sampTextdrawGetString(${0:int id})"
		],
		"description": "sampTextdrawGetString - Получает текст текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nstring text текст\n"
	},
	"sampTextdrawGetPos || Получает позицию текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawGetPos || Получает позицию текстдрава.",
		"body": [
			"${1:float posX, float posY} = sampTextdrawGetPos(${0:int id})"
		],
		"description": "sampTextdrawGetPos - Получает позицию текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nfloat posX , float posY позиция по X и Y\n"
	},
	"sampTextdrawGetLetterSizeAndColor || Получает длину, ширину и цвет текстдрава.": {
		"scope": "lua",
		"prefix": "sampTextdrawGetLetterSizeAndColor || Получает длину, ширину и цвет текстдрава.",
		"body": [
			"${1:float letSizeX, float letSizeY, int color} = sampTextdrawGetLetterSizeAndColor(${0:int id})"
		],
		"description": "sampTextdrawGetLetterSizeAndColor - Получает длину, ширину и цвет текстдрава.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nfloat letSizeX , float letSizeY размер., int color цвет\n"
	},
	"sampTextdrawIsExists || Проверяет текстдрав на существование.": {
		"scope": "lua",
		"prefix": "sampTextdrawIsExists || Проверяет текстдрав на существование.",
		"body": [
			"${1:bool result} = sampTextdrawIsExists(${0:int id})"
		],
		"description": "sampTextdrawIsExists - Проверяет текстдрав на существование.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\nbool result результат проверки\n"
	},
	"sampTextdrawDelete || Удаляет текстдрав.": {
		"scope": "lua",
		"prefix": "sampTextdrawDelete || Удаляет текстдрав.",
		"body": [
			"sampTextdrawDelete(${0:int id})"
		],
		"description": "sampTextdrawDelete - Удаляет текстдрав.\nПринимаемые значения:\nint id ID текстдрава\n\nВозвращаемые значения:\n\n"
	},
	"isSampfuncsGlobalVarDefined || Проверяет существование глобальной переменной, зарегистрированной с помощью SAMPFUNCS": {
		"scope": "lua",
		"prefix": "isSampfuncsGlobalVarDefined || Проверяет существование глобальной переменной, зарегистрированной с помощью SAMPFUNCS",
		"body": [
			"${1:bool result} = isSampfuncsGlobalVarDefined(${0:zstring var})"
		],
		"description": "isSampfuncsGlobalVarDefined - Проверяет существование глобальной переменной, зарегистрированной с помощью SAMPFUNCS\nПринимаемые значения:\nzstring var наименование переменной\n\nВозвращаемые значения:\nnone\n"
	},
	"getSampfuncsGlobalVarAccessForThread || Возвращает разрешения записи/чтения глобальной переменной, зарегистрированной с помощью SAMPFUNCS, для указанного SCM-потока": {
		"scope": "lua",
		"prefix": "getSampfuncsGlobalVarAccessForThread || Возвращает разрешения записи/чтения глобальной переменной, зарегистрированной с помощью SAMPFUNCS, для указанного SCM-потока",
		"body": [
			"${1:int read, int write} = getSampfuncsGlobalVarAccessForThread(${0:zstring var, int thread})"
		],
		"description": "getSampfuncsGlobalVarAccessForThread - Возвращает разрешения записи/чтения глобальной переменной, зарегистрированной с помощью SAMPFUNCS, для указанного SCM-потока\nПринимаемые значения:\nzstring var наименование переменной, int thread указатель на поток\n\nВозвращаемые значения:\nint read чтение (bool?), int write запись (bool?)\n"
	},
	"runSampfuncsConsoleCommand || Выполняет указанную консольную SAMPFUNCS команду": {
		"scope": "lua",
		"prefix": "runSampfuncsConsoleCommand || Выполняет указанную консольную SAMPFUNCS команду",
		"body": [
			"runSampfuncsConsoleCommand(${0:zstring cmd})"
		],
		"description": "runSampfuncsConsoleCommand - Выполняет указанную консольную SAMPFUNCS команду\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\n\n"
	},
	"sampfuncsUnregisterConsoleCommand || Отменяет регистрацию консольной команды, созданной с помощью функции sampfuncsRegisterConsoleCommand.": {
		"scope": "lua",
		"prefix": "sampfuncsUnregisterConsoleCommand || Отменяет регистрацию консольной команды, созданной с помощью функции sampfuncsRegisterConsoleCommand.",
		"body": [
			"${1:bool result} = sampfuncsUnregisterConsoleCommand(${0:string cmd})"
		],
		"description": "sampfuncsUnregisterConsoleCommand - Отменяет регистрацию консольной команды, созданной с помощью функции sampfuncsRegisterConsoleCommand.\nПринимаемые значения:\nstring cmd команда\n\nВозвращаемые значения:\nbool result результат выполнения\n"
	},
	"createScmThreadAtPointer || Создает SCM-поток, содержимое которого будет определено из участка памяти": {
		"scope": "lua",
		"prefix": "createScmThreadAtPointer || Создает SCM-поток, содержимое которого будет определено из участка памяти",
		"body": [
			"${1:int thread} = createScmThreadAtPointer(${0:int pointer, table args})"
		],
		"description": "createScmThreadAtPointer - Создает SCM-поток, содержимое которого будет определено из участка памяти\nПринимаемые значения:\nint pointer Указатель на участок памяти, table args Передаваемые значения/аргументы\n\nВозвращаемые значения:\nint thread Указатель на поток\n"
	},
	"setScmThreadLocalVar || Устанавливает новое значение переменной в SCM-потоке": {
		"scope": "lua",
		"prefix": "setScmThreadLocalVar || Устанавливает новое значение переменной в SCM-потоке",
		"body": [
			"setScmThreadLocalVar(${0:int thread, int var, int value})"
		],
		"description": "setScmThreadLocalVar - Устанавливает новое значение переменной в SCM-потоке\nПринимаемые значения:\nint thread Указатель на поток, int var Номер переменной, int value Значение\n\nВозвращаемые значения:\n\n"
	},
	"getScmThreadLocalVar || Возвращает значение переменной в SCM-потоке": {
		"scope": "lua",
		"prefix": "getScmThreadLocalVar || Возвращает значение переменной в SCM-потоке",
		"body": [
			"${1:int value} = getScmThreadLocalVar(${0:int thread, int var})"
		],
		"description": "getScmThreadLocalVar - Возвращает значение переменной в SCM-потоке\nПринимаемые значения:\nint thread Указатель на поток, int var Номер переменной\n\nВозвращаемые значения:\nnone\n"
	},
	"destroyScmThread || Уничтожает ранее созданный SCM-поток": {
		"scope": "lua",
		"prefix": "destroyScmThread || Уничтожает ранее созданный SCM-поток",
		"body": [
			"destroyScmThread(${0:int thread})"
		],
		"description": "destroyScmThread - Уничтожает ранее созданный SCM-поток\nПринимаемые значения:\nint thread Указатель на поток\n\nВозвращаемые значения:\n\n"
	},
	"restartScmThread || Перезагружает ранее созданный SCM-поток": {
		"scope": "lua",
		"prefix": "restartScmThread || Перезагружает ранее созданный SCM-поток",
		"body": [
			"restartScmThread(${0:int thread, table args})"
		],
		"description": "restartScmThread - Перезагружает ранее созданный SCM-поток\nПринимаемые значения:\nint thread Указатель на поток, table args Передаваемые значения/аргументы в поток\n\nВозвращаемые значения:\n\n"
	},
	"isSampfuncsConsoleActive || Проверяет видимость/активность консоли SAMPFUNCS": {
		"scope": "lua",
		"prefix": "isSampfuncsConsoleActive || Проверяет видимость/активность консоли SAMPFUNCS",
		"body": [
			"${1:bool result} = isSampfuncsConsoleActive(${0:})"
		],
		"description": "isSampfuncsConsoleActive - Проверяет видимость/активность консоли SAMPFUNCS\nПринимаемые значения:\n\n\nВозвращаемые значения:\nnone\n"
	},
	"sampSetClientCommandDescription || Устанавливает описание для клиентской команды": {
		"scope": "lua",
		"prefix": "sampSetClientCommandDescription || Устанавливает описание для клиентской команды",
		"body": [
			"sampSetClientCommandDescription(${0:zstring cmd, zstring text})"
		],
		"description": "sampSetClientCommandDescription - Устанавливает описание для клиентской команды\nПринимаемые значения:\nzstring cmd Команда, zstring text Описание\n\nВозвращаемые значения:\n\n"
	},
	"setSampfuncsConsoleCommandDescription || Устанавливает описание для консольной команды": {
		"scope": "lua",
		"prefix": "setSampfuncsConsoleCommandDescription || Устанавливает описание для консольной команды",
		"body": [
			"setSampfuncsConsoleCommandDescription(${0:zstring cmd, zstring text})"
		],
		"description": "setSampfuncsConsoleCommandDescription - Устанавливает описание для консольной команды\nПринимаемые значения:\nzstring cmd Команда, zstring text Описание\n\nВозвращаемые значения:\n\n"
	},
	"sampForceVehicleSync || Принудительная отправка пакета синхронизации - PACKET_VEHICLE_SYNC": {
		"scope": "lua",
		"prefix": "sampForceVehicleSync || Принудительная отправка пакета синхронизации - PACKET_VEHICLE_SYNC",
		"body": [
			"sampForceVehicleSync(${0:int id})"
		],
		"description": "sampForceVehicleSync - Принудительная отправка пакета синхронизации - PACKET_VEHICLE_SYNC\nПринимаемые значения:\nint id SAMP ид т/с\n\nВозвращаемые значения:\n\n"
	},
	"sampForceUnoccupiedSyncSeatId || Принудительная отправка пакета синхронизации - PACKET_UNOCCUPIED_SYNC": {
		"scope": "lua",
		"prefix": "sampForceUnoccupiedSyncSeatId || Принудительная отправка пакета синхронизации - PACKET_UNOCCUPIED_SYNC",
		"body": [
			"sampForceUnoccupiedSyncSeatId(${0:int id, int seatId})"
		],
		"description": "sampForceUnoccupiedSyncSeatId - Принудительная отправка пакета синхронизации - PACKET_UNOCCUPIED_SYNC\nПринимаемые значения:\nint id SAMP ид т/с, int seatId Номер сиденья\n\nВозвращаемые значения:\n\n"
	},
	"sampForceOnfootSync || Принудительная отправка пакета синхронизации - PACKET_PLAYER_SYNC": {
		"scope": "lua",
		"prefix": "sampForceOnfootSync || Принудительная отправка пакета синхронизации - PACKET_PLAYER_SYNC",
		"body": [
			"sampForceOnfootSync(${0:})"
		],
		"description": "sampForceOnfootSync - Принудительная отправка пакета синхронизации - PACKET_PLAYER_SYNC\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"sampForceAimSync || Принудительная отправка пакета синхронизации - PACKET_AIM_SYNC": {
		"scope": "lua",
		"prefix": "sampForceAimSync || Принудительная отправка пакета синхронизации - PACKET_AIM_SYNC",
		"body": [
			"sampForceAimSync(${0:})"
		],
		"description": "sampForceAimSync - Принудительная отправка пакета синхронизации - PACKET_AIM_SYNC\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"sampForceTrailerSync || Принудительная отправка пакета синхронизации - PACKET_TRAILER_SYNC": {
		"scope": "lua",
		"prefix": "sampForceTrailerSync || Принудительная отправка пакета синхронизации - PACKET_TRAILER_SYNC",
		"body": [
			"sampForceTrailerSync(${0:int id})"
		],
		"description": "sampForceTrailerSync - Принудительная отправка пакета синхронизации - PACKET_TRAILER_SYNC\nПринимаемые значения:\nint id SAMP ид трейлера\n\nВозвращаемые значения:\n\n"
	},
	"sampForcePassengerSyncSeatId || Принудительная отправка пакета синхронизации - PACKET_PASSENGER_SYNC": {
		"scope": "lua",
		"prefix": "sampForcePassengerSyncSeatId || Принудительная отправка пакета синхронизации - PACKET_PASSENGER_SYNC",
		"body": [
			"sampForcePassengerSyncSeatId(${0:int id, int seatId})"
		],
		"description": "sampForcePassengerSyncSeatId - Принудительная отправка пакета синхронизации - PACKET_PASSENGER_SYNC\nПринимаемые значения:\nint id SAMP ид т/с, int seatId Номер сиденья\n\nВозвращаемые значения:\n\n"
	},
	"sampForceStatsSync || Принудительная отправка пакета синхронизации - PACKET_STATS_UPDATE": {
		"scope": "lua",
		"prefix": "sampForceStatsSync || Принудительная отправка пакета синхронизации - PACKET_STATS_UPDATE",
		"body": [
			"sampForceStatsSync(${0:})"
		],
		"description": "sampForceStatsSync - Принудительная отправка пакета синхронизации - PACKET_STATS_UPDATE\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"sampForceWeaponsSync || Принудительная отправка пакета синхронизации - PACKET_WEAPONS_UPDATE": {
		"scope": "lua",
		"prefix": "sampForceWeaponsSync || Принудительная отправка пакета синхронизации - PACKET_WEAPONS_UPDATE",
		"body": [
			"sampForceWeaponsSync(${0:})"
		],
		"description": "sampForceWeaponsSync - Принудительная отправка пакета синхронизации - PACKET_WEAPONS_UPDATE\nПринимаемые значения:\n\n\nВозвращаемые значения:\n\n"
	},
	"sampGetMaxPlayerId || Возвращает максимальный SAMP ид игрока на сервере/в зоне прорисовки (стриме)": {
		"scope": "lua",
		"prefix": "sampGetMaxPlayerId || Возвращает максимальный SAMP ид игрока на сервере/в зоне прорисовки (стриме)",
		"body": [
			"${1:int id} = sampGetMaxPlayerId(${0:bool streamed})"
		],
		"description": "sampGetMaxPlayerId - Возвращает максимальный SAMP ид игрока на сервере/в зоне прорисовки (стриме)\nПринимаемые значения:\nbool streamed Поиск в стриме\n\nВозвращаемые значения:\nint id ID игрока\n"
	},
	"sampGetPlayerCount || Возвращает количество игроков. При streamed = false возвращает количество игроков на сервере, при противоположном значении - количество игроков в зоне прорисовки (стриме)": {
		"scope": "lua",
		"prefix": "sampGetPlayerCount || Возвращает количество игроков. При streamed = false возвращает количество игроков на сервере, при противоположном значении - количество игроков в зоне прорисовки (стриме)",
		"body": [
			"${1:int count} = sampGetPlayerCount(${0:bool streamed})"
		],
		"description": "sampGetPlayerCount - Возвращает количество игроков. При streamed = false возвращает количество игроков на сервере, при противоположном значении - количество игроков в зоне прорисовки (стриме)\nПринимаемые значения:\nbool streamed Поиск в стриме\n\nВозвращаемые значения:\nnone\n"
	},
	"sampProcessChatInput || Передает строку на обработку к ChatInput (поле для ввода в чате), FIXME Запрещен вызов внутри тела любой зарегистрированной команды (с помощью опкода 0B34 или функции sampRegisterChatCommand)": {
		"scope": "lua",
		"prefix": "sampProcessChatInput || Передает строку на обработку к ChatInput (поле для ввода в чате), FIXME Запрещен вызов внутри тела любой зарегистрированной команды (с помощью опкода 0B34 или функции sampRegisterChatCommand)",
		"body": [
			"sampProcessChatInput(${0:zstring text})"
		],
		"description": "sampProcessChatInput - Передает строку на обработку к ChatInput (поле для ввода в чате), FIXME Запрещен вызов внутри тела любой зарегистрированной команды (с помощью опкода 0B34 или функции sampRegisterChatCommand)\nПринимаемые значения:\nzstring text Команда/строка\n\nВозвращаемые значения:\n\n"
	},
	"sampIsChatCommandDefined || Проверяет существование клиентской команды, зарегистрированной SAMPFUNCS": {
		"scope": "lua",
		"prefix": "sampIsChatCommandDefined || Проверяет существование клиентской команды, зарегистрированной SAMPFUNCS",
		"body": [
			"${1:bool result} = sampIsChatCommandDefined(${0:zstring cmd})"
		],
		"description": "sampIsChatCommandDefined - Проверяет существование клиентской команды, зарегистрированной SAMPFUNCS\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
	},
	"isSampfuncsConsoleCommandDefined || Проверяет существование консольной команды SAMPFUNCS": {
		"scope": "lua",
		"prefix": "isSampfuncsConsoleCommandDefined || Проверяет существование консольной команды SAMPFUNCS",
		"body": [
			"${1:bool result} = isSampfuncsConsoleCommandDefined(${0:zstring cmd})"
		],
		"description": "isSampfuncsConsoleCommandDefined - Проверяет существование консольной команды SAMPFUNCS\nПринимаемые значения:\nnone\n\nВозвращаемые значения:\nnone\n"
	},
	"getCleoLibraryVersion || Получает версию Cleo.": {
		"scope": "lua",
		"prefix": "getCleoLibraryVersion || Получает версию Cleo.",
		"body": [
			"${1:int version} = getCleoLibraryVersion(${0:})"
		],
		"description": "getCleoLibraryVersion - Получает версию Cleo.\nПринимаемые значения:\n\n\nВозвращаемые значения:\nversion версия CLEO\n"
	}
}
